(COMBINED_GRAMMAR Erlang (RULES (RULE forms (BLOCK (ALT (+ (BLOCK (ALT form)))))) (RULE form (BLOCK (ALT (BLOCK (ALT attribute) (ALT function) (ALT ruleClauses)) '.'))) (RULE tokAtom (BLOCK (ALT TokAtom))) (RULE tokVar (BLOCK (ALT TokVar))) (RULE tokFloat (BLOCK (ALT TokFloat))) (RULE tokInteger (BLOCK (ALT TokInteger))) (RULE tokChar (BLOCK (ALT TokChar))) (RULE tokString (BLOCK (ALT TokString))) (RULE attribute (BLOCK (ALT '-' tokAtom attrVal) (ALT '-' tokAtom typedAttrVal) (ALT '-' tokAtom "'('" typedAttrVal "')'") (ALT AttrName typeSpec))) (RULE typeSpec (BLOCK (ALT specFun typeSigs) (ALT "'('" specFun typeSigs "')'"))) (RULE specFun (BLOCK (ALT tokAtom) (ALT tokAtom ':' tokAtom) (ALT tokAtom '/' tokInteger '::') (ALT tokAtom ':' tokAtom '/' tokInteger '::'))) (RULE typedAttrVal (BLOCK (ALT expr ',' typedRecordFields) (ALT expr '::' topType))) (RULE typedRecordFields (BLOCK (ALT '{' typedExprs '}'))) (RULE typedExprs (BLOCK (ALT typedExpr) (ALT typedExpr ',' typedExprs) (ALT expr ',' typedExprs) (ALT typedExpr ',' exprs))) (RULE typedExpr (BLOCK (ALT expr '::' topType))) (RULE typeSigs (BLOCK (ALT typeSig (* (BLOCK (ALT "';'" typeSig)))))) (RULE typeSig (BLOCK (ALT funType (? (BLOCK (ALT 'when' typeGuards)))))) (RULE typeGuards (BLOCK (ALT typeGuard (* (BLOCK (ALT ',' typeGuard)))))) (RULE typeGuard (BLOCK (ALT tokAtom "'('" topTypes "')'") (ALT tokVar '::' topType))) (RULE topTypes (BLOCK (ALT topType (* (BLOCK (ALT ',' topType)))))) (RULE topType (BLOCK (ALT (? (BLOCK (ALT tokVar '::'))) topType100))) (RULE topType100 (BLOCK (ALT type200 (? (BLOCK (ALT '|' topType100)))))) (RULE type200 (BLOCK (ALT type300 (? (BLOCK (ALT '..' type300)))))) (RULE type300 (BLOCK (ALT type300 addOp type400) (ALT type400))) (RULE type400 (BLOCK (ALT type400 multOp type500) (ALT type500))) (RULE type500 (BLOCK (ALT (? (BLOCK (ALT prefixOp))) type))) (RULE type (BLOCK (ALT "'('" topType "')'") (ALT tokVar) (ALT tokAtom) (ALT tokAtom "'('" "')'") (ALT tokAtom "'('" topTypes "')'") (ALT tokAtom ':' tokAtom "'('" "')'") (ALT tokAtom ':' tokAtom "'('" topTypes "')'") (ALT '[' ']') (ALT '[' topType ']') (ALT '[' topType ',' '...' ']') (ALT '{' '}') (ALT '{' topTypes '}') (ALT '#' tokAtom '{' '}') (ALT '#' tokAtom '{' fieldTypes '}') (ALT binaryType) (ALT tokInteger) (ALT 'fun' "'('" "')'") (ALT 'fun' "'('" funType100 "')'"))) (RULE funType100 (BLOCK (ALT "'('" '...' "')'" '->' topType) (ALT funType))) (RULE funType (BLOCK (ALT "'('" (? (BLOCK (ALT topTypes))) "')'" '->' topType))) (RULE fieldTypes (BLOCK (ALT fieldType (* (BLOCK (ALT ',' fieldType)))))) (RULE fieldType (BLOCK (ALT tokAtom '::' topType))) (RULE binaryType (BLOCK (ALT '<<' '>>') (ALT '<<' binBaseType '>>') (ALT '<<' binUnitType '>>') (ALT '<<' binBaseType ',' binUnitType '>>'))) (RULE binBaseType (BLOCK (ALT tokVar ':' type))) (RULE binUnitType (BLOCK (ALT tokVar ':' tokVar '*' type))) (RULE attrVal (BLOCK (ALT expr) (ALT "'('" expr "')'") (ALT expr ',' exprs) (ALT "'('" expr ',' exprs "')'"))) (RULE function (BLOCK (ALT functionClause (* (BLOCK (ALT "';'" functionClause)))))) (RULE functionClause (BLOCK (ALT tokAtom clauseArgs clauseGuard clauseBody))) (RULE clauseArgs (BLOCK (ALT argumentList))) (RULE clauseGuard (BLOCK (ALT (? (BLOCK (ALT 'when' guard)))))) (RULE clauseBody (BLOCK (ALT '->' exprs))) (RULE expr (BLOCK (ALT 'catch' expr) (ALT expr100))) (RULE expr100 (BLOCK (ALT expr150 (* (BLOCK (ALT (SET '=' '!') expr150)))))) (RULE expr150 (BLOCK (ALT expr160 (* (BLOCK (ALT 'orelse' expr160)))))) (RULE expr160 (BLOCK (ALT expr200 (* (BLOCK (ALT 'andalso' expr200)))))) (RULE expr200 (BLOCK (ALT expr300 (? (BLOCK (ALT compOp expr300)))))) (RULE expr300 (BLOCK (ALT expr400 (* (BLOCK (ALT listOp expr400)))))) (RULE expr400 (BLOCK (ALT expr500 (* (BLOCK (ALT addOp expr500)))))) (RULE expr500 (BLOCK (ALT expr600 (* (BLOCK (ALT multOp expr600)))))) (RULE expr600 (BLOCK (ALT (? (BLOCK (ALT prefixOp))) expr700))) (RULE expr700 (BLOCK (ALT functionCall) (ALT recordExpr) (ALT expr800))) (RULE expr800 (BLOCK (ALT exprMax (? (BLOCK (ALT ':' exprMax)))))) (RULE exprMax (BLOCK (ALT tokVar) (ALT atomic) (ALT list) (ALT binary) (ALT listComprehension) (ALT binaryComprehension) (ALT tuple) (ALT "'('" expr "')'") (ALT 'begin' exprs 'end') (ALT ifExpr) (ALT caseExpr) (ALT receiveExpr) (ALT funExpr) (ALT tryExpr))) (RULE list (BLOCK (ALT '[' ']') (ALT '[' expr tail))) (RULE tail (BLOCK (ALT ']') (ALT '|' expr ']') (ALT ',' expr tail))) (RULE binary (BLOCK (ALT '<<' '>>') (ALT '<<' binElements '>>'))) (RULE binElements (BLOCK (ALT binElement (* (BLOCK (ALT ',' binElement)))))) (RULE binElement (BLOCK (ALT bitExpr optBitSizeExpr optBitTypeList))) (RULE bitExpr (BLOCK (ALT (? (BLOCK (ALT prefixOp))) exprMax))) (RULE optBitSizeExpr (BLOCK (ALT (? (BLOCK (ALT ':' bitSizeExpr)))))) (RULE optBitTypeList (BLOCK (ALT (? (BLOCK (ALT '/' bitTypeList)))))) (RULE bitTypeList (BLOCK (ALT bitType (* (BLOCK (ALT '-' bitType)))))) (RULE bitType (BLOCK (ALT tokAtom (? (BLOCK (ALT ':' tokInteger)))))) (RULE bitSizeExpr (BLOCK (ALT exprMax))) (RULE listComprehension (BLOCK (ALT '[' expr '||' lcExprs ']'))) (RULE binaryComprehension (BLOCK (ALT '<<' binary '||' lcExprs '>>'))) (RULE lcExprs (BLOCK (ALT lcExpr (* (BLOCK (ALT ',' lcExpr)))))) (RULE lcExpr (BLOCK (ALT expr) (ALT expr '<-' expr) (ALT binary '<=' expr))) (RULE tuple (BLOCK (ALT '{' (? (BLOCK (ALT exprs))) '}'))) (RULE recordExpr (BLOCK (ALT (? (BLOCK (ALT exprMax))) '#' tokAtom (BLOCK (ALT '.' tokAtom) (ALT recordTuple))) (ALT recordExpr '#' tokAtom (BLOCK (ALT '.' tokAtom) (ALT recordTuple))))) (RULE recordTuple (BLOCK (ALT '{' (? (BLOCK (ALT recordFields))) '}'))) (RULE recordFields (BLOCK (ALT recordField (* (BLOCK (ALT ',' recordField)))))) (RULE recordField (BLOCK (ALT (BLOCK (ALT tokVar) (ALT tokAtom)) '=' expr))) (RULE functionCall (BLOCK (ALT expr800 argumentList))) (RULE ifExpr (BLOCK (ALT 'if' ifClauses 'end'))) (RULE ifClauses (BLOCK (ALT ifClause (* (BLOCK (ALT "';'" ifClause)))))) (RULE ifClause (BLOCK (ALT guard clauseBody))) (RULE caseExpr (BLOCK (ALT 'case' expr 'of' crClauses 'end'))) (RULE crClauses (BLOCK (ALT crClause (* (BLOCK (ALT "';'" crClause)))))) (RULE crClause (BLOCK (ALT expr clauseGuard clauseBody))) (RULE receiveExpr (BLOCK (ALT 'receive' crClauses 'end') (ALT 'receive' 'after' expr clauseBody 'end') (ALT 'receive' crClauses 'after' expr clauseBody 'end'))) (RULE funExpr (BLOCK (ALT 'fun' tokAtom '/' tokInteger) (ALT 'fun' atomOrVar ':' atomOrVar '/' integerOrVar) (ALT 'fun' funClauses 'end'))) (RULE atomOrVar (BLOCK (ALT tokAtom) (ALT tokVar))) (RULE integerOrVar (BLOCK (ALT tokInteger) (ALT tokVar))) (RULE funClauses (BLOCK (ALT funClause (* (BLOCK (ALT "';'" funClause)))))) (RULE funClause (BLOCK (ALT argumentList clauseGuard clauseBody))) (RULE tryExpr (BLOCK (ALT 'try' exprs (? (BLOCK (ALT 'of' crClauses))) tryCatch))) (RULE tryCatch (BLOCK (ALT 'catch' tryClauses 'end') (ALT 'catch' tryClauses 'after' exprs 'end') (ALT 'after' exprs 'end'))) (RULE tryClauses (BLOCK (ALT tryClause (* (BLOCK (ALT "';'" tryClause)))))) (RULE tryClause (BLOCK (ALT (? (BLOCK (ALT atomOrVar ':'))) expr clauseGuard clauseBody))) (RULE argumentList (BLOCK (ALT "'('" (? (BLOCK (ALT exprs))) "')'"))) (RULE exprs (BLOCK (ALT expr (* (BLOCK (ALT ',' expr)))))) (RULE guard (BLOCK (ALT exprs (* (BLOCK (ALT "';'" exprs)))))) (RULE atomic (BLOCK (ALT tokChar) (ALT tokInteger) (ALT tokFloat) (ALT tokAtom) (ALT (+ (BLOCK (ALT tokString)))))) (RULE prefixOp (BLOCK (ALT (SET '+' '-' 'bnot' 'not')))) (RULE multOp (BLOCK (ALT (SET '/' '*' 'div' 'rem' 'band' 'and')))) (RULE addOp (BLOCK (ALT (SET '+' '-' 'bor' 'bxor' 'bsl' 'bsr' 'or' 'xor')))) (RULE listOp (BLOCK (ALT (SET '++' '--')))) (RULE compOp (BLOCK (ALT (SET '==' '/=' '=<' '<' '>=' '>' '=:=' '=/=')))) (RULE ruleClauses (BLOCK (ALT ruleClause (* (BLOCK (ALT "';'" ruleClause)))))) (RULE ruleClause (BLOCK (ALT tokAtom clauseArgs clauseGuard ruleBody))) (RULE ruleBody (BLOCK (ALT ':-' lcExprs)))))