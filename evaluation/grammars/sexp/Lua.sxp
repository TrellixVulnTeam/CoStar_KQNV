(COMBINED_GRAMMAR Lua (RULES (RULE chunk (BLOCK (ALT block))) (RULE block (BLOCK (ALT (* (BLOCK (ALT stat))) (? (BLOCK (ALT retstat)))))) (RULE stat (BLOCK (ALT "';'") (ALT varlist '=' explist) (ALT functioncall) (ALT label) (ALT 'break') (ALT 'goto' NAME) (ALT 'do' block 'end') (ALT 'while' exp 'do' block 'end') (ALT 'repeat' block 'until' exp) (ALT 'if' exp 'then' block (* (BLOCK (ALT 'elseif' exp 'then' block))) (? (BLOCK (ALT 'else' block))) 'end') (ALT 'for' NAME '=' exp ',' exp (? (BLOCK (ALT ',' exp))) 'do' block 'end') (ALT 'for' namelist 'in' explist 'do' block 'end') (ALT 'function' funcname funcbody) (ALT 'local' 'function' NAME funcbody) (ALT 'local' namelist (? (BLOCK (ALT '=' explist)))))) (RULE retstat (BLOCK (ALT 'return' (? (BLOCK (ALT explist))) (? (BLOCK (ALT "';'")))))) (RULE label (BLOCK (ALT '::' NAME '::'))) (RULE funcname (BLOCK (ALT NAME (* (BLOCK (ALT '.' NAME))) (? (BLOCK (ALT ':' NAME)))))) (RULE varlist (BLOCK (ALT var (* (BLOCK (ALT ',' var)))))) (RULE namelist (BLOCK (ALT NAME (* (BLOCK (ALT ',' NAME)))))) (RULE explist (BLOCK (ALT exp (* (BLOCK (ALT ',' exp)))))) (RULE exp (BLOCK (ALT 'nil') (ALT 'false') (ALT 'true') (ALT number) (ALT string) (ALT '...') (ALT functiondef) (ALT prefixexp) (ALT tableconstructor) (ALT exp binop exp) (ALT unop exp))) (RULE var (BLOCK (ALT (BLOCK (ALT NAME) (ALT "'('" exp "')'" varSuffix)) (* (BLOCK (ALT varSuffix)))))) (RULE prefixexp (BLOCK (ALT varOrExp (* (BLOCK (ALT nameAndArgs)))))) (RULE functioncall (BLOCK (ALT varOrExp (+ (BLOCK (ALT nameAndArgs)))))) (RULE varOrExp (BLOCK (ALT var) (ALT "'('" exp "')'"))) (RULE nameAndArgs (BLOCK (ALT (? (BLOCK (ALT ':' NAME))) args))) (RULE varSuffix (BLOCK (ALT (* (BLOCK (ALT nameAndArgs))) (BLOCK (ALT '[' exp ']') (ALT '.' NAME))))) (RULE args (BLOCK (ALT "'('" (? (BLOCK (ALT explist))) "')'") (ALT tableconstructor) (ALT string))) (RULE functiondef (BLOCK (ALT 'function' funcbody))) (RULE funcbody (BLOCK (ALT "'('" (? (BLOCK (ALT parlist))) "')'" block 'end'))) (RULE parlist (BLOCK (ALT namelist (? (BLOCK (ALT ',' '...')))) (ALT '...'))) (RULE tableconstructor (BLOCK (ALT '{' (? (BLOCK (ALT fieldlist))) '}'))) (RULE fieldlist (BLOCK (ALT field (* (BLOCK (ALT fieldsep field))) (? (BLOCK (ALT fieldsep)))))) (RULE field (BLOCK (ALT '[' exp ']' '=' exp) (ALT NAME '=' exp) (ALT exp))) (RULE fieldsep (BLOCK (ALT (SET ',' "';'")))) (RULE binop (BLOCK (ALT (SET '+' '-' '*' '/' '^' '%' '..' '<' '<=' '>' '>=' '==' '~=' 'and' 'or')))) (RULE unop (BLOCK (ALT (SET '-' 'not' '#')))) (RULE number (BLOCK (ALT (SET INT HEX FLOAT HEX_FLOAT)))) (RULE string (BLOCK (ALT (SET NORMALSTRING CHARSTRING LONGSTRING))))))
