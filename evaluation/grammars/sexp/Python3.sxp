(COMBINED_GRAMMAR Python3 (RULES (RULE single_input (BLOCK (ALT NEWLINE) (ALT simple_stmt) (ALT compound_stmt NEWLINE))) (RULE file_input (BLOCK (ALT (* (BLOCK (ALT NEWLINE) (ALT stmt)))))) (RULE eval_input (BLOCK (ALT testlist (* (BLOCK (ALT NEWLINE))) EOF))) (RULE decorator (BLOCK (ALT AT dotted_name (? (BLOCK (ALT OPEN_PAREN (? (BLOCK (ALT arglist))) CLOSE_PAREN))) NEWLINE))) (RULE decorators (BLOCK (ALT (+ (BLOCK (ALT decorator)))))) (RULE decorated (BLOCK (ALT decorators (BLOCK (ALT classdef) (ALT funcdef) (ALT async_funcdef))))) (RULE async_funcdef (BLOCK (ALT ASYNC funcdef))) (RULE funcdef (BLOCK (ALT DEF NAME parameters (? (BLOCK (ALT ARROW test))) COLON suite))) (RULE parameters (BLOCK (ALT OPEN_PAREN (? (BLOCK (ALT typedargslist))) CLOSE_PAREN))) (RULE typedargslist (BLOCK (ALT (BLOCK (ALT tfpdef (? (BLOCK (ALT ASSIGN test))) (* (BLOCK (ALT COMMA tfpdef (? (BLOCK (ALT ASSIGN test)))))) (? (BLOCK (ALT COMMA (? (BLOCK (ALT STAR (? (BLOCK (ALT tfpdef))) (* (BLOCK (ALT COMMA tfpdef (? (BLOCK (ALT ASSIGN test)))))) (? (BLOCK (ALT COMMA (? (BLOCK (ALT POWER tfpdef (? (BLOCK (ALT COMMA)))))))))) (ALT POWER tfpdef (? (BLOCK (ALT COMMA)))))))))) (ALT STAR (? (BLOCK (ALT tfpdef))) (* (BLOCK (ALT COMMA tfpdef (? (BLOCK (ALT ASSIGN test)))))) (? (BLOCK (ALT COMMA (? (BLOCK (ALT POWER tfpdef (? (BLOCK (ALT COMMA)))))))))) (ALT POWER tfpdef (? (BLOCK (ALT COMMA)))))))) (RULE tfpdef (BLOCK (ALT NAME (? (BLOCK (ALT COLON test)))))) (RULE varargslist (BLOCK (ALT (BLOCK (ALT vfpdef (? (BLOCK (ALT ASSIGN test))) (* (BLOCK (ALT COMMA vfpdef (? (BLOCK (ALT ASSIGN test)))))) (? (BLOCK (ALT COMMA (? (BLOCK (ALT STAR (? (BLOCK (ALT vfpdef))) (* (BLOCK (ALT COMMA vfpdef (? (BLOCK (ALT ASSIGN test)))))) (? (BLOCK (ALT COMMA (? (BLOCK (ALT POWER vfpdef (? (BLOCK (ALT COMMA)))))))))) (ALT POWER vfpdef (? (BLOCK (ALT COMMA)))))))))) (ALT STAR (? (BLOCK (ALT vfpdef))) (* (BLOCK (ALT COMMA vfpdef (? (BLOCK (ALT ASSIGN test)))))) (? (BLOCK (ALT COMMA (? (BLOCK (ALT POWER vfpdef (? (BLOCK (ALT COMMA)))))))))) (ALT POWER vfpdef (? (BLOCK (ALT COMMA)))))))) (RULE vfpdef (BLOCK (ALT NAME))) (RULE stmt (BLOCK (ALT simple_stmt) (ALT compound_stmt))) (RULE simple_stmt (BLOCK (ALT small_stmt (* (BLOCK (ALT SEMI_COLON small_stmt))) (? (BLOCK (ALT SEMI_COLON))) NEWLINE))) (RULE small_stmt (BLOCK (ALT (BLOCK (ALT expr_stmt) (ALT del_stmt) (ALT pass_stmt) (ALT flow_stmt) (ALT import_stmt) (ALT global_stmt) (ALT nonlocal_stmt) (ALT assert_stmt))))) (RULE expr_stmt (BLOCK (ALT testlist_star_expr (BLOCK (ALT annassign) (ALT augassign (BLOCK (ALT yield_expr) (ALT testlist))) (ALT (* (BLOCK (ALT ASSIGN (BLOCK (ALT yield_expr) (ALT testlist_star_expr)))))))))) (RULE annassign (BLOCK (ALT COLON test (? (BLOCK (ALT ASSIGN test)))))) (RULE testlist_star_expr (BLOCK (ALT (BLOCK (ALT test) (ALT star_expr)) (* (BLOCK (ALT COMMA (BLOCK (ALT test) (ALT star_expr))))) (? (BLOCK (ALT COMMA)))))) (RULE augassign (BLOCK (ALT (SET ADD_ASSIGN SUB_ASSIGN MULT_ASSIGN AT_ASSIGN DIV_ASSIGN MOD_ASSIGN AND_ASSIGN OR_ASSIGN XOR_ASSIGN LEFT_SHIFT_ASSIGN RIGHT_SHIFT_ASSIGN POWER_ASSIGN IDIV_ASSIGN)))) (RULE del_stmt (BLOCK (ALT DEL exprlist))) (RULE pass_stmt (BLOCK (ALT PASS))) (RULE flow_stmt (BLOCK (ALT break_stmt) (ALT continue_stmt) (ALT return_stmt) (ALT raise_stmt) (ALT yield_stmt))) (RULE break_stmt (BLOCK (ALT BREAK))) (RULE continue_stmt (BLOCK (ALT CONTINUE))) (RULE return_stmt (BLOCK (ALT RETURN (? (BLOCK (ALT testlist)))))) (RULE yield_stmt (BLOCK (ALT yield_expr))) (RULE raise_stmt (BLOCK (ALT RAISE (? (BLOCK (ALT test (? (BLOCK (ALT FROM test))))))))) (RULE import_stmt (BLOCK (ALT import_name) (ALT import_from))) (RULE import_name (BLOCK (ALT IMPORT dotted_as_names))) (RULE import_from (BLOCK (ALT (BLOCK (ALT FROM (BLOCK (ALT (* (BLOCK (ALT (SET DOT ELLIPSIS)))) dotted_name) (ALT (+ (BLOCK (ALT (SET DOT ELLIPSIS)))))) IMPORT (BLOCK (ALT STAR) (ALT OPEN_PAREN import_as_names CLOSE_PAREN) (ALT import_as_names))))))) (RULE import_as_name (BLOCK (ALT NAME (? (BLOCK (ALT AS NAME)))))) (RULE dotted_as_name (BLOCK (ALT dotted_name (? (BLOCK (ALT AS NAME)))))) (RULE import_as_names (BLOCK (ALT import_as_name (* (BLOCK (ALT COMMA import_as_name))) (? (BLOCK (ALT COMMA)))))) (RULE dotted_as_names (BLOCK (ALT dotted_as_name (* (BLOCK (ALT COMMA dotted_as_name)))))) (RULE dotted_name (BLOCK (ALT NAME (* (BLOCK (ALT DOT NAME)))))) (RULE global_stmt (BLOCK (ALT GLOBAL NAME (* (BLOCK (ALT COMMA NAME)))))) (RULE nonlocal_stmt (BLOCK (ALT NONLOCAL NAME (* (BLOCK (ALT COMMA NAME)))))) (RULE assert_stmt (BLOCK (ALT ASSERT test (? (BLOCK (ALT COMMA test)))))) (RULE compound_stmt (BLOCK (ALT if_stmt) (ALT while_stmt) (ALT for_stmt) (ALT try_stmt) (ALT with_stmt) (ALT funcdef) (ALT classdef) (ALT decorated) (ALT async_stmt))) (RULE async_stmt (BLOCK (ALT ASYNC (BLOCK (ALT funcdef) (ALT with_stmt) (ALT for_stmt))))) (RULE if_stmt (BLOCK (ALT IF_TOK test COLON suite (* (BLOCK (ALT ELIF test COLON suite))) (? (BLOCK (ALT ELSE COLON suite)))))) (RULE while_stmt (BLOCK (ALT WHILE test COLON suite (? (BLOCK (ALT ELSE COLON suite)))))) (RULE for_stmt (BLOCK (ALT FOR exprlist IN testlist COLON suite (? (BLOCK (ALT ELSE COLON suite)))))) (RULE try_stmt (BLOCK (ALT (BLOCK (ALT TRY COLON suite (BLOCK (ALT (+ (BLOCK (ALT except_clause COLON suite))) (? (BLOCK (ALT ELSE COLON suite))) (? (BLOCK (ALT FINALLY COLON suite)))) (ALT FINALLY COLON suite))))))) (RULE with_stmt (BLOCK (ALT WITH with_item (* (BLOCK (ALT COMMA with_item))) COLON suite))) (RULE with_item (BLOCK (ALT test (? (BLOCK (ALT AS expr)))))) (RULE except_clause (BLOCK (ALT EXCEPT (? (BLOCK (ALT test (? (BLOCK (ALT AS NAME))))))))) (RULE suite (BLOCK (ALT simple_stmt) (ALT NEWLINE INDENT (+ (BLOCK (ALT stmt))) DEDENT))) (RULE test (BLOCK (ALT or_test (? (BLOCK (ALT IF_TOK or_test ELSE test)))) (ALT lambdef))) (RULE test_nocond (BLOCK (ALT or_test) (ALT lambdef_nocond))) (RULE lambdef (BLOCK (ALT LAMBDA (? (BLOCK (ALT varargslist))) COLON test))) (RULE lambdef_nocond (BLOCK (ALT LAMBDA (? (BLOCK (ALT varargslist))) COLON test_nocond))) (RULE or_test (BLOCK (ALT and_test (* (BLOCK (ALT OR and_test)))))) (RULE and_test (BLOCK (ALT not_test (* (BLOCK (ALT AND not_test)))))) (RULE not_test (BLOCK (ALT NOT not_test) (ALT comparison))) (RULE comparison (BLOCK (ALT expr (* (BLOCK (ALT comp_op expr)))))) (RULE comp_op (BLOCK (ALT LESS_THAN) (ALT GREATER_THAN) (ALT EQUALS) (ALT GT_EQ) (ALT LT_EQ) (ALT NOT_EQ_1) (ALT NOT_EQ_2) (ALT IN) (ALT NOT IN) (ALT IS) (ALT IS NOT))) (RULE star_expr (BLOCK (ALT STAR expr))) (RULE expr (BLOCK (ALT xor_expr (* (BLOCK (ALT OR_OP xor_expr)))))) (RULE xor_expr (BLOCK (ALT and_expr (* (BLOCK (ALT XOR and_expr)))))) (RULE and_expr (BLOCK (ALT shift_expr (* (BLOCK (ALT AND_OP shift_expr)))))) (RULE shift_expr (BLOCK (ALT arith_expr (* (BLOCK (ALT (SET LEFT_SHIFT RIGHT_SHIFT) arith_expr)))))) (RULE arith_expr (BLOCK (ALT term (* (BLOCK (ALT (SET ADD MINUS) term)))))) (RULE term (BLOCK (ALT factor (* (BLOCK (ALT (SET STAR AT DIV MOD IDIV) factor)))))) (RULE factor (BLOCK (ALT (SET ADD MINUS NOT_OP) factor) (ALT power))) (RULE power (BLOCK (ALT atom_expr (? (BLOCK (ALT POWER factor)))))) (RULE atom_expr (BLOCK (ALT (? (BLOCK (ALT AWAIT))) atom (* (BLOCK (ALT trailer)))))) (RULE atom (BLOCK (ALT (BLOCK (ALT OPEN_PAREN (? (BLOCK (ALT yield_expr) (ALT testlist_comp))) CLOSE_PAREN) (ALT OPEN_BRACK (? (BLOCK (ALT testlist_comp))) CLOSE_BRACK) (ALT OPEN_BRACE (? (BLOCK (ALT dictorsetmaker))) CLOSE_BRACE) (ALT NAME) (ALT NUMBER) (ALT (+ (BLOCK (ALT STRING)))) (ALT ELLIPSIS) (ALT NONE) (ALT TRUE) (ALT FALSE))))) (RULE testlist_comp (BLOCK (ALT (BLOCK (ALT test) (ALT star_expr)) (BLOCK (ALT comp_for) (ALT (* (BLOCK (ALT COMMA (BLOCK (ALT test) (ALT star_expr))))) (? (BLOCK (ALT COMMA)))))))) (RULE trailer (BLOCK (ALT OPEN_PAREN (? (BLOCK (ALT arglist))) CLOSE_PAREN) (ALT OPEN_BRACK subscriptlist CLOSE_BRACK) (ALT DOT NAME))) (RULE subscriptlist (BLOCK (ALT subscript (* (BLOCK (ALT COMMA subscript))) (? (BLOCK (ALT COMMA)))))) (RULE subscript (BLOCK (ALT test) (ALT (? (BLOCK (ALT test))) COLON (? (BLOCK (ALT test))) (? (BLOCK (ALT sliceop)))))) (RULE sliceop (BLOCK (ALT COLON (? (BLOCK (ALT test)))))) (RULE exprlist (BLOCK (ALT (BLOCK (ALT expr) (ALT star_expr)) (* (BLOCK (ALT COMMA (BLOCK (ALT expr) (ALT star_expr))))) (? (BLOCK (ALT COMMA)))))) (RULE testlist (BLOCK (ALT test (* (BLOCK (ALT COMMA test))) (? (BLOCK (ALT COMMA)))))) (RULE dictorsetmaker (BLOCK (ALT (BLOCK (ALT (BLOCK (ALT (BLOCK (ALT test COLON test) (ALT POWER expr)) (BLOCK (ALT comp_for) (ALT (* (BLOCK (ALT COMMA (BLOCK (ALT test COLON test) (ALT POWER expr))))) (? (BLOCK (ALT COMMA)))))))) (ALT (BLOCK (ALT (BLOCK (ALT test) (ALT star_expr)) (BLOCK (ALT comp_for) (ALT (* (BLOCK (ALT COMMA (BLOCK (ALT test) (ALT star_expr))))) (? (BLOCK (ALT COMMA)))))))))))) (RULE classdef (BLOCK (ALT CLASS NAME (? (BLOCK (ALT OPEN_PAREN (? (BLOCK (ALT arglist))) CLOSE_PAREN))) COLON suite))) (RULE arglist (BLOCK (ALT argument (* (BLOCK (ALT COMMA argument))) (? (BLOCK (ALT COMMA)))))) (RULE argument (BLOCK (ALT (BLOCK (ALT test (? (BLOCK (ALT comp_for)))) (ALT test ASSIGN test) (ALT POWER test) (ALT STAR test))))) (RULE comp_iter (BLOCK (ALT comp_for) (ALT comp_if))) (RULE comp_for (BLOCK (ALT (? (BLOCK (ALT ASYNC))) FOR exprlist IN or_test (? (BLOCK (ALT comp_iter)))))) (RULE comp_if (BLOCK (ALT IF_TOK test_nocond (? (BLOCK (ALT comp_iter)))))) (RULE encoding_decl (BLOCK (ALT NAME))) (RULE yield_expr (BLOCK (ALT YIELD (? (BLOCK (ALT yield_arg)))))) (RULE yield_arg (BLOCK (ALT FROM test) (ALT testlist)))))