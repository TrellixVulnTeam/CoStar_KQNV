(COMBINED_GRAMMAR C (RULES (RULE primaryExpression (BLOCK (ALT Identifier) (ALT Constant) (ALT (+ (BLOCK (ALT StringLiteral)))) (ALT '(' expression ')') (ALT genericSelection) (ALT (? (BLOCK (ALT '__extension__'))) '(' compoundStatement ')') (ALT '__builtin_va_arg' '(' unaryExpression ',' typeName ')') (ALT '__builtin_offsetof' '(' typeName ',' unaryExpression ')'))) (RULE genericSelection (BLOCK (ALT '_Generic' '(' assignmentExpression ',' genericAssocList ')'))) (RULE genericAssocList (BLOCK (ALT genericAssociation) (ALT genericAssocList ',' genericAssociation))) (RULE genericAssociation (BLOCK (ALT typeName ':' assignmentExpression) (ALT 'default' ':' assignmentExpression))) (RULE postfixExpression (BLOCK (ALT primaryExpression) (ALT postfixExpression '[' expression ']') (ALT postfixExpression '(' (? (BLOCK (ALT argumentExpressionList))) ')') (ALT postfixExpression '.' Identifier) (ALT postfixExpression '->' Identifier) (ALT postfixExpression '++') (ALT postfixExpression '--') (ALT '(' typeName ')' '{' initializerList '}') (ALT '(' typeName ')' '{' initializerList ',' '}') (ALT '__extension__' '(' typeName ')' '{' initializerList '}') (ALT '__extension__' '(' typeName ')' '{' initializerList ',' '}'))) (RULE argumentExpressionList (BLOCK (ALT assignmentExpression) (ALT argumentExpressionList ',' assignmentExpression))) (RULE unaryExpression (BLOCK (ALT postfixExpression) (ALT '++' unaryExpression) (ALT '--' unaryExpression) (ALT unaryOperator castExpression) (ALT 'sizeof' unaryExpression) (ALT 'sizeof' '(' typeName ')') (ALT '_Alignof' '(' typeName ')') (ALT '&&' Identifier))) (RULE unaryOperator (BLOCK (ALT (SET '&' '*' '+' '-' '~' '!')))) (RULE castExpression (BLOCK (ALT unaryExpression) (ALT '(' typeName ')' castExpression) (ALT '__extension__' '(' typeName ')' castExpression))) (RULE multiplicativeExpression (BLOCK (ALT castExpression) (ALT multiplicativeExpression '*' castExpression) (ALT multiplicativeExpression '/' castExpression) (ALT multiplicativeExpression '%' castExpression))) (RULE additiveExpression (BLOCK (ALT multiplicativeExpression) (ALT additiveExpression '+' multiplicativeExpression) (ALT additiveExpression '-' multiplicativeExpression))) (RULE shiftExpression (BLOCK (ALT additiveExpression) (ALT shiftExpression '<<' additiveExpression) (ALT shiftExpression '>>' additiveExpression))) (RULE relationalExpression (BLOCK (ALT shiftExpression) (ALT relationalExpression '<' shiftExpression) (ALT relationalExpression '>' shiftExpression) (ALT relationalExpression '<=' shiftExpression) (ALT relationalExpression '>=' shiftExpression))) (RULE equalityExpression (BLOCK (ALT relationalExpression) (ALT equalityExpression '==' relationalExpression) (ALT equalityExpression '!=' relationalExpression))) (RULE andExpression (BLOCK (ALT equalityExpression) (ALT andExpression '&' equalityExpression))) (RULE exclusiveOrExpression (BLOCK (ALT andExpression) (ALT exclusiveOrExpression '^' andExpression))) (RULE inclusiveOrExpression (BLOCK (ALT exclusiveOrExpression) (ALT inclusiveOrExpression '|' exclusiveOrExpression))) (RULE logicalAndExpression (BLOCK (ALT inclusiveOrExpression) (ALT logicalAndExpression '&&' inclusiveOrExpression))) (RULE logicalOrExpression (BLOCK (ALT logicalAndExpression) (ALT logicalOrExpression '||' logicalAndExpression))) (RULE conditionalExpression (BLOCK (ALT logicalOrExpression (? (BLOCK (ALT '?' expression ':' conditionalExpression)))))) (RULE assignmentExpression (BLOCK (ALT conditionalExpression) (ALT unaryExpression assignmentOperator assignmentExpression))) (RULE assignmentOperator (BLOCK (ALT (SET '=' '*=' '/=' '%=' '+=' '-=' '<<=' '>>=' '&=' '^=' '|=')))) (RULE expression (BLOCK (ALT assignmentExpression) (ALT expression ',' assignmentExpression))) (RULE constantExpression (BLOCK (ALT conditionalExpression))) (RULE declaration (BLOCK (ALT declarationSpecifiers (? (BLOCK (ALT initDeclaratorList))) ';') (ALT staticAssertDeclaration))) (RULE declarationSpecifiers (BLOCK (ALT (+ (BLOCK (ALT declarationSpecifier)))))) (RULE declarationSpecifiers2 (BLOCK (ALT (+ (BLOCK (ALT declarationSpecifier)))))) (RULE declarationSpecifier (BLOCK (ALT storageClassSpecifier) (ALT typeSpecifier) (ALT typeQualifier) (ALT functionSpecifier) (ALT alignmentSpecifier))) (RULE initDeclaratorList (BLOCK (ALT initDeclarator) (ALT initDeclaratorList ',' initDeclarator))) (RULE initDeclarator (BLOCK (ALT declarator) (ALT declarator '=' initializer))) (RULE storageClassSpecifier (BLOCK (ALT (SET 'typedef' 'extern' 'static' '_Thread_local' 'auto' 'register')))) (RULE typeSpecifier (BLOCK (ALT (SET 'void' 'char' 'short' 'int' 'long' 'float' 'double' 'signed' 'unsigned' '_Bool' '_Complex' '__m128' '__m128d' '__m128i')) (ALT '__extension__' '(' (SET '__m128' '__m128d' '__m128i') ')') (ALT atomicTypeSpecifier) (ALT structOrUnionSpecifier) (ALT enumSpecifier) (ALT typedefName) (ALT '__typeof__' '(' constantExpression ')'))) (RULE structOrUnionSpecifier (BLOCK (ALT structOrUnion (? (BLOCK (ALT Identifier))) '{' structDeclarationList '}') (ALT structOrUnion Identifier))) (RULE structOrUnion (BLOCK (ALT (SET 'struct' 'union')))) (RULE structDeclarationList (BLOCK (ALT structDeclaration) (ALT structDeclarationList structDeclaration))) (RULE structDeclaration (BLOCK (ALT specifierQualifierList (? (BLOCK (ALT structDeclaratorList))) ';') (ALT staticAssertDeclaration))) (RULE specifierQualifierList (BLOCK (ALT typeSpecifier (? (BLOCK (ALT specifierQualifierList)))) (ALT typeQualifier (? (BLOCK (ALT specifierQualifierList)))))) (RULE structDeclaratorList (BLOCK (ALT structDeclarator) (ALT structDeclaratorList ',' structDeclarator))) (RULE structDeclarator (BLOCK (ALT declarator) (ALT (? (BLOCK (ALT declarator))) ':' constantExpression))) (RULE enumSpecifier (BLOCK (ALT 'enum' (? (BLOCK (ALT Identifier))) '{' enumeratorList '}') (ALT 'enum' (? (BLOCK (ALT Identifier))) '{' enumeratorList ',' '}') (ALT 'enum' Identifier))) (RULE enumeratorList (BLOCK (ALT enumerator) (ALT enumeratorList ',' enumerator))) (RULE enumerator (BLOCK (ALT enumerationConstant) (ALT enumerationConstant '=' constantExpression))) (RULE enumerationConstant (BLOCK (ALT Identifier))) (RULE atomicTypeSpecifier (BLOCK (ALT '_Atomic' '(' typeName ')'))) (RULE typeQualifier (BLOCK (ALT (SET 'const' 'restrict' 'volatile' '_Atomic')))) (RULE functionSpecifier (BLOCK (ALT (SET 'inline' '_Noreturn' '__inline__' '__stdcall')) (ALT gccAttributeSpecifier) (ALT '__declspec' '(' Identifier ')'))) (RULE alignmentSpecifier (BLOCK (ALT '_Alignas' '(' typeName ')') (ALT '_Alignas' '(' constantExpression ')'))) (RULE declarator (BLOCK (ALT (? (BLOCK (ALT pointer))) directDeclarator (* (BLOCK (ALT gccDeclaratorExtension)))))) (RULE directDeclarator (BLOCK (ALT Identifier) (ALT '(' declarator ')') (ALT directDeclarator '[' (? (BLOCK (ALT typeQualifierList))) (? (BLOCK (ALT assignmentExpression))) ']') (ALT directDeclarator '[' 'static' (? (BLOCK (ALT typeQualifierList))) assignmentExpression ']') (ALT directDeclarator '[' typeQualifierList 'static' assignmentExpression ']') (ALT directDeclarator '[' (? (BLOCK (ALT typeQualifierList))) '*' ']') (ALT directDeclarator '(' parameterTypeList ')') (ALT directDeclarator '(' (? (BLOCK (ALT identifierList))) ')'))) (RULE gccDeclaratorExtension (BLOCK (ALT '__asm' '(' (+ (BLOCK (ALT StringLiteral))) ')') (ALT gccAttributeSpecifier))) (RULE gccAttributeSpecifier (BLOCK (ALT '__attribute__' '(' '(' gccAttributeList ')' ')'))) (RULE gccAttributeList (BLOCK (ALT gccAttribute (* (BLOCK (ALT ',' gccAttribute)))) (ALT EPSILON))) (RULE gccAttribute (BLOCK (ALT (~ (SET ',' '(' ')')) (? (BLOCK (ALT '(' (? (BLOCK (ALT argumentExpressionList))) ')')))) (ALT EPSILON))) (RULE nestedParenthesesBlock (BLOCK (ALT (* (BLOCK (ALT (~ (SET '(' ')'))) (ALT '(' nestedParenthesesBlock ')')))))) (RULE pointer (BLOCK (ALT '*' (? (BLOCK (ALT typeQualifierList)))) (ALT '*' (? (BLOCK (ALT typeQualifierList))) pointer) (ALT '^' (? (BLOCK (ALT typeQualifierList)))) (ALT '^' (? (BLOCK (ALT typeQualifierList))) pointer))) (RULE typeQualifierList (BLOCK (ALT typeQualifier) (ALT typeQualifierList typeQualifier))) (RULE parameterTypeList (BLOCK (ALT parameterList) (ALT parameterList ',' '...'))) (RULE parameterList (BLOCK (ALT parameterDeclaration) (ALT parameterList ',' parameterDeclaration))) (RULE parameterDeclaration (BLOCK (ALT declarationSpecifiers declarator) (ALT declarationSpecifiers2 (? (BLOCK (ALT abstractDeclarator)))))) (RULE identifierList (BLOCK (ALT Identifier) (ALT identifierList ',' Identifier))) (RULE typeName (BLOCK (ALT specifierQualifierList (? (BLOCK (ALT abstractDeclarator)))))) (RULE abstractDeclarator (BLOCK (ALT pointer) (ALT (? (BLOCK (ALT pointer))) directAbstractDeclarator (* (BLOCK (ALT gccDeclaratorExtension)))))) (RULE directAbstractDeclarator (BLOCK (ALT '(' abstractDeclarator ')' (* (BLOCK (ALT gccDeclaratorExtension)))) (ALT '[' (? (BLOCK (ALT typeQualifierList))) (? (BLOCK (ALT assignmentExpression))) ']') (ALT '[' 'static' (? (BLOCK (ALT typeQualifierList))) assignmentExpression ']') (ALT '[' typeQualifierList 'static' assignmentExpression ']') (ALT '[' '*' ']') (ALT '(' (? (BLOCK (ALT parameterTypeList))) ')' (* (BLOCK (ALT gccDeclaratorExtension)))) (ALT directAbstractDeclarator '[' (? (BLOCK (ALT typeQualifierList))) (? (BLOCK (ALT assignmentExpression))) ']') (ALT directAbstractDeclarator '[' 'static' (? (BLOCK (ALT typeQualifierList))) assignmentExpression ']') (ALT directAbstractDeclarator '[' typeQualifierList 'static' assignmentExpression ']') (ALT directAbstractDeclarator '[' '*' ']') (ALT directAbstractDeclarator '(' (? (BLOCK (ALT parameterTypeList))) ')' (* (BLOCK (ALT gccDeclaratorExtension)))))) (RULE typedefName (BLOCK (ALT Identifier))) (RULE initializer (BLOCK (ALT assignmentExpression) (ALT '{' initializerList '}') (ALT '{' initializerList ',' '}'))) (RULE initializerList (BLOCK (ALT (? (BLOCK (ALT designation))) initializer) (ALT initializerList ',' (? (BLOCK (ALT designation))) initializer))) (RULE designation (BLOCK (ALT designatorList '='))) (RULE designatorList (BLOCK (ALT designator) (ALT designatorList designator))) (RULE designator (BLOCK (ALT '[' constantExpression ']') (ALT '.' Identifier))) (RULE staticAssertDeclaration (BLOCK (ALT '_Static_assert' '(' constantExpression ',' (+ (BLOCK (ALT StringLiteral))) ')' ';'))) (RULE statement (BLOCK (ALT labeledStatement) (ALT compoundStatement) (ALT expressionStatement) (ALT selectionStatement) (ALT iterationStatement) (ALT jumpStatement) (ALT (SET '__asm' '__asm__') (SET 'volatile' '__volatile__') '(' (? (BLOCK (ALT logicalOrExpression (* (BLOCK (ALT ',' logicalOrExpression)))))) (* (BLOCK (ALT ':' (? (BLOCK (ALT logicalOrExpression (* (BLOCK (ALT ',' logicalOrExpression))))))))) ')' ';'))) (RULE labeledStatement (BLOCK (ALT Identifier ':' statement) (ALT 'case' constantExpression ':' statement) (ALT 'default' ':' statement))) (RULE compoundStatement (BLOCK (ALT '{' (? (BLOCK (ALT blockItemList))) '}'))) (RULE blockItemList (BLOCK (ALT blockItem) (ALT blockItemList blockItem))) (RULE blockItem (BLOCK (ALT declaration) (ALT statement))) (RULE expressionStatement (BLOCK (ALT (? (BLOCK (ALT expression))) ';'))) (RULE selectionStatement (BLOCK (ALT 'if' '(' expression ')' statement (? (BLOCK (ALT 'else' statement)))) (ALT 'switch' '(' expression ')' statement))) (RULE iterationStatement (BLOCK (ALT 'while' '(' expression ')' statement) (ALT 'do' statement 'while' '(' expression ')' ';') (ALT 'for' '(' (? (BLOCK (ALT expression))) ';' (? (BLOCK (ALT expression))) ';' (? (BLOCK (ALT expression))) ')' statement) (ALT 'for' '(' declaration (? (BLOCK (ALT expression))) ';' (? (BLOCK (ALT expression))) ')' statement))) (RULE jumpStatement (BLOCK (ALT 'goto' Identifier ';') (ALT 'continue' ';') (ALT 'break' ';') (ALT 'return' (? (BLOCK (ALT expression))) ';') (ALT 'goto' unaryExpression ';'))) (RULE compilationUnit (BLOCK (ALT (? (BLOCK (ALT translationUnit))) EOF))) (RULE translationUnit (BLOCK (ALT externalDeclaration) (ALT translationUnit externalDeclaration))) (RULE externalDeclaration (BLOCK (ALT functionDefinition) (ALT declaration) (ALT ';'))) (RULE functionDefinition (BLOCK (ALT (? (BLOCK (ALT declarationSpecifiers))) declarator (? (BLOCK (ALT declarationList))) compoundStatement))) (RULE declarationList (BLOCK (ALT declaration) (ALT declarationList declaration)))))