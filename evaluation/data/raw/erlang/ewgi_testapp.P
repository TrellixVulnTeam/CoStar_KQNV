-file("test/lib/dialyzer/test/opaque_SUITE_data/src/ewgi2/ewgi_testapp.erl",
      1).

-module(ewgi_testapp).

-export([htmlise/1]).

-file("test/lib/dialyzer/test/opaque_SUITE_data/src/ewgi2/ewgi.hrl", 1).

-type ewgi_propval() :: atom() | integer() | string() | binary().

-type ewgi_prop() :: {ewgi_propval(), ewgi_propval()}.

-type ewgi_proplist() :: [ewgi_prop()].

-type bag() :: gb_tree().

-type ewgi_ri_callback() :: fun((eof | {data, binary()}) ->
                                    iolist() | function())
                          | iolist().

-type ewgi_read_input() ::
          fun((ewgi_ri_callback(), integer()) -> ewgi_ri_callback()).

-type ewgi_write_error() :: fun((any()) -> ok).

-type ewgi_version() :: {integer(), integer()}.

-type ewgi_spec() ::
          {ewgi_spec,
           ewgi_read_input(),
           ewgi_write_error(),
           string(),
           ewgi_version(),
           bag()}.

-type ewgi_header_val() :: string() | undefined.

-type ewgi_header_key() :: string().

-type ewgi_http_headers() ::
          {ewgi_http_headers,
           ewgi_header_val(),
           ewgi_header_val(),
           ewgi_header_val(),
           ewgi_header_val(),
           ewgi_header_val(),
           ewgi_header_val(),
           bag()}.

-type ewgi_request_method() :: 'OPTIONS'
                             | 'GET'
                             | 'HEAD'
                             | 'POST'
                             | 'PUT'
                             | 'DELETE'
                             | 'TRACE'
                             | 'CONNECT'
                             | string().

-type ewgi_val() :: string() | undefined.

-type ewgi_request() ::
          {ewgi_request,
           ewgi_val(),
           non_neg_integer(),
           ewgi_val(),
           ewgi_spec(),
           ewgi_val(),
           ewgi_http_headers(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_request_method(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val()}.

-type stream() :: fun(() -> {} | {any(), function()}).

-type ewgi_status() :: {integer(), string()}.

-type ewgi_message_body() :: binary() | iolist() | stream().

-type ewgi_header_list() :: [{ewgi_header_key(), ewgi_header_val()}].

-type ewgi_response() ::
          {ewgi_response,
           ewgi_status(),
           ewgi_header_list(),
           ewgi_message_body(),
           any()}.

-type ewgi_context() :: {ewgi_context, ewgi_request(), ewgi_response()}.

-type ewgi_app() :: fun((ewgi_context()) -> ewgi_context()).

-file("test/lib/dialyzer/test/opaque_SUITE_data/src/ewgi2/ewgi_testapp.erl",
      30).

htmlise(C) ->
    iolist_to_binary(["<dl class=\"request\">",
                      io_lib:format("<dt>other http headers</dt><dd>~s<"
                                    "/dd>",
                                    [htmlise_data("http_headers",
                                                  ewgi_api:get_all_headers(C))]),
                      io_lib:format("<dt>ewgi extra data</dt><dd>~s</dd"
                                    ">",
                                    [htmlise_data("request_data",
                                                  ewgi_api:get_all_data(C))]),
                      "</dl>"]).

htmlise_data(Name, L) when is_list(L) ->
    ["<dl class=\"",
     Name,
     "\">",
     [ 
      io_lib:format("<dt>~s</dt><dd><pre>~p</pre><dd>", [K,V]) ||
          {K,V} <- L
     ],
     "</dl>"];
htmlise_data(Name, T) ->
    case gb_trees:to_list(T) of
        [] ->
            [];
        L ->
            htmlise_data(Name, L)
    end.



