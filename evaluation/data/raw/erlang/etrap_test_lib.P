-file("test/lib/cosTransactions/test/etrap_test_lib.erl", 1).

-module(etrap_test_lib).

-file("test/lib/cosTransactions/test/etrap_test_lib.hrl", 1).

-file("test/lib/cosTransactions/test/etrap_test_lib.erl", 25).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosTransactions-1.2.12/src/ETraP_Common.hrl",
      1).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/orber-3.6.24/include/corba.hrl",
      1).

-record(orb_ImplDef,{node,module,typename,start = start,args = [[]],pid}).

-record(any,{typecode,value}).

-record(fixed,{digits,scale,value}).

-record('IOP_ServiceContext',{context_id,context_data}).

-record('InvalidName',{'OE_ID' = "IDL:omg.org/CORBA/ORB/InvalidName:1.0"}).

-record('UNKNOWN',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('BAD_PARAM',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('NO_MEMORY',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('IMP_LIMIT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('COMM_FAILURE',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('INV_OBJREF',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('NO_PERMISSION',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('INTERNAL',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('MARSHAL',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INITIALIZE',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('NO_IMPLEMENT',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('BAD_TYPECODE',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('BAD_OPERATION',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('NO_RESOURCES',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('NO_RESPONSE',{'OE_ID' = "",
                       minor = 1163001856,
                       completion_status}).

-record('PERSIST_STORE',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('BAD_INV_ORDER',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('TRANSIENT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('FREE_MEM',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INV_IDENT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INV_FLAG',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INTF_REPOS',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('BAD_CONTEXT',{'OE_ID' = "",
                       minor = 1163001856,
                       completion_status}).

-record('OBJ_ADAPTER',{'OE_ID' = "",
                       minor = 1163001856,
                       completion_status}).

-record('DATA_CONVERSION',{'OE_ID' = "",
                           minor = 1163001856,
                           completion_status}).

-record('OBJECT_NOT_EXIST',{'OE_ID' = "",
                            minor = 1163001856,
                            completion_status}).

-record('TRANSACTION_REQUIRED',{'OE_ID' = "",
                                minor = 1163001856,
                                completion_status}).

-record('TRANSACTION_ROLLEDBACK',{'OE_ID' = "",
                                  minor = 1163001856,
                                  completion_status}).

-record('INVALID_TRANSACTION',{'OE_ID' = "",
                               minor = 1163001856,
                               completion_status}).

-record('INV_POLICY',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('CODESET_INCOMPATIBLE',{'OE_ID' = "",
                                minor = 1163001856,
                                completion_status}).

-record('REBIND',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('TIMEOUT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('TRANSACTION_UNAVAILABLE',{'OE_ID' = "",
                                   minor = 1163001856,
                                   completion_status}).

-record('TRANSACTION_MODE',{'OE_ID' = "",
                            minor = 1163001856,
                            completion_status}).

-record('BAD_QOS',{'OE_ID' = "",minor = 1163001856,completion_status}).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosTransactions-1.2.12/src/ETraP_Common.hrl",
      31).

-file([], 31).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosTransactions-1.2.12/include/CosTransactions.hrl",
      1).

-record('CosTransactions_otid_t',{formatID,bqual_length,tid}).

-record('CosTransactions_TransIdentity',{coord,term,otid}).

-record('CosTransactions_PropagationContext',{timeout,
                                              current,
                                              parents,
                                              implementation_specific_data}).

-record('CosTransactions_HeuristicRollback',{'OE_ID' =
                                                 "IDL:omg.org/CosTransa"
                                                 "ctions/HeuristicRollb"
                                                 "ack:1.0"}).

-record('CosTransactions_HeuristicCommit',{'OE_ID' =
                                               "IDL:omg.org/CosTransact"
                                               "ions/HeuristicCommit:1."
                                               "0"}).

-record('CosTransactions_HeuristicMixed',{'OE_ID' =
                                              "IDL:omg.org/CosTransacti"
                                              "ons/HeuristicMixed:1.0"}).

-record('CosTransactions_HeuristicHazard',{'OE_ID' =
                                               "IDL:omg.org/CosTransact"
                                               "ions/HeuristicHazard:1."
                                               "0"}).

-record('CosTransactions_WrongTransaction',{'OE_ID' =
                                                "IDL:omg.org/CosTransac"
                                                "tions/WrongTransaction"
                                                ":1.0"}).

-record('CosTransactions_SubtransactionsUnavailable',{'OE_ID' =
                                                          "IDL:omg.org/"
                                                          "CosTransacti"
                                                          "ons/Subtrans"
                                                          "actionsUnava"
                                                          "ilable:1.0"}).

-record('CosTransactions_NotSubtransaction',{'OE_ID' =
                                                 "IDL:omg.org/CosTransa"
                                                 "ctions/NotSubtransact"
                                                 "ion:1.0"}).

-record('CosTransactions_Inactive',{'OE_ID' =
                                        "IDL:omg.org/CosTransactions/In"
                                        "active:1.0"}).

-record('CosTransactions_NotPrepared',{'OE_ID' =
                                           "IDL:omg.org/CosTransactions"
                                           "/NotPrepared:1.0"}).

-record('CosTransactions_NoTransaction',{'OE_ID' =
                                             "IDL:omg.org/CosTransactio"
                                             "ns/NoTransaction:1.0"}).

-record('CosTransactions_InvalidControl',{'OE_ID' =
                                              "IDL:omg.org/CosTransacti"
                                              "ons/InvalidControl:1.0"}).

-record('CosTransactions_Unavailable',{'OE_ID' =
                                           "IDL:omg.org/CosTransactions"
                                           "/Unavailable:1.0"}).

-record('CosTransactions_SynchronizationUnavailable',{'OE_ID' =
                                                          "IDL:omg.org/"
                                                          "CosTransacti"
                                                          "ons/Synchron"
                                                          "izationUnava"
                                                          "ilable:1.0"}).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosTransactions-1.2.12/src/ETraP_Common.hrl",
      32).

-file([], 32).

-record(context,{terminator,
                 etrap,
                 recCoord,
                 alarm = infinity,
                 timeout = infinity,
                 parents = [],
                 trid,
                 typeCheck,
                 sub_tr_allowed,
                 hashMax,
                 local,
                 rollback = false,
                 reportH,
                 maxRetries,
                 comFailWait}).

-file("test/lib/cosTransactions/test/etrap_test_lib.erl", 26).

-export([scratch_debug_fun/0,
         activate_debug_fun/5,
         update_debug_info/1,
         deactivate_debug_fun/3,
         eval_debug_fun/4,
         set_debug_context/4]).

-record(debug_info,{id,function,type,file,line}).

scratch_debug_fun() ->
    catch ets:delete(etrap_debug),
    ets:new(etrap_debug, [set,public,named_table,{keypos,2}]).

activate_debug_fun(FunId, Fun, Type, File, Line) ->
    io:format("Activiating ~p   RETRIES: ~p  WAIT: ~p~n",
              [FunId,
               case
                   catch
                       application:get_env(cosTransactions, maxRetries)
               of
                   {ok,_Max} when is_integer(_Max) ->
                       _Max;
                   _ ->
                       40
               end,
               case
                   catch
                       application:get_env(cosTransactions, comFailWait)
               of
                   {ok,_Time} when is_integer(_Time) ->
                       _Time;
                   _ ->
                       5000
               end]),
    Info =
        #debug_info{id = FunId,
                    function = Fun,
                    type = Type,
                    file = File,
                    line = Line},
    update_debug_info(Info).

update_debug_info(Info) ->
    case catch ets:insert(etrap_debug, Info) of
        {'EXIT',_} ->
            scratch_debug_fun(),
            ets:insert(etrap_debug, Info);
        _ ->
            ok
    end,
    ok.

deactivate_debug_fun(FunId, _File, _Line) ->
    catch ets:delete(etrap_debug, FunId),
    ok.

eval_debug_fun(FunId, Env, File, Line) ->
    case catch ets:lookup(etrap_debug, FunId) of
        [] ->
            ok;
        [Info] ->
            Fun = Info#debug_info.function,
            case Info#debug_info.type of
                transient ->
                    deactivate_debug_fun(FunId, File, Line);
                _ ->
                    ok
            end,
            io:format("Running debug fun ~p:~p (LINE: ~p)~n",
                      [File,FunId,Line]),
            Fun(Env);
        {'EXIT',_R} ->
            ok
    end.

set_debug_context([], [], _, _) ->
    ok;
set_debug_context([], _, _, _) ->
    ets:delete(etrap_debug),
    exit("failed transactions_SUITE. Bad configuration.");
set_debug_context(_, [], _, _) ->
    ets:delete(etrap_debug),
    exit("failed transactions_SUITE Bad configuration.");
set_debug_context([RHead|RTail], [CHead|CTail], File, Line) ->
    write_context(RHead, CHead, File, Line),
    set_debug_context(RTail, CTail, File, Line).

write_context(_Resource, [], _, _) ->
    ok;
write_context(Resource, [{Func,Fun,Type}|PTail], File, Line) ->
    etrap_test_lib:activate_debug_fun({Resource,Func},
                                      Fun,
                                      Type,
                                      File,
                                      Line),
    write_context(Resource, PTail, File, Line);
write_context(_, _, _, _) ->
    ets:delete(etrap_debug),
    exit("failed transactions_SUITE. Bad configuration.").



