-file("test/lib/ssl/src/dtls_v1.erl", 1).

-module(dtls_v1).

-file("test/lib/ssl/src/ssl_cipher.hrl", 1).

-type cipher() :: null
                | rc4_128
                | idea_cbc
                | des40_cbc
                | des_cbc
                | '3des_ede_cbc'
                | aes_128_cbc
                | aes_256_cbc.

-type hash() :: null | sha | md5 | sha224 | sha256 | sha384 | sha512.

-type key_algo() :: null
                  | rsa
                  | dhe_rsa
                  | dhe_dss
                  | ecdhe_ecdsa
                  | ecdh_ecdsa
                  | ecdh_rsa
                  | srp_rsa
                  | srp_dss
                  | psk
                  | dhe_psk
                  | rsa_psk
                  | dh_anon
                  | ecdh_anon
                  | srp_anon.

-type erl_cipher_suite() :: {key_algo(), cipher(), hash()}.

-type int_cipher_suite() ::
          {key_algo(), cipher(), hash(), hash() | default_prf}.

-type cipher_suite() :: binary().

-type cipher_enum() :: integer().

-type openssl_cipher_suite() :: string().

-record(change_cipher_spec,{type = 1}).

-record(cipher_state,{iv,key,state}).

-file("test/lib/ssl/src/dtls_v1.erl", 22).

-export([suites/1,mac_hash/7,ecc_curves/1,corresponding_tls_version/1]).

-spec suites(Minor :: 253 | 255) -> [cipher_suite()].

suites(Minor) ->
    tls_v1:suites(corresponding_minor_tls_version(Minor)).

mac_hash(Version, MacAlg, MacSecret, SeqNo, Type, Length, Fragment) ->
    tls_v1:mac_hash(MacAlg,
                    MacSecret,
                    SeqNo,
                    Type,
                    Version,
                    Length,
                    Fragment).

ecc_curves({_Major,Minor}) ->
    tls_v1:ecc_curves(corresponding_minor_tls_version(Minor)).

corresponding_tls_version({254,Minor}) ->
    {3,corresponding_minor_tls_version(Minor)}.

corresponding_minor_tls_version(255) ->
    2;
corresponding_minor_tls_version(253) ->
    3.



