-file("test/lib/runtime_tools/test/erts_alloc_config_SUITE.erl", 1).

-module(erts_alloc_config_SUITE).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/lib/runtime_tools/test/erts_alloc_config_SUITE.erl", 25).

-export([all/0,
         suite/0,
         groups/0,
         init_per_suite/1,
         end_per_suite/1,
         init_per_group/2,
         end_per_group/2,
         init_per_testcase/2,
         end_per_testcase/2]).

-export([basic/1]).

-export([make_basic_config/1]).

suite() ->
    [{ct_hooks,[ts_install_cth]}].

all() ->
    [basic].

groups() ->
    [].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, Config) ->
    Config.

init_per_testcase(Case, Config) when is_list(Config) ->
    [{testcase,Case},
     {watchdog,test_server:timetrap(test_server:minutes(2))},
     {erl_flags_env,save_env()}|
     Config].

end_per_testcase(_Case, Config) when is_list(Config) ->
    test_server:timetrap_cancel(test_server:lookup_config(watchdog,
                                                          Config)),
    restore_env(test_server:lookup_config(erl_flags_env, Config)),
    ok.

basic(doc) ->
    [];
basic(suite) ->
    [];
basic(Config) when is_list(Config) ->
    ErtsAllocConfig = privfile("generated", Config),
    SbctMod = " +MBsbct 1024 +MHsbct 4096",
    ZFlgs =
        case os:getenv("ERL_ZFLAGS") of
            FlgString when is_list(FlgString) ->
                FlgString;
            _ ->
                ""
        end
        ++
        " +Mea max +Mea config",
    os:putenv("ERL_ZFLAGS", ZFlgs ++ SbctMod),
    {ok,Node1} = start_node(Config),
    ok =
        rpc:call(Node1,
                 erts_alloc_config_SUITE,
                 make_basic_config,
                 [ErtsAllocConfig]),
    stop_node(Node1),
    display_file(ErtsAllocConfig),
    ManualConfig = privfile("manual", Config),
    {ok,IOD} = file:open(ManualConfig, [write]),
    io:format(IOD, "~s", ["+MBsbct 2048"]),
    file:close(IOD),
    display_file(ManualConfig),
    os:putenv("ERL_ZFLAGS", ZFlgs),
    {ok,Node2} =
        start_node(Config,
                   "-args_file "
                   ++
                   ErtsAllocConfig ++ " -args_file " ++ ManualConfig),
    {_,_,_,Cfg} = rpc:call(Node2, erlang, system_info, [allocator]),
    stop_node(Node2),
    {value,{binary_alloc,BCfg}} = lists:keysearch(binary_alloc, 1, Cfg),
    {value,{sbct,2097152}} = lists:keysearch(sbct, 1, BCfg),
    {value,{eheap_alloc,HCfg}} = lists:keysearch(eheap_alloc, 1, Cfg),
    {value,{sbct,4194304}} = lists:keysearch(sbct, 1, HCfg),
    ok.

make_basic_config(ErtsAllocConfig) ->
    Tester = self(),
    SSBegun = make_ref(),
    SSDone = make_ref(),
    SSFun =
        fun(F) ->
               receive
                   SSDone ->
                       ok = erts_alloc_config:save_scenario(),
                       Tester ! SSDone
               after
                   500 ->
                       ok = erts_alloc_config:save_scenario(),
                       F(F)
               end
        end,
    SS =
        spawn_link(fun() ->
                          ok = erts_alloc_config:save_scenario(),
                          Tester ! SSBegun,
                          SSFun(SSFun)
                   end),
    receive
        SSBegun ->
            ok
    end,
    Ref = make_ref(),
    Tab = ets:new(erts_alloc_config_SUITE, [bag,public]),
    Ps =
        lists:map(fun(_) ->
                         spawn_link(fun() ->
                                           ets:insert(Tab,
                                                      {self(),
                                                       lists:seq(1,
                                                                 1000)}),
                                           receive after 1000 -> ok end,
                                           Tester ! {Ref,self()}
                                    end)
                  end,
                  lists:seq(1, 10000)),
    lists:foreach(fun(P) ->
                         receive
                             {Ref,P} ->
                                 ok
                         end
                  end,
                  Ps),
    ets:delete(Tab),
    SS ! SSDone,
    receive
        SSDone ->
            ok
    end,
    ok = erts_alloc_config:make_config(ErtsAllocConfig).

display_file(FileName) ->
    test_server:format("filename: ~s~n", [FileName]),
    {ok,Bin} = file:read_file(FileName),
    io:format("~s", [binary_to_list(Bin)]),
    test_server:format("eof: ~s~n", [FileName]),
    ok.

mk_name(Config) when is_list(Config) ->
    {A,B,C} = now(),
    list_to_atom(atom_to_list(erts_alloc_config_SUITE)
                 ++
                 "-"
                 ++
                 atom_to_list(test_server:lookup_config(testcase,
                                                        Config))
                 ++
                 "-"
                 ++
                 integer_to_list(A)
                 ++
                 "-" ++ integer_to_list(B) ++ "-" ++ integer_to_list(C)).

start_node(Config) ->
    start_node(Config, "").

start_node(Config, Args) ->
    Pa = filename:dirname(code:which(erts_alloc_config_SUITE)),
    test_server:start_node(mk_name(Config),
                           slave,
                           [{args,"-pa " ++ Pa ++ " " ++ Args}]).

stop_node(Node) ->
    true = test_server:stop_node(Node).

privfile(Name, Config) ->
    filename:join([test_server:lookup_config(priv_dir, Config),
                   atom_to_list(test_server:lookup_config(testcase,
                                                          Config))
                   ++
                   "." ++ Name]).

save_env() ->
    {erl_flags,
     os:getenv("ERL_AFLAGS"),
     os:getenv("ERL_FLAGS"),
     os:getenv("ERL_" ++ erlang:system_info(otp_release) ++ "_FLAGS"),
     os:getenv("ERL_ZFLAGS")}.

restore_env(EVar, false) when is_list(EVar) ->
    restore_env(EVar, "");
restore_env(EVar, "") when is_list(EVar) ->
    case os:getenv(EVar) of
        false ->
            ok;
        "" ->
            ok;
        " " ->
            ok;
        _ ->
            os:putenv(EVar, " ")
    end;
restore_env(EVar, Value) when is_list(EVar), is_list(Value) ->
    case os:getenv(EVar) of
        Value ->
            ok;
        _ ->
            os:putenv(EVar, Value)
    end.

restore_env({erl_flags,AFlgs,Flgs,RFlgs,ZFlgs}) ->
    restore_env("ERL_AFLAGS", AFlgs),
    restore_env("ERL_FLAGS", Flgs),
    restore_env("ERL_" ++ erlang:system_info(otp_release) ++ "_FLAGS",
                RFlgs),
    restore_env("ERL_ZFLAGS", ZFlgs),
    ok.



