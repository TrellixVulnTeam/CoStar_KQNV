-file("test/lib/gs/src/gstk_scale.erl", 1).

-module(gstk_scale).

-export([create/3,
         config/3,
         read/3,
         delete/2,
         event/5,
         option/5,
         read_option/5]).

-file("test/lib/gs/src/gstk.hrl", 1).

-record(gstkid,{id = undefined,widget,widget_data,owner,parent,objtype}).

-record(so,{main,object,hscroll,vscroll,misc}).

-file("test/lib/gs/src/gstk_scale.erl", 78).

create(DB, GstkId, Opts) ->
    TkW = gstk_generic:mk_tkw_child(DB, GstkId),
    PlacePreCmd = [";place ",TkW],
    Ngstkid = GstkId#gstkid{widget = TkW},
    case
        gstk_generic:make_command(Opts,
                                  Ngstkid,
                                  TkW,
                                  "",
                                  PlacePreCmd,
                                  DB)
    of
        {error,Reason} ->
            {error,Reason};
        Cmd when is_list(Cmd) ->
            gstk:exec(["scale ",
                       TkW,
                       Cmd,
                       $;,
                       TkW,
                       " conf -bo 2 -sliderrelief raised -highlightth 2"]),
            Ngstkid
    end.

config(DB, Gstkid, Opts) ->
    TkW = Gstkid#gstkid.widget,
    SimplePreCmd = [TkW," conf"],
    PlacePreCmd = [";place ",TkW],
    gstk_generic:mk_cmd_and_exec(Opts,
                                 Gstkid,
                                 TkW,
                                 SimplePreCmd,
                                 PlacePreCmd,
                                 DB).

read(DB, Gstkid, Opt) ->
    gstk_generic:read_option(DB, Gstkid, Opt).

delete(DB, Gstkid) ->
    gstk_db:delete_widget(DB, Gstkid),
    Gstkid#gstkid.widget.

event(DB, Gstkid, Etype, Edata, Args) ->
    gstk_generic:event(DB, Gstkid, Etype, Edata, Args).

option(Option, Gstkid, TkW, DB, _) ->
    case Option of
        {activebg,Color} ->
            {s,[" -activeb ",gstk:to_color(Color)]};
        {orient,How} ->
            {s,[" -or ",gstk:to_ascii(How)]};
        {range,{From,To}} ->
            {s,[" -fr ",gstk:to_ascii(From)," -to ",gstk:to_ascii(To)]};
        {relief,Relief} ->
            {s,[" -rel ",gstk:to_ascii(Relief)]};
        {bw,Wth} ->
            {s,[" -bd ",gstk:to_ascii(Wth)]};
        {text,String} ->
            {s,[" -la ",gstk:to_ascii(String)]};
        {showvalue,Bool} ->
            {s,[" -showvalue ",gstk:to_ascii(Bool)]};
        {pos,Pos} ->
            {c,[TkW," set ",gstk:to_ascii(Pos)]};
        {click,On} ->
            cbind(DB, Gstkid, click, On);
        _ ->
            invalid_option
    end.

read_option(Option, Gstkid, TkW, DB, _) ->
    case Option of
        activebg ->
            tcl2erl:ret_color([TkW," cg -activeb"]);
        orient ->
            tcl2erl:ret_atom([TkW," cg -ori"]);
        range ->
            tcl2erl:ret_tuple(["list [",TkW," cg -fr] [",TkW," cg -to]"]);
        bw ->
            tcl2erl:ret_int([TkW," cg -bd"]);
        relief ->
            tcl2erl:ret_atom([TkW," cg -reli"]);
        text ->
            tcl2erl:ret_str([TkW," cg -lab"]);
        showvalue ->
            tcl2erl:ret_bool([TkW," cg -showvalue"]);
        pos ->
            tcl2erl:ret_int([TkW," get"]);
        click ->
            gstk_db:is_inserted(DB, Gstkid, click);
        _ ->
            {bad_result,{Gstkid#gstkid.objtype,invalid_option,Option}}
    end.

cbind(DB, Gstkid, Etype, On) ->
    Cmd =
        case On of
            {true,Edata} ->
                Eref = gstk_db:insert_event(DB, Gstkid, Etype, Edata),
                [" -command {erlsend ",Eref,"}"];
            true ->
                Eref = gstk_db:insert_event(DB, Gstkid, Etype, ""),
                [" -command {erlsend ",Eref,"}"];
            _Other ->
                gstk_db:delete_event(DB, Gstkid, Etype),
                " -command {}"
        end,
    {s,Cmd}.



