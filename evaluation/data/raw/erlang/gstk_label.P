-file("test/lib/gs/src/gstk_label.erl", 1).

-module(gstk_label).

-export([create/3,
         config/3,
         read/3,
         delete/2,
         event/5,
         option/5,
         read_option/5]).

-file("test/lib/gs/src/gstk.hrl", 1).

-record(gstkid,{id = undefined,widget,widget_data,owner,parent,objtype}).

-record(so,{main,object,hscroll,vscroll,misc}).

-file("test/lib/gs/src/gstk_label.erl", 81).

create(DB, GstkId, Opts) ->
    TkW = gstk_generic:mk_tkw_child(DB, GstkId),
    PlacePreCmd = [";place ",TkW],
    Ngstkid = GstkId#gstkid{widget = TkW},
    case
        gstk_generic:make_command(Opts,
                                  Ngstkid,
                                  TkW,
                                  "",
                                  PlacePreCmd,
                                  DB)
    of
        {error,Reason} ->
            {error,Reason};
        Cmd when is_list(Cmd) ->
            gstk:exec(["label ",TkW,Cmd]),
            Ngstkid
    end.

config(DB, Gstkid, Opts) ->
    TkW = Gstkid#gstkid.widget,
    SimplePreCmd = [TkW," conf"],
    PlacePreCmd = [";place ",TkW],
    gstk_generic:mk_cmd_and_exec(Opts,
                                 Gstkid,
                                 TkW,
                                 SimplePreCmd,
                                 PlacePreCmd,
                                 DB).

read(DB, Gstkid, Opt) ->
    gstk_generic:read_option(DB, Gstkid, Opt).

delete(DB, Gstkid) ->
    gstk_db:delete_widget(DB, Gstkid),
    Gstkid#gstkid.widget.

event(DB, Gstkid, Etype, Edata, Args) ->
    gstk_generic:event(DB, Gstkid, Etype, Edata, Args).

option(Option, _Gstkid, _TkW, _DB, _) ->
    case Option of
        {underline,Int} ->
            {s,[" -und ",gstk:to_ascii(Int)]};
        {wraplength,Int} ->
            {s,[" -wra ",gstk:to_ascii(Int)]};
        _ ->
            invalid_option
    end.

read_option(Option, Gstkid, TkW, _DB, _) ->
    case Option of
        underline ->
            tcl2erl:ret_int([TkW," cg -und"]);
        wraplength ->
            tcl2erl:ret_int([TkW," cg -wra"]);
        _ ->
            {bad_result,{Gstkid#gstkid.objtype,invalid_option,Option}}
    end.



