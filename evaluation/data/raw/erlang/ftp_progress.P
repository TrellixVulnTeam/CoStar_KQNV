-file("test/lib/inets/src/ftp/ftp_progress.erl", 1).

-module(ftp_progress).

-export([start_link/1,report/2,stop/1]).

-export([init/1]).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/kernel-2.15.3/include/file.hrl",
      1).

-record(file_info,{size :: undefined | non_neg_integer(),
                   type :: undefined
                         | device
                         | directory
                         | other
                         | regular
                         | symlink,
                   access :: undefined
                           | read
                           | write
                           | read_write
                           | none,
                   atime :: undefined | file:date_time() | integer(),
                   mtime :: undefined | file:date_time() | integer(),
                   ctime :: undefined | file:date_time() | integer(),
                   mode :: undefined | integer(),
                   links :: undefined | non_neg_integer(),
                   major_device :: undefined | integer(),
                   minor_device :: undefined | integer(),
                   inode :: undefined | integer(),
                   uid :: undefined | integer(),
                   gid :: undefined | integer()}).

-record(file_descriptor,{module :: undefined | module(),
                         data :: undefined | term()}).

-file("test/lib/inets/src/ftp/ftp_progress.erl", 36).

-record(progress,{file,
                  cb_module,
                  cb_function,
                  init_progress_term,
                  current_progress_term}).

start_link(ignore) ->
    ignore;
start_link(Options) ->
    spawn_link(ftp_progress, init, [Options]).

report(Pid, Report) ->
    Pid ! {progress_report,Report}.

stop(Pid) ->
    Pid ! stop.

init(Options) ->
    loop(progress(Options)).

loop(Progress) ->
    receive
        {progress_report,Report} ->
            NewProgress = report_progress(Report, Progress),
            loop(NewProgress);
        stop ->
            ok
    end.

progress({CBModule,CBFunction,InitProgressTerm})
    when is_atom(CBModule), is_atom(CBFunction) ->
    #progress{cb_module = CBModule,
              cb_function = CBFunction,
              init_progress_term = InitProgressTerm,
              current_progress_term = InitProgressTerm}.

report_progress({local_file,File}, Progress) ->
    {ok,FileInfo} = file:read_file_info(File),
    report_progress({file_size,FileInfo#file_info.size},
                    Progress#progress{file = File});
report_progress({remote_file,File}, Progress) ->
    report_progress({file_size,unknown}, Progress#progress{file = File});
report_progress(Size,
                #progress{file = File,
                          cb_module = CBModule,
                          cb_function = CBFunction,
                          current_progress_term = Term,
                          init_progress_term = InitTerm} =
                    Progress) ->
    NewProgressTerm = CBModule:CBFunction(Term, File, Size),
    case Size of
        {transfer_size,0} ->
            Progress#progress{current_progress_term = InitTerm,
                              file = undefined};
        _ ->
            Progress#progress{current_progress_term = NewProgressTerm}
    end.



