-file("test/erts/preloaded/src/erts_internal.erl", 1).

-module(erts_internal).

-export([await_port_send_result/3]).

-export([port_command/3,
         port_connect/2,
         port_close/1,
         port_control/3,
         port_call/3,
         port_info/1,
         port_info/2]).

await_port_send_result(Ref, Busy, Ok) ->
    receive
        {Ref,false} ->
            Busy;
        {Ref,_} ->
            Ok
    end.

-spec erts_internal:port_command(Port, Data, OptionList) -> Result
                                    when
                                        is_subtype(Port,
                                                   port() | atom()),
                                        is_subtype(Data, iodata()),
                                        is_subtype(OptionList, [Option]),
                                        is_subtype(Option,
                                                   force | nosuspend),
                                        is_subtype(Result,
                                                   boolean() |
                                                   reference() |
                                                   badarg |
                                                   notsup).

port_command(_Port, _Data, _OptionList) ->
    erlang:nif_error(undefined).

-spec erts_internal:port_connect(Port, Pid) -> Result
                                    when
                                        is_subtype(Port,
                                                   port() | atom()),
                                        is_subtype(Pid, pid()),
                                        is_subtype(Result,
                                                   true |
                                                   reference() |
                                                   badarg).

port_connect(_Port, _Pid) ->
    erlang:nif_error(undefined).

-spec erts_internal:port_close(Port) -> Result
                                  when
                                      is_subtype(Port, port() | atom()),
                                      is_subtype(Result,
                                                 true |
                                                 reference() |
                                                 badarg).

port_close(_Port) ->
    erlang:nif_error(undefined).

-spec erts_internal:port_control(Port, Operation, Data) -> Result
                                    when
                                        is_subtype(Port,
                                                   port() | atom()),
                                        is_subtype(Operation, integer()),
                                        is_subtype(Data, iodata()),
                                        is_subtype(Result,
                                                   string() |
                                                   binary() |
                                                   reference() |
                                                   badarg).

port_control(_Port, _Operation, _Data) ->
    erlang:nif_error(undefined).

-spec erts_internal:port_call(Port, Operation, Data) -> Result
                                 when
                                     is_subtype(Port, port() | atom()),
                                     is_subtype(Operation, integer()),
                                     is_subtype(Data, term()),
                                     is_subtype(Result,
                                                {ok, term()} |
                                                reference() |
                                                badarg).

port_call(_Port, _Operation, _Data) ->
    erlang:nif_error(undefined).

-type port_info_1_result_item() :: {registered_name, RegName :: atom()}
                                 | {id, Index :: non_neg_integer()}
                                 | {connected, Pid :: pid()}
                                 | {links, Pids :: [pid()]}
                                 | {name, String :: string()}
                                 | {input, Bytes :: non_neg_integer()}
                                 | {output, Bytes :: non_neg_integer()}
                                 | {os_pid,
                                    OsPid :: non_neg_integer()
                                           | undefined}.

-spec erts_internal:port_info(Port) -> Result
                                 when
                                     is_subtype(Port, port() | atom()),
                                     is_subtype(Result,
                                                [port_info_1_result_item()] |
                                                undefined |
                                                reference() |
                                                badarg |
                                                []).

port_info(_Result) ->
    erlang:nif_error(undefined).

-type port_info_2_item() :: registered_name
                          | id
                          | connected
                          | links
                          | name
                          | input
                          | output
                          | os_pid
                          | monitors
                          | memory
                          | parallelism
                          | queue_size
                          | locking.

-type port_info_2_result_item() :: {registered_name, RegName :: atom()}
                                 | []
                                 | {id, Index :: non_neg_integer()}
                                 | {connected, Pid :: pid()}
                                 | {links, Pids :: [pid()]}
                                 | {name, String :: string()}
                                 | {input, Bytes :: non_neg_integer()}
                                 | {output, Bytes :: non_neg_integer()}
                                 | {os_pid,
                                    OsPid :: non_neg_integer()
                                           | undefined}
                                 | {monitors,
                                    Monitors :: [{process, pid()}]}
                                 | {memory, MemSz :: non_neg_integer()}
                                 | {parallelism, Boolean :: boolean()}
                                 | {queue_size,
                                    QSz :: non_neg_integer()}
                                 | {locking,
                                    Locking :: false
                                             | port_level
                                             | driver_level}.

-spec erts_internal:port_info(Port, Item) -> Result
                                 when
                                     is_subtype(Port, port() | atom()),
                                     is_subtype(Item,
                                                port_info_2_item()),
                                     is_subtype(Result,
                                                port_info_2_result_item() |
                                                undefined |
                                                reference() |
                                                badarg).

port_info(_Result, _Item) ->
    erlang:nif_error(undefined).



