-file("test/lib/gs/src/gstk_menubutton.erl", 1).

-module(gstk_menubutton).

-export([create/3,
         config/3,
         read/3,
         delete/2,
         event/5,
         option/5,
         read_option/5,
         mk_create_opts_for_child/4]).

-file("test/lib/gs/src/gstk.hrl", 1).

-record(gstkid,{id = undefined,widget,widget_data,owner,parent,objtype}).

-record(so,{main,object,hscroll,vscroll,misc}).

-file("test/lib/gs/src/gstk_menubutton.erl", 91).

create(DB, GstkId, Opts) ->
    TkW = gstk_generic:mk_tkw_child(DB, GstkId),
    NGstkId = GstkId#gstkid{widget = TkW},
    PlacePreCmd = [";place ",TkW],
    case
        gstk_generic:make_command(Opts,
                                  NGstkId,
                                  TkW,
                                  "",
                                  PlacePreCmd,
                                  DB)
    of
        {error,Reason} ->
            {error,Reason};
        Cmd when is_list(Cmd) ->
            gstk:exec(["menubutton ",TkW," -padx 4 -pady 3",Cmd]),
            NGstkId
    end.

mk_create_opts_for_child(DB, Cgstkid, Pgstkid, Opts) ->
    gstk_generic:mk_create_opts_for_child(DB, Cgstkid, Pgstkid, Opts).

config(DB, Gstkid, Opts) ->
    TkW = Gstkid#gstkid.widget,
    SimplePreCmd = [TkW," conf"],
    PlacePreCmd = [";place ",TkW],
    gstk_generic:mk_cmd_and_exec(Opts,
                                 Gstkid,
                                 TkW,
                                 SimplePreCmd,
                                 PlacePreCmd,
                                 DB).

read(DB, Gstkid, Opt) ->
    gstk_generic:read_option(DB, Gstkid, Opt).

delete(DB, Gstkid) ->
    gstk_db:delete_widget(DB, Gstkid),
    Gstkid#gstkid.widget.

event(DB, Gstkid, Etype, Edata, Args) ->
    gstk_generic:event(DB, Gstkid, Etype, Edata, Args).

option(Option, Gstkid, TkW, DB, _) ->
    case Option of
        {anchor,How} ->
            fix_anchor(How, Gstkid, TkW, DB);
        {disabledfg,Color} ->
            {s,[" -disabledf ",gstk:to_color(Color)]};
        {height,Height} ->
            {s,[" -he ",gstk:to_ascii(Height)]};
        {side,Side} ->
            fix_side(Side, Gstkid, TkW, DB);
        {underline,Int} ->
            {s,[" -und ",gstk:to_ascii(Int)]};
        {width,Width} ->
            {s,[" -wi ",gstk:to_ascii(Width)]};
        {wraplength,Int} ->
            {s,[" -wr ",gstk:to_ascii(Int)]};
        {x,X} ->
            fix_placement(x, X, Gstkid, TkW, DB);
        {y,Y} ->
            fix_placement(y, Y, Gstkid, TkW, DB);
        _ ->
            invalid_option
    end.

read_option(Option, GstkId, TkW, _DB, _) ->
    case Option of
        anchor ->
            tcl2erl:ret_place(anchor, TkW);
        disabledfg ->
            tcl2erl:ret_color([TkW," cg -disabledfo"]);
        height ->
            tcl2erl:ret_int([TkW," cg -he"]);
        side ->
            tcl2erl:ret_pack(side, TkW);
        underline ->
            tcl2erl:ret_int([TkW," cg -underl"]);
        width ->
            tcl2erl:ret_int([TkW," cg -wi"]);
        wraplength ->
            tcl2erl:ret_int([TkW," cg -wr"]);
        x ->
            tcl2erl:ret_place(x, TkW);
        y ->
            tcl2erl:ret_place(y, TkW);
        _ ->
            {error,{invalid_option,Option,GstkId#gstkid.objtype}}
    end.

fix_placement(Attr, Value, Gstkid, _TkW, DB) ->
    Pgstkid = gstk_db:lookup_gstkid(DB, Gstkid#gstkid.parent),
    case Pgstkid#gstkid.objtype of
        menubar ->
            invalid_option;
        _ ->
            {p,[" -",atom_to_list(Attr)," ",gstk:to_ascii(Value)]}
    end.

fix_anchor(How, Gstkid, TkW, DB) ->
    Pgstkid = gstk_db:lookup_gstkid(DB, Gstkid#gstkid.parent),
    case Pgstkid#gstkid.objtype of
        menubar ->
            {c,["pack ",TkW," -an ",gstk:to_ascii(How)]};
        _ ->
            {p,[" -anch ",gstk:to_ascii(How)]}
    end.

fix_side(Side, Gstkid, TkW, DB) ->
    Pgstkid = gstk_db:lookup_gstkid(DB, Gstkid#gstkid.parent),
    case Pgstkid#gstkid.objtype of
        menubar ->
            {c,["pack ",TkW," -fill y -si ",gstk:to_ascii(Side)]};
        _ ->
            none
    end.



