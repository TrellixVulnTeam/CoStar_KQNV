-file("test/lib/syntax_tools/src/erl_comment_scan.erl", 1).

-module(erl_comment_scan).

-export([file/1,join_lines/1,scan_lines/1,string/1]).

-export_type([{comment,0}]).

-type comment() :: {integer(), integer(), integer(), [string()]}.

-type commentLine() :: {integer(), integer(), integer(), string()}.

-spec file(file:filename()) -> [comment()].

file(Name) ->
    Name1 = filename(Name),
    case catch {ok,file:read_file(Name1)} of
        {ok,V} ->
            case V of
                {ok,B} ->
                    Enc =
                        case epp:read_encoding(Name) of
                            none ->
                                epp:default_encoding();
                            Enc0 ->
                                Enc0
                        end,
                    case catch unicode:characters_to_list(B, Enc) of
                        String when is_list(String) ->
                            string(String);
                        R ->
                            error_read_file(Name1),
                            exit(R)
                    end;
                {error,E} ->
                    error_read_file(Name1),
                    exit({read,E})
            end;
        {'EXIT',E} ->
            error_read_file(Name1),
            exit(E);
        R ->
            error_read_file(Name1),
            throw(R)
    end.

-spec string(string()) -> [comment()].

string(Text) ->
    lists:reverse(join_lines(scan_lines(Text))).

-spec scan_lines(string()) -> [commentLine()].

scan_lines(Text) ->
    scan_lines(Text, 1, 0, 0, []).

scan_lines([$\s|Cs], L, Col, M, Ack) ->
    scan_lines(Cs, L, Col + 1, M, Ack);
scan_lines([$\t|Cs], L, Col, M, Ack) ->
    scan_lines(Cs, L, tab(Col), M, Ack);
scan_lines([$\n|Cs], L, _Col, _M, Ack) ->
    scan_lines(Cs, L + 1, 0, 0, Ack);
scan_lines([$\r,$\n|Cs], L, _Col, _M, Ack) ->
    scan_lines(Cs, L + 1, 0, 0, Ack);
scan_lines([$\r|Cs], L, _Col, _M, Ack) ->
    scan_lines(Cs, L + 1, 0, 0, Ack);
scan_lines([$%|Cs], L, Col, M, Ack) ->
    scan_comment(Cs, "", L, Col, M, Ack);
scan_lines([$$|Cs], L, Col, _M, Ack) ->
    scan_char(Cs, L, Col + 1, Ack);
scan_lines([$"|Cs], L, Col, _M, Ack) ->
    scan_string(Cs, $", L, Col + 1, Ack);
scan_lines([$'|Cs], L, Col, _M, Ack) ->
    scan_string(Cs, $', L, Col + 1, Ack);
scan_lines([_C|Cs], L, Col, _M, Ack) ->
    N = Col + 1,
    scan_lines(Cs, L, N, N, Ack);
scan_lines([], _L, _Col, _M, Ack) ->
    Ack.

tab(Col) ->
    Col - Col rem 8 + 8.

scan_comment([$\n|Cs], Cs1, L, Col, M, Ack) ->
    seen_comment(Cs, Cs1, L, Col, M, Ack);
scan_comment([$\r,$\n|Cs], Cs1, L, Col, M, Ack) ->
    seen_comment(Cs, Cs1, L, Col, M, Ack);
scan_comment([$\r|Cs], Cs1, L, Col, M, Ack) ->
    seen_comment(Cs, Cs1, L, Col, M, Ack);
scan_comment([C|Cs], Cs1, L, Col, M, Ack) ->
    scan_comment(Cs, [C|Cs1], L, Col, M, Ack);
scan_comment([], Cs1, L, Col, M, Ack) ->
    seen_comment([], Cs1, L, Col, M, Ack).

seen_comment(Cs, Cs1, L, Col, M, Ack) ->
    N = Col - M,
    Text = lists:reverse(string:strip(Cs1, left)),
    Ack1 = [{L,Col + 1,N,Text}|Ack],
    scan_lines(Cs, L + 1, 0, 0, Ack1).

scan_string([Quote|Cs], Quote, L, Col, Ack) ->
    N = Col + 1,
    scan_lines(Cs, L, N, N, Ack);
scan_string([$\t|Cs], Quote, L, Col, Ack) ->
    scan_string(Cs, Quote, L, tab(Col), Ack);
scan_string([$\n|Cs], Quote, L, _Col, Ack) ->
    scan_string(Cs, Quote, L + 1, 0, Ack);
scan_string([$\r,$\n|Cs], Quote, L, _Col, Ack) ->
    scan_string(Cs, Quote, L + 1, 0, Ack);
scan_string([$\r|Cs], Quote, L, _Col, Ack) ->
    scan_string(Cs, Quote, L + 1, 0, Ack);
scan_string([$\\,_C|Cs], Quote, L, Col, Ack) ->
    scan_string(Cs, Quote, L, Col + 2, Ack);
scan_string([_C|Cs], Quote, L, Col, Ack) ->
    scan_string(Cs, Quote, L, Col + 1, Ack);
scan_string([], _Quote, _L, _Col, Ack) ->
    Ack.

scan_char([$\t|Cs], L, Col, Ack) ->
    N = tab(Col),
    scan_lines(Cs, L, N, N, Ack);
scan_char([$\n|Cs], L, _Col, Ack) ->
    scan_lines(Cs, L + 1, 0, 0, Ack);
scan_char([$\r,$\n|Cs], L, _Col, Ack) ->
    scan_lines(Cs, L + 1, 0, 0, Ack);
scan_char([$\r|Cs], L, _Col, Ack) ->
    scan_lines(Cs, L + 1, 0, 0, Ack);
scan_char([$\\,_C|Cs], L, Col, Ack) ->
    N = Col + 2,
    scan_lines(Cs, L, N, N, Ack);
scan_char([_C|Cs], L, Col, Ack) ->
    N = Col + 1,
    scan_lines(Cs, L, N, N, Ack);
scan_char([], _L, _Col, Ack) ->
    Ack.

-spec join_lines([commentLine()]) -> [comment()].

join_lines([{L,Col,Ind,Txt}|Lines]) ->
    join_lines(Lines, [Txt], L, Col, Ind);
join_lines([]) ->
    [].

join_lines([{L1,Col1,Ind1,Txt1}|Lines], Txt, L, Col, Ind) ->
    if
        L1 =:= L - 1, Col1 =:= Col, Ind + 1 =:= Col ->
            join_lines(Lines, [Txt1|Txt], L1, Col1, Ind1);
        true ->
            [{L,Col,Ind,Txt}|join_lines(Lines, [Txt1], L1, Col1, Ind1)]
    end;
join_lines([], Txt, L, Col, Ind) ->
    [{L,Col,Ind,Txt}].

filename([C|T]) when is_integer(C), C > 0 ->
    [C|filename(T)];
filename([]) ->
    [];
filename(N) ->
    report_error("bad filename: `~P'.", [N,25]),
    exit(error).

error_read_file(Name) ->
    report_error("error reading file `~ts'.", [Name]).

report_error(S, Vs) ->
    error_logger:error_msg(lists:concat([erl_comment_scan,": ",S,"\n"]),
                           Vs).



