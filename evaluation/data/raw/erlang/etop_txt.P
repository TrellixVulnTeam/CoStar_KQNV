-file("test/lib/observer/src/etop_txt.erl", 1).

-module(etop_txt).

-author('siri@erix.ericsson.se').

-export([init/1,stop/1]).

-export([do_update/3]).

-file("/Users/parrt/Downloads/fenollp-erlang-grammar-c1db83d09307/test/lib/observer/src/../include/etop.hrl",
      1).

-file("/Users/parrt/Downloads/fenollp-erlang-grammar-c1db83d09307/test/lib/observer/src/../include/../../runtime_tools/include/observer_backend.hrl",
      1).

-record(etop_info,{now = {0,0,0},
                   n_procs = 0,
                   wall_clock,
                   runtime,
                   run_queue = 0,
                   alloc_areas = [],
                   memi =
                       [{total,0},
                        {processes,0},
                        {ets,0},
                        {atom,0},
                        {code,0},
                        {binary,0}],
                   procinfo = []}).

-record(etop_proc_info,{pid,mem = 0,reds = 0,name,runtime = 0,cf,mq = 0}).

-file("/Users/parrt/Downloads/fenollp-erlang-grammar-c1db83d09307/test/lib/observer/src/../include/etop.hrl",
      21).

-file([], 21).

-file("test/lib/observer/src/etop_txt.erl", 27).

-file("test/lib/observer/src/etop_defs.hrl", 1).

-record(opts,{node = node(),
              port = 8415,
              accum = false,
              intv = 5000,
              lines = 10,
              width = 700,
              height = 340,
              sort = runtime,
              tracing = on,
              out_mod = etop_gui,
              out_proc,
              server,
              host,
              tracer,
              store,
              accum_tab,
              remote}).

-file("test/lib/observer/src/etop_txt.erl", 28).

-import(etop, [loadinfo/1,meminfo/2]).

-import(etop_gui, [formatmfa/1,to_list/1]).

stop(Pid) ->
    Pid ! stop.

init(Config) ->
    loop(Config).

loop(Config) ->
    Info = do_update(Config),
    receive
        stop ->
            stopped;
        {dump,Fd} ->
            do_update(Fd, Info, Config),
            loop(Config);
        {config,_,Config1} ->
            loop(Config1)
    after
        Config#opts.intv -> loop(Config)
    end.

do_update(Config) ->
    Info = etop:update(Config),
    do_update(standard_io, Info, Config).

do_update(Fd, Info, Config) ->
    {Cpu,NProcs,RQ,Clock} = loadinfo(Info),
    io:nl(Fd),
    writedoubleline(Fd),
    case Info#etop_info.memi of
        undefined ->
            io:fwrite(Fd,
                      " ~-72w~10s~n Load:  cpu  ~8w~n        procs~8w~n"
                      "        runq ~8w~n",
                      [Config#opts.node,Clock,Cpu,NProcs,RQ]);
        Memi ->
            [Tot,Procs,Atom,Bin,Code,Ets] =
                meminfo(Memi, [total,processes,atom,binary,code,ets]),
            io:fwrite(Fd,
                      " ~-72w~10s~n Load:  cpu  ~8w               Memor"
                      "y:  total    ~8w    binary   ~8w~n        procs~"
                      "8w                        processes~8w    code  "
                      "   ~8w~n        runq ~8w                        "
                      "atom     ~8w    ets      ~8w~n",
                      [Config#opts.node,
                       Clock,
                       Cpu,
                       Tot,
                       Bin,
                       NProcs,
                       Procs,
                       Code,
                       RQ,
                       Atom,
                       Ets])
    end,
    io:nl(Fd),
    writepinfo_header(Fd),
    writesingleline(Fd),
    writepinfo(Fd, Info#etop_info.procinfo),
    writedoubleline(Fd),
    io:nl(Fd),
    Info.

writepinfo_header(Fd) ->
    io:fwrite(Fd,
              "Pid            Name or Initial Func    Time    Reds  Mem"
              "ory    MsgQ Current Function~n",
              []).

writesingleline(Fd) ->
    io:fwrite(Fd,
              "--------------------------------------------------------"
              "--------------------------------~n",
              []).

writedoubleline(Fd) ->
    io:fwrite(Fd,
              "========================================================"
              "================================~n",
              []).

writepinfo(Fd,
           [#etop_proc_info{pid = Pid,
                            mem = Mem,
                            reds = Reds,
                            name = Name,
                            runtime = Time,
                            cf = MFA,
                            mq = MQ}|
            T]) ->
    io:fwrite(Fd,
              "~-15w~-20s~8w~8w~8w~8w ~-20s~n",
              [Pid,to_list(Name),Time,Reds,Mem,MQ,formatmfa(MFA)]),
    writepinfo(Fd, T);
writepinfo(_Fd, []) ->
    ok.



