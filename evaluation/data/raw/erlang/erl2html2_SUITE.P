-file("test/lib/test_server/test/erl2html2_SUITE.erl", 1).

-module(erl2html2_SUITE).

-compile(export_all).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/common_test-1.6.3/include/ct.hrl",
      1).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/common_test-1.6.3/include/ct.hrl",
      21).

-file([], 21).

-file("test/lib/test_server/test/erl2html2_SUITE.erl", 24).

suite() ->
    [{timetrap,{seconds,30}},
     {ct_hooks,[ts_install_cth,test_server_test_lib]}].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, _Config) ->
    ok.

init_per_testcase(_TestCase, Config) ->
    Config.

end_per_testcase(_TestCase, _Config) ->
    ok.

groups() ->
    [].

all() ->
    [m1].

m1() ->
    [].

m1(Config) ->
    {Src,Dst} = convert_module("m1", Config),
    {true,L} = check_line_numbers(Src, Dst),
    ok = check_link_targets(Src, Dst, L, [{baz,0}]),
    ok.

convert_module(Mod, Config) ->
    DataDir = test_server:lookup_config(data_dir, Config),
    PrivDir = test_server:lookup_config(priv_dir, Config),
    Src = filename:join(DataDir, Mod ++ ".erl"),
    Dst = filename:join(PrivDir, Mod ++ ".erl.html"),
    io:format("<a href=\"~s\">~s</a>\n", [Src,filename:basename(Src)]),
    ok = erl2html2:convert(Src, Dst, "<html><body>"),
    io:format("<a href=\"~s\">~s</a>\n", [Dst,filename:basename(Dst)]),
    {Src,Dst}.

check_line_numbers(Src, Dst) ->
    {ok,SFd} = file:open(Src, [read]),
    {ok,DFd} = file:open(Dst, [read]),
    {ok,SN} = count_src_lines(SFd, 0),
    ok = file:close(SFd),
    {ok,DN} = read_dst_line_numbers(DFd),
    ok = file:close(DFd),
    {SN == DN,SN}.

count_src_lines(Fd, N) ->
    case io:get_line(Fd, "") of
        eof ->
            {ok,N};
        {error,Reason} ->
            {error,Reason,N};
        _Line ->
            count_src_lines(Fd, N + 1)
    end.

read_dst_line_numbers(Fd) ->
    "<html><body><pre>\n" = io:get_line(Fd, ""),
    read_dst_line_numbers(Fd, 0).

read_dst_line_numbers(Fd, Last) when is_integer(Last) ->
    case io:get_line(Fd, "") of
        eof ->
            {ok,Last};
        {error,Reason} ->
            {error,Reason,Last};
        "</pre>" ++ _ ->
            {ok,Last};
        "</body>" ++ _ ->
            {ok,Last};
        Line ->
            Num = check_line_number(Last, Line, Line),
            read_dst_line_numbers(Fd, Num)
    end.

check_line_number(Last, Line, OrigLine) ->
    case Line of
        "<a name=" ++ _ ->
            [$>|Rest] =
                lists:dropwhile(fun($>) ->
                                       false;
                                   (_) ->
                                       true
                                end,
                                Line),
            check_line_number(Last, Rest, OrigLine);
        _ ->
            [N|_] = string:tokens(Line, ":"),
            Num =
                try
                    list_to_integer(string:strip(N))
                catch
                    _:_ ->
                        ct:fail({no_line_number_after,Last,OrigLine})
                end,
            if
                Num == Last + 1 ->
                    Num;
                true ->
                    ct:fail({unexpected_integer,Num,Last})
            end
    end.

check_link_targets(Src, Dst, L, RmFncs) ->
    Mod = list_to_atom(filename:basename(filename:rootname(Src))),
    Exports =
        Mod:module_info(exports)
        --
        [{module_info,0},{module_info,1}|RmFncs],
    {ok,{[],L},_} =
        xmerl_sax_parser:file(Dst,
                              [{event_fun,fun sax_event/3},
                               {event_state,{Exports,0}}]),
    ok.

sax_event(Event, _Loc, State) ->
    sax_event(Event, State).

sax_event({startElement,_Uri,"a",_QN,Attrs}, {Exports,PrevLine}) ->
    {_,_,"name",Name} = lists:keyfind("name", 3, Attrs),
    case catch list_to_integer(Name) of
        Line when is_integer(Line) ->
            case PrevLine + 1 of
                Line ->
                    {Exports,Line};
                Other ->
                    ct:fail({unexpected_line_number_target,Other})
            end;
        {'EXIT',_} ->
            {match,[FStr,AStr]} =
                re:run(Name,
                       "^(.*)-([0-9]+)$",
                       [{capture,all_but_first,list}]),
            F = list_to_atom(http_uri:decode(FStr)),
            A = list_to_integer(AStr),
            A = proplists:get_value(F, Exports),
            {lists:delete({F,A}, Exports),PrevLine}
    end;
sax_event(_, State) ->
    State.



