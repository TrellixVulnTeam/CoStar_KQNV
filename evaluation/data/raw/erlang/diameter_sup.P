-file("test/lib/diameter/src/base/diameter_sup.erl", 1).

-module(diameter_sup).

-behaviour(supervisor).

-export([start_link/0,tree/0]).

-export([init/1]).

start_link() ->
    SupName = {local,diameter_sup},
    supervisor:start_link(SupName, diameter_sup, []).

init([]) ->
    ets_new([{diameter_sequence,[set]},
             {diameter_service,[set,{keypos,3}]},
             {diameter_request,[bag]},
             {diameter_config,[bag,{keypos,2}]}]),
    diameter_session:init(),
    Flags = {one_for_one,1,5},
    ChildSpecs =
        lists:map(fun spec/1,
                  [diameter_misc_sup,
                   diameter_watchdog_sup,
                   diameter_peer_fsm_sup,
                   diameter_transport_sup,
                   diameter_service_sup]),
    {ok,{Flags,ChildSpecs}}.

spec(Mod) ->
    {Mod,{Mod,start_link,[]},permanent,1000,supervisor,[Mod]}.

ets_new(List) when is_list(List) ->
    lists:foreach(fun ets_new/1, List);
ets_new({Table,Opts}) ->
    ets:new(Table, [named_table,public|Opts]).

tree() ->
    [{diameter_sup,whereis(diameter_sup),tree(diameter_sup)}].

tree(Sup) ->
    lists:map(fun t/1, supervisor:which_children(Sup)).

t({Name,Pid,supervisor,_}) ->
    t(Name, Pid, tree(Pid));
t({Name,Pid,worker,_}) ->
    t(Name, Pid).

t(undefined, Pid, Children) ->
    {Pid,Children};
t(Name, Pid, Children) ->
    {Name,Pid,Children}.

t(undefined, Pid) ->
    Pid;
t(Name, Pid) ->
    {Name,Pid}.



