-file("test/lib/diameter/src/compiler/diameter_make.erl", 1).

-module(diameter_make).

-export([codec/1,codec/2,dict/1,dict/2,format/1,reformat/1]).

-export_type([{opt,0}]).

-type opt() :: {include | outdir | name | prefix | inherits, string()}
             | verbose
             | debug.

-spec codec(Path, [opt()]) -> ok | {error, Reason}
               when
                   is_subtype(Path, string()),
                   is_subtype(Reason, string()).

codec(File, Opts) ->
    case dict(File, Opts) of
        {ok,Dict} ->
            make(File,
                 Opts,
                 Dict,
                 [ 
                  spec ||
                      _ <- [1],
                      lists:member(debug, Opts)
                 ]
                 ++
                 [erl,hrl]);
        {error,_} = E ->
            E
    end.

codec(File) ->
    codec(File, []).

-spec dict(string(), [opt()]) ->
              {ok, orddict:orddict()} | {error, string()}.

dict(Path, Opts) ->
    case diameter_dict_util:parse({path,Path}, Opts) of
        {ok,_} = Ok ->
            Ok;
        {error = E,Reason} ->
            {E,diameter_dict_util:format_error(Reason)}
    end.

dict(File) ->
    dict(File, []).

-spec format(orddict:orddict()) -> iolist().

format(Dict) ->
    diameter_dict_util:format(Dict).

-spec reformat(File) -> {ok, iolist()} | {error, Reason}
                  when
                      is_subtype(File, string()),
                      is_subtype(Reason, string()).

reformat(File) ->
    case dict(File) of
        {ok,Dict} ->
            {ok,format(Dict)};
        {error,_} = No ->
            No
    end.

make(_, _, _, []) ->
    ok;
make(File, Opts, Dict, [Mode|Rest]) ->
    try
        ok = diameter_codegen:from_dict(File, Dict, Opts, Mode),
        make(File, Opts, Dict, Rest)
    catch
        error:Reason ->
            error({Reason,Mode,erlang:get_stacktrace()})
    end.



