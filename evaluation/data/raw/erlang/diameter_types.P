-file("test/lib/diameter/src/base/diameter_types.erl", 1).

-module(diameter_types).

-export(['OctetString'/2,
         'Integer32'/2,
         'Integer64'/2,
         'Unsigned32'/2,
         'Unsigned64'/2,
         'Float32'/2,
         'Float64'/2]).

-export(['Address'/2,
         'Time'/2,
         'UTF8String'/2,
         'DiameterIdentity'/2,
         'DiameterURI'/2,
         'IPFilterRule'/2,
         'QoSFilterRule'/2]).

-export(['OctetString'/3,
         'Integer32'/3,
         'Integer64'/3,
         'Unsigned32'/3,
         'Unsigned64'/3,
         'Float32'/3,
         'Float64'/3,
         'Address'/3,
         'Time'/3,
         'UTF8String'/3,
         'DiameterIdentity'/3,
         'DiameterURI'/3,
         'IPFilterRule'/3,
         'QoSFilterRule'/3]).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/diameter-1.3/include/diameter.hrl",
      1).

-record(diameter_event,{service,info}).

-record(diameter_packet,{header,avps,msg,bin,errors = [],transport_data}).

-record(diameter_header,{version,
                         length,
                         cmd_code,
                         application_id,
                         hop_by_hop_id,
                         end_to_end_id,
                         is_request,
                         is_proxiable,
                         is_error,
                         is_retransmitted}).

-record(diameter_avp,{code,
                      vendor_id,
                      is_mandatory = false,
                      need_encryption = false,
                      data,
                      name,
                      value,
                      type,
                      index}).

-record(diameter_caps,{origin_host,
                       origin_realm,
                       host_ip_address = [],
                       vendor_id,
                       product_name,
                       origin_state_id = [],
                       supported_vendor_id = [],
                       auth_application_id = [],
                       inband_security_id = [],
                       acct_application_id = [],
                       vendor_specific_application_id = [],
                       firmware_revision = [],
                       avp = []}).

-record(diameter_uri,{type,
                      fqdn,
                      port = 3868,
                      transport = sctp,
                      protocol = diameter}).

-record(diameter_callback,{peer_up,
                           peer_down,
                           pick_peer,
                           prepare_request,
                           prepare_retransmit,
                           handle_request,
                           handle_answer,
                           handle_error,
                           default,
                           extra = []}).

-record(diameter_service,{pid,capabilities,applications = []}).

-record(diameter_app,{alias,
                      dictionary,
                      module,
                      init_state,
                      id,
                      mutable = false,
                      options = [{answer_errors,report}]}).

-file("test/lib/diameter/src/base/diameter_types.erl", 62).

'OctetString'(decode, Bin) when is_binary(Bin) ->
    binary_to_list(Bin);
'OctetString'(encode = M, zero) ->
    'OctetString'(M, []);
'OctetString'(encode, Str) ->
    iolist_to_binary(Str).

'Integer32'(decode, <<X:32/signed>>) ->
    X;
'Integer32'(decode, B) ->
    error({'DIAMETER',5014,B});
'Integer32'(encode = M, zero) ->
    'Integer32'(M, 0);
'Integer32'(encode, I)
    when
        - 1 * (1 bsl (32 - 1)) < I
        andalso
        I < 1 bsl (32 - 1) ->
    <<I:32/signed>>.

'Integer64'(decode, <<X:64/signed>>) ->
    X;
'Integer64'(decode, B) ->
    error({'DIAMETER',5014,B});
'Integer64'(encode = M, zero) ->
    'Integer64'(M, 0);
'Integer64'(encode, I)
    when
        - 1 * (1 bsl (64 - 1)) < I
        andalso
        I < 1 bsl (64 - 1) ->
    <<I:64/signed>>.

'Unsigned32'(decode, <<X:32>>) ->
    X;
'Unsigned32'(decode, B) ->
    error({'DIAMETER',5014,B});
'Unsigned32'(encode = M, zero) ->
    'Unsigned32'(M, 0);
'Unsigned32'(encode, I)
    when
        0 =< I
        andalso
        I < 1 bsl 32 ->
    <<I:32>>.

'Unsigned64'(decode, <<X:64>>) ->
    X;
'Unsigned64'(decode, B) ->
    error({'DIAMETER',5014,B});
'Unsigned64'(encode = M, zero) ->
    'Unsigned64'(M, 0);
'Unsigned64'(encode, I)
    when
        0 =< I
        andalso
        I < 1 bsl 64 ->
    <<I:64>>.

'Float32'(decode, <<S:1,255:8,_:23>>) ->
    choose(S, infinity, '-infinity');
'Float32'(decode, <<X:32/float>>) ->
    X;
'Float32'(decode, B) ->
    error({'DIAMETER',5014,B});
'Float32'(encode = M, zero) ->
    'Float32'(M, 0.0);
'Float32'(encode, infinity) ->
    <<0:1,255:8,0:23>>;
'Float32'(encode, '-infinity') ->
    <<1:1,255:8,0:23>>;
'Float32'(encode, X) when is_float(X) ->
    <<X:32/float>>.

'Float64'(decode, <<S:1,2047:11,_:52>>) ->
    choose(S, infinity, '-infinity');
'Float64'(decode, <<X:64/float>>) ->
    X;
'Float64'(decode, B) ->
    error({'DIAMETER',5014,B});
'Float64'(encode, infinity) ->
    <<0:1,2047:11,0:52>>;
'Float64'(encode, '-infinity') ->
    <<1:1,2047:11,0:52>>;
'Float64'(encode = M, zero) ->
    'Float64'(M, 0.0);
'Float64'(encode, X) when is_float(X) ->
    <<X:64/float>>.

'Address'(encode, zero) ->
    <<0:48>>;
'Address'(decode, <<A:16,B/binary>>)
    when 1 == A, 4 == size(B); 2 == A, 16 == size(B) ->
    list_to_tuple([ 
                   N ||
                       <<N:A/unit:8>> <= B
                  ]);
'Address'(decode, <<A:16,_/binary>> = B) when 1 == A; 2 == A ->
    error({'DIAMETER',5014,B});
'Address'(encode, T) ->
    Ns = tuple_to_list(diameter_lib:ipaddr(T)),
    A = length(Ns) div 4,
    B = << 
          <<N:A/unit:8>> ||
              N <- Ns
        >>,
    <<A:16,B/binary>>.

'DiameterIdentity'(encode = M, zero) ->
    'OctetString'(M, [0]);
'DiameterIdentity'(encode = M, X) ->
    <<_,_/binary>> = 'OctetString'(M, X);
'DiameterIdentity'(decode = M, <<_,_/binary>> = X) ->
    'OctetString'(M, X).

'DiameterURI'(decode, Bin) when is_binary(Bin) ->
    scan_uri(Bin);
'DiameterURI'(encode = M, zero) ->
    'OctetString'(M, lists:duplicate(0, 7));
'DiameterURI'(encode,
              #diameter_uri{type = Type,
                            fqdn = D,
                            port = P,
                            transport = T,
                            protocol = Prot} =
                  U) ->
    S = lists:append([atom_to_list(Type),
                      "://",
                      D,
                      ":",
                      integer_to_list(P),
                      ";transport=",
                      atom_to_list(T),
                      ";protocol=",
                      atom_to_list(Prot)]),
    U = scan_uri(S),
    list_to_binary(S);
'DiameterURI'(encode, Str) ->
    Bin = iolist_to_binary(Str),
    #diameter_uri{} = scan_uri(Bin),
    Bin.

'IPFilterRule'(encode = M, zero) ->
    'OctetString'(M, lists:duplicate(0, 33));
'IPFilterRule'(M, X) ->
    'OctetString'(M, X).

'QoSFilterRule'(encode = M, zero = X) ->
    'IPFilterRule'(M, X);
'QoSFilterRule'(M, X) ->
    'OctetString'(M, X).

'UTF8String'(decode, Bin) ->
    tl([0|_] = unicode:characters_to_list([0,Bin]));
'UTF8String'(encode = M, zero) ->
    'UTF8String'(M, []);
'UTF8String'(encode, S) ->
    <<_/binary>> = unicode:characters_to_binary(S).

'Time'(decode, <<Time:32>>) ->
    Offset = msb(1 == Time bsr 31),
    calendar:gregorian_seconds_to_datetime(Time + Offset);
'Time'(decode, B) ->
    error({'DIAMETER',5014,B});
'Time'(encode, {{_Y,_M,_D},{_HH,_MM,_SS}} = Datetime)
    when
        {{1968,1,20},{3,14,8}} =< Datetime,
        Datetime < {{2104,2,26},{9,42,24}} ->
    S = calendar:datetime_to_gregorian_seconds(Datetime),
    T = S - msb(S < 64253197696),
    0 = T bsr 32,
    <<T:32>>;
'Time'(encode, zero) ->
    <<0:32>>.

'OctetString'(M, _, Data) ->
    'OctetString'(M, Data).

'Integer32'(M, _, Data) ->
    'Integer32'(M, Data).

'Integer64'(M, _, Data) ->
    'Integer64'(M, Data).

'Unsigned32'(M, _, Data) ->
    'Unsigned32'(M, Data).

'Unsigned64'(M, _, Data) ->
    'Unsigned64'(M, Data).

'Float32'(M, _, Data) ->
    'Float32'(M, Data).

'Float64'(M, _, Data) ->
    'Float64'(M, Data).

'Address'(M, _, Data) ->
    'Address'(M, Data).

'Time'(M, _, Data) ->
    'Time'(M, Data).

'UTF8String'(M, _, Data) ->
    'UTF8String'(M, Data).

'DiameterIdentity'(M, _, Data) ->
    'DiameterIdentity'(M, Data).

'DiameterURI'(M, _, Data) ->
    'DiameterURI'(M, Data).

'IPFilterRule'(M, _, Data) ->
    'IPFilterRule'(M, Data).

'QoSFilterRule'(M, _, Data) ->
    'QoSFilterRule'(M, Data).

choose(0, X, _) ->
    X;
choose(1, _, X) ->
    X.

msb(true) ->
    59958230400;
msb(false) ->
    64253197696.

scan_uri(Bin) when is_binary(Bin) ->
    scan_uri(binary_to_list(Bin));
scan_uri("aaa://" ++ Rest) ->
    scan_fqdn(Rest, #diameter_uri{type = aaa});
scan_uri("aaas://" ++ Rest) ->
    scan_fqdn(Rest, #diameter_uri{type = aaas}).

scan_fqdn(S, U) ->
    {[_|_] = F,Rest} = lists:splitwith(fun is_fqdn/1, S),
    scan_opt_port(Rest, U#diameter_uri{fqdn = F}).

scan_opt_port(":" ++ S, U) ->
    {[_|_] = P,Rest} = lists:splitwith(fun is_digit/1, S),
    scan_opt_transport(Rest, U#diameter_uri{port = list_to_integer(P)});
scan_opt_port(S, U) ->
    scan_opt_transport(S, U).

scan_opt_transport(";transport=" ++ S, U) ->
    {P,Rest} = transport(S),
    scan_opt_protocol(Rest, U#diameter_uri{transport = P});
scan_opt_transport(S, U) ->
    scan_opt_protocol(S, U).

scan_opt_protocol(";protocol=" ++ S, U) ->
    {P,""} = protocol(S),
    U#diameter_uri{protocol = P};
scan_opt_protocol("", U) ->
    U.

transport("tcp" ++ S) ->
    {tcp,S};
transport("sctp" ++ S) ->
    {sctp,S};
transport("udp" ++ S) ->
    {udp,S}.

protocol("diameter" ++ S) ->
    {diameter,S};
protocol("radius" ++ S) ->
    {radius,S};
protocol("tacacs+" ++ S) ->
    {'tacacs+',S}.

is_fqdn(C) ->
    is_digit(C)
    orelse
    is_alpha(C)
    orelse
    C == $.
    orelse
    C == $-.

is_alpha(C) ->
    $a =< C
    andalso
    C =< $z
    orelse
    $A =< C
    andalso
    C =< $Z.

is_digit(C) ->
    $0 =< C
    andalso
    C =< $9.



