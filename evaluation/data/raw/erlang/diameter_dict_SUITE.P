-file("test/lib/diameter/test/diameter_dict_SUITE.erl", 1).

-module(diameter_dict_SUITE).

-export([suite/0,all/0,groups/0]).

-export([append/1,
         fetch/1,
         fetch_keys/1,
         filter/1,
         find/1,
         fold/1,
         is_key/1,
         map/1,
         merge/1,
         update/1,
         update_counter/1]).

-file("test/lib/diameter/test/diameter_ct.hrl", 1).

-file("test/lib/diameter/test/diameter_dict_SUITE.erl", 44).

suite() ->
    [{timetrap,{seconds,60}}].

all() ->
    [{group,all},{group,all,[parallel]}].

groups() ->
    [{all,[],tc()}].

tc() ->
    [append,
     fetch,
     fetch_keys,
     filter,
     find,
     fold,
     is_key,
     map,
     merge,
     update,
     update_counter].

append(_) ->
    D = diameter_dict:append(k, v, diameter_dict:new()),
    [{k,[v,v]}] = diameter_dict:to_list(diameter_dict:append(k, v, D)).

fetch(_) ->
    D = diameter_dict:from_list([ 
                                 {N,[N]} ||
                                     N <- lists:seq(1, 100)
                                ]),
    [50] = diameter_dict:fetch(50, D),
    Ref = make_ref(),
    Ref =
        try
            diameter_dict:fetch(Ref, D)
        catch
            _:_ ->
                Ref
        end.

fetch_keys(_) ->
    L = [ 
         {N,[N]} ||
             N <- lists:seq(1, 100)
        ],
    D = diameter_dict:from_list(L),
    L = [ 
         {N,[N]} ||
             N <- lists:sort(diameter_dict:fetch_keys(D))
        ].

filter(_) ->
    L = [ 
         {N,[N]} ||
             N <- lists:seq(1, 100)
        ],
    F = fun(K, [_]) ->
               0 == K rem 2
        end,
    D = diameter_dict:filter(F, diameter_dict:from_list(L)),
    true =
        [ 
         T ||
             {K,V} = T <- L,
             F(K, V)
        ]
        ==
        lists:sort(diameter_dict:to_list(D)).

find(_) ->
    D = diameter_dict:from_list([ 
                                 {N,[N]} ||
                                     N <- lists:seq(1, 100)
                                ]),
    {ok,[50]} = diameter_dict:find(50, D),
    error = diameter_dict:find(make_ref(), D).

fold(_) ->
    L = [ 
         {N,[N]} ||
             N <- lists:seq(1, 100)
        ],
    S = lists:sum([ 
                   N ||
                       {N,_} <- L
                  ]),
    S = diameter_dict:fold(fun(K, [_], A) ->
                                  K + A
                           end,
                           0,
                           diameter_dict:from_list(L)).

is_key(_) ->
    L = [ 
         {N,[N]} ||
             N <- lists:seq(1, 100)
        ],
    D = diameter_dict:from_list(L),
    true =
        lists:all(fun({N,_}) ->
                         diameter_dict:is_key(N, D)
                  end,
                  L),
    false = diameter_dict:is_key(make_ref(), D).

map(_) ->
    L = [ 
         {N,[N]} ||
             N <- lists:seq(1, 100)
        ],
    F = fun(_, V) ->
               [N] = V,
               N * 2
        end,
    D = diameter_dict:map(F, diameter_dict:from_list(L)),
    M = [ 
         {K,F(K, V)} ||
             {K,V} <- L
        ],
    M = lists:sort(diameter_dict:to_list(D)).

merge(_) ->
    L = [ 
         {N,[N]} ||
             N <- lists:seq(1, 100)
        ],
    F = fun(_, V1, V2) ->
               V1 ++ V2
        end,
    D = diameter_dict:merge(F,
                            diameter_dict:from_list(L),
                            diameter_dict:from_list(L)),
    M = [ 
         {K,F(K, V, V)} ||
             {K,V} <- L
        ],
    M = lists:sort(diameter_dict:to_list(D)).

update(_) ->
    L = [ 
         {N,[N]} ||
             N <- lists:seq(1, 100)
        ],
    F = fun([V]) ->
               2 * V
        end,
    D = diameter_dict:update(50, F, diameter_dict:from_list(L)),
    100 = diameter_dict:fetch(50, D),
    Ref = make_ref(),
    Ref =
        try
            diameter_dict:update(Ref, F, D)
        catch
            _:_ ->
                Ref
        end,
    [Ref] =
        diameter_dict:fetch(Ref,
                            diameter_dict:update(Ref,
                                                 fun(_, _) ->
                                                        error({diameter_dict_SUITE,
                                                               136,
                                                               i_think_not})
                                                 end,
                                                 [Ref],
                                                 D)).

update_counter(_) ->
    L = [ 
         {N,2 * N} ||
             {N,_} <-
                 [ 
                  {N,[N]} ||
                      N <- lists:seq(1, 100)
                 ]
        ],
    D = diameter_dict:update_counter(50, 20, diameter_dict:from_list(L)),
    120 = diameter_dict:fetch(50, D),
    2 = diameter_dict:fetch(1, D).



