-file("test/lib/gs/src/gstk_font.erl", 1).

-module(gstk_font).

-export([init/0,choose_ascii/2,choose/2,width_height/3]).

init() ->
    gstk:exec("toplevel .dfw;wm withdraw .dfw;label .dfw.l -text dummyi"
              "nittxt -padx 0 -pady 0 -borderwidth 0;pack .dfw.l").

width_height(_DB, FontSpec, Txt) ->
    FontSpecStr = tk_font_spec(norm_font_spec(FontSpec)),
    case
        gstk:call([".dfw.l co -font {",
                   FontSpecStr,
                   "}",
                   " -text ",
                   gstk:to_ascii(Txt)])
    of
        {result,_} ->
            Width = tcl2erl:ret_int("update idletasks;winfo w .dfw.l"),
            Height = tcl2erl:ret_int("winfo h .dfw.l"),
            {Width,Height};
        _Bad_Result ->
            undefined
    end.

choose_ascii(DB, Font) ->
    {Fam,Styl,Siz} = choose(DB, Font),
    {variable,V} = gstk_db:lookup(DB, {font,Fam,Styl,Siz}),
    V.

choose(DB, FontSpec) ->
    choose_font(DB, norm_font_spec(FontSpec)).

choose_font(DB, {Fam,Styl,Siz}) ->
    Fam0 = map_family(Fam),
    case gstk_db:lookup(DB, {font,Fam0,Styl,Siz}) of
        {variable,_OwnFontName} ->
            true;
        undefined ->
            N = gstk_db:counter(DB, font),
            NewName = ["f",gstk:to_ascii(N)],
            gstk:exec(["font create ",
                       NewName,
                       " ",
                       tk_font_spec({Fam0,Styl,Siz})]),
            V2 = {variable,NewName},
            gstk_db:insert(DB, {font,Fam0,Styl,Siz}, V2),
            true
    end,
    {Fam0,Styl,Siz}.

map_family(new_century_schoolbook) ->
    times;
map_family(Fam) ->
    Fam.

norm_font_spec({Family,Size}) ->
    {Family,[],Size};
norm_font_spec({Family,Style,Size}) ->
    {Family,norm_style(Style),Size}.

norm_style(bold) ->
    [bold];
norm_style(italic) ->
    [italic];
norm_style([italic]) ->
    [italic];
norm_style([bold]) ->
    [bold];
norm_style([bold,italic] = Style) ->
    Style;
norm_style([italic,bold]) ->
    [bold,italic];
norm_style(List) when is_list(List) ->
    case {lists:member(bold, List),lists:member(italic, List)} of
        {true,true} ->
            [bold,italic];
        {true,_} ->
            [bold];
        {_,true} ->
            [italic];
        _ ->
            []
    end;
norm_style(_Any) ->
    [].

tk_font_spec({Fam,Style,Size}) ->
    ["-family ",
     gstk:to_ascii(Fam),
     " -size ",
     gstk:to_ascii(- Size),
     tk_font_spec_style(Style)].

tk_font_spec_style([]) ->
    "";
tk_font_spec_style([bold]) ->
    " -weight bold";
tk_font_spec_style([italic]) ->
    " -slant italic";
tk_font_spec_style([bold,italic]) ->
    " -weight bold -slant italic".



