-file("test/lib/gs/src/gstk_listbox.erl", 1).

-module(gstk_listbox).

-export([create/3,
         config/3,
         read/3,
         delete/2,
         event/5,
         wid_event/5,
         option/5,
         read_option/5]).

-file("test/lib/gs/src/gstk.hrl", 1).

-record(gstkid,{id = undefined,widget,widget_data,owner,parent,objtype}).

-record(so,{main,object,hscroll,vscroll,misc}).

-file("test/lib/gs/src/gstk_listbox.erl", 94).

create(DB, GstkId, Opts) ->
    MainW = gstk_generic:mk_tkw_child(DB, GstkId),
    Listbox = lists:append(MainW, ".z"),
    {Vscroll,Hscroll,NewOpts} = gstk_generic:parse_scrolls(Opts),
    WidgetD =
        #so{main = MainW,
            object = Listbox,
            hscroll = Hscroll,
            vscroll = Vscroll},
    Gstkid = GstkId#gstkid{widget = MainW,widget_data = WidgetD},
    MandatoryCmd = ["so_create listbox ",MainW],
    case gstk:call(MandatoryCmd) of
        {result,_} ->
            SimplePreCmd = [MainW," conf"],
            PlacePreCmd = [";place ",MainW],
            case
                gstk_generic:make_command(NewOpts,
                                          Gstkid,
                                          MainW,
                                          SimplePreCmd,
                                          PlacePreCmd,
                                          DB,
                                          Listbox)
            of
                {error,Reason} ->
                    {error,Reason};
                Cmd when is_list(Cmd) ->
                    gstk:exec(Cmd),
                    gstk:exec([MainW,
                               ".sy conf -rel sunken -bo 2;",
                               MainW,
                               ".pad.sx conf -rel sunken -bo 2;",
                               Listbox,
                               " conf -bo 2 -relief sunken -highlightth"
                               " 2 -expo 0;"]),
                    Gstkid
            end;
        Bad_Result ->
            {error,Bad_Result}
    end.

config(DB, Gstkid, Options) ->
    SO = Gstkid#gstkid.widget_data,
    MainW = Gstkid#gstkid.widget,
    Listbox = SO#so.object,
    NewOpts = gstk_generic:parse_scrolls(Gstkid, Options),
    SimplePreCmd = [MainW," conf"],
    PlacePreCmd = [";place ",MainW],
    gstk_generic:mk_cmd_and_exec(NewOpts,
                                 Gstkid,
                                 MainW,
                                 SimplePreCmd,
                                 PlacePreCmd,
                                 DB,
                                 Listbox).

read(DB, Gstkid, Opt) ->
    SO = Gstkid#gstkid.widget_data,
    gstk_generic:read_option(DB, Gstkid, Opt, SO#so.object).

delete(DB, Gstkid) ->
    gstk_db:delete_widget(DB, Gstkid),
    Gstkid#gstkid.widget.

event(DB, Gstkid, click, Edata, Args) ->
    wid_event(DB, Gstkid, click, Edata, Args);
event(DB, Gstkid, doubleclick, Edata, Args) ->
    wid_event(DB, Gstkid, doubleclick, Edata, Args);
event(DB, Gstkid, Etype, Edata, Args) ->
    gstk_generic:event(DB, Gstkid, Etype, Edata, Args).

wid_event(DB, Gstkid, Etype, Edata, _Args) ->
    SO = Gstkid#gstkid.widget_data,
    TkW = SO#so.object,
    CurIdx = tcl2erl:ret_int([TkW," index active;"]),
    CurTxt = tcl2erl:ret_str([TkW," get active;"]),
    CurSel = tcl2erl:ret_list([TkW," curselection;"]),
    Arg2 = [CurIdx,CurTxt,lists:member(CurIdx, CurSel)],
    gstk_generic:event(DB, Gstkid, Etype, Edata, Arg2).

option(Option, Gstkid, MainW, DB, Listbox) ->
    case Option of
        {items,Items} when is_list(Items) ->
            {c,
             [Listbox," del 0 end ;",Listbox," ins 0 ",item_list(Items)]};
        {selection,{From,To}} when is_integer(From), is_integer(To) ->
            {c,
             [Listbox,
              " sel set ",
              gstk:to_ascii(From),
              " ",
              gstk:to_ascii(To)]};
        {font,Font} when is_tuple(Font) ->
            gstk_db:insert_opt(DB, Gstkid, Option),
            {c,
             [Listbox," conf -font ",gstk_font:choose_ascii(DB, Font)]};
        {selection,clear} ->
            {c,[Listbox," sel clear 0 end"]};
        {selection,Idx} when is_integer(Idx) ->
            {c,[Listbox," select set ",gstk:to_ascii(Idx)]};
        {selectmode,Mode} ->
            {c,[Listbox," conf -selectm ",gstk:to_ascii(Mode)]};
        {xselection,Bool} ->
            {c,[Listbox," conf -exportse ",gstk:to_ascii(Bool)]};
        {fg,Color} ->
            {c,[Listbox," conf -fg ",gstk:to_color(Color)]};
        {del,{From,To}} ->
            {c,
             [Listbox,
              " del ",
              integer_to_list(From),
              " ",
              integer_to_list(To)]};
        {del,Idx} ->
            {c,[Listbox," del ",integer_to_list(Idx)]};
        clear ->
            {c,[Listbox," del 0 end"]};
        {add,{Idx,Str}} ->
            {c,
             [Listbox,
              " ins ",
              integer_to_list(Idx),
              " ",
              gstk:to_ascii(Str)]};
        {add,Str} ->
            {c,[Listbox," ins end ",gstk:to_ascii(Str)]};
        {change,{Idx,Str}} ->
            {c,
             [Listbox,
              " del ",
              integer_to_list(Idx),
              $;,
              Listbox,
              " ins ",
              integer_to_list(Idx),
              " ",
              gstk:to_ascii(Str)]};
        {see,Idx} ->
            {c,[Listbox," see ",gstk:to_ascii(Idx)]};
        {setfocus,true} ->
            {c,["focus ",MainW]};
        {setfocus,false} ->
            {c,["focus ."]};
        {click,On} ->
            cbind(DB, Gstkid, Listbox, click, On);
        {doubleclick,On} ->
            cbind(DB, Gstkid, Listbox, doubleclick, On);
        _ ->
            invalid_option
    end.

read_option(Option, GstkId, _MainW, DB, Listbox) ->
    case Option of
        fg ->
            tcl2erl:ret_color([Listbox," cg -fg"]);
        font ->
            gstk_db:opt(DB, GstkId, font, undefined);
        selection ->
            tcl2erl:ret_list([Listbox," curselection"]);
        setfocus ->
            tcl2erl:ret_focus(Listbox, "focus");
        items ->
            tcl2erl:ret_str_list([Listbox," get 0 end"]);
        selectmode ->
            tcl2erl:ret_atom([Listbox," cg -selectmode"]);
        size ->
            tcl2erl:ret_int([Listbox," size"]);
        xselection ->
            tcl2erl:ret_bool([Listbox," cg -exportsel"]);
        {get,Idx} ->
            tcl2erl:ret_str([Listbox," get ",gstk:to_ascii(Idx)]);
        click ->
            gstk_db:is_inserted(DB, GstkId, click);
        doubleclick ->
            gstk_db:is_inserted(DB, GstkId, doubleclick);
        _ ->
            {bad_result,{GstkId#gstkid.objtype,invalid_option,Option}}
    end.

item_list([H|T]) ->
    [gstk:to_ascii(H),$\s|item_list(T)];
item_list([]) ->
    [].

cbind(DB, Gstkid, Listbox, Etype, {true,Edata}) ->
    Button =
        case Etype of
            click ->
                " <ButtonRelease-1> ";
            doubleclick ->
                " <Double-ButtonRelease-1> "
        end,
    Eref = gstk_db:insert_event(DB, Gstkid, Etype, Edata),
    {c,["bind ",Listbox,Button,"{erlsend ",Eref," }"]};
cbind(DB, Gstkid, Listbox, Etype, true) ->
    cbind(DB, Gstkid, Listbox, Etype, {true,[]});
cbind(DB, Gstkid, Listbox, Etype, _On) ->
    Button =
        case Etype of
            click ->
                " <Button-1> {}";
            doubleclick ->
                " <Double-Button-1> {}"
        end,
    gstk_db:delete_event(DB, Gstkid, Etype),
    {c,["bind ",Listbox,Button]}.



