-file("test/lib/gs/src/gstk_frame.erl", 1).

-module(gstk_frame).

-export([create/3,
         config/3,
         read/3,
         delete/2,
         event/5,
         option/5,
         read_option/5,
         mk_create_opts_for_child/4]).

-file("test/lib/gs/src/gstk.hrl", 1).

-record(gstkid,{id = undefined,widget,widget_data,owner,parent,objtype}).

-record(so,{main,object,hscroll,vscroll,misc}).

-file("test/lib/gs/src/gstk_frame.erl", 71).

create(DB, GstkId, Opts) ->
    TkW = gstk_generic:mk_tkw_child(DB, GstkId),
    NGstkid = GstkId#gstkid{widget = TkW},
    PlacePreCmd = [";place ",TkW],
    case
        gstk_generic:make_command(Opts,
                                  NGstkid,
                                  TkW,
                                  "",
                                  PlacePreCmd,
                                  DB)
    of
        {error,Reason} ->
            {error,Reason};
        Cmd when is_list(Cmd) ->
            gstk:exec(["frame ",TkW," -relief raised -bo 0",Cmd]),
            NGstkid
    end.

mk_create_opts_for_child(DB, Cgstkid, Pgstkid, Opts) ->
    gstk_generic:mk_create_opts_for_child(DB, Cgstkid, Pgstkid, Opts).

config(DB, Gstkid, Opts) ->
    TkW = Gstkid#gstkid.widget,
    SimplePreCmd = [TkW," conf"],
    PlacePreCmd = [";place ",TkW],
    Opts2 = atomic_width_height(false, false, Opts),
    gstk_generic:mk_cmd_and_exec(Opts2,
                                 Gstkid,
                                 TkW,
                                 SimplePreCmd,
                                 PlacePreCmd,
                                 DB).

atomic_width_height(false, false, []) ->
    [];
atomic_width_height(false, Width, []) ->
    [{width,Width}];
atomic_width_height(Height, false, []) ->
    [{height,Height}];
atomic_width_height(H, W, []) ->
    [{width_height,{W,H}}];
atomic_width_height(_, W, [{height,H}|Opts]) ->
    atomic_width_height(H, W, Opts);
atomic_width_height(H, _, [{width,W}|Opts]) ->
    atomic_width_height(H, W, Opts);
atomic_width_height(H, W, [Opt|Opts]) ->
    [Opt|atomic_width_height(H, W, Opts)].

read(DB, Gstkid, Opt) ->
    gstk_generic:read_option(DB, Gstkid, Opt).

delete(DB, Gstkid) ->
    gstk_db:delete_widget(DB, Gstkid),
    Gstkid#gstkid.widget.

event(DB, Gstkid, Etype, Edata, Args) ->
    gstk_generic:event(DB, Gstkid, Etype, Edata, Args).

option(Option, Gstkid, _TkW, DB, _) ->
    case Option of
        {bg,Color} ->
            {s,[" -bg ",gstk:to_color(Color)]};
        {packer_x,_Pack} ->
            gstk_db:insert_opt(DB, Gstkid, Option),
            none;
        {packer_y,_Pack} ->
            gstk_db:insert_opt(DB, Gstkid, Option),
            none;
        {width,W} ->
            execute_pack_cmds(DB, xpack(W, DB, Gstkid)),
            {s,[" -wi ",gstk:to_ascii(W)]};
        {height,H} ->
            execute_pack_cmds(DB, ypack(H, DB, Gstkid)),
            {s,[" -he ",gstk:to_ascii(H)]};
        {width_height,{W,H}} ->
            execute_pack_cmds(DB,
                              merge_pack_cmds(xpack(W, DB, Gstkid),
                                              ypack(H, DB, Gstkid))),
            {s,[" -he ",gstk:to_ascii(H)," -wi ",gstk:to_ascii(W)]};
        _ ->
            invalid_option
    end.

xpack(W, DB, Gstkid) ->
    gstk_db:insert_opt(DB, Gstkid, {width,W}),
    case gstk_db:opt_or_not(DB, Gstkid, packer_x) of
        {value,Pack} when is_list(Pack) ->
            ColSiz = gs_packer:pack(W, Pack),
            pack_children(pack_x,
                          x,
                          width,
                          DB,
                          gstk_db:lookup_kids(DB, Gstkid#gstkid.id),
                          ColSiz);
        _Else ->
            []
    end.

ypack(H, DB, Gstkid) ->
    gstk_db:insert_opt(DB, Gstkid, {height,H}),
    case gstk_db:opt_or_not(DB, Gstkid, packer_y) of
        {value,Pack} when is_list(Pack) ->
            ColSiz = gs_packer:pack(H, Pack),
            pack_children(pack_y,
                          y,
                          height,
                          DB,
                          gstk_db:lookup_kids(DB, Gstkid#gstkid.id),
                          ColSiz);
        _Else ->
            []
    end.

merge_pack_cmds([{Id,Opts1}|Cmds1], [{Id,Opts2}|Cmds2]) ->
    [{Id,Opts1 ++ Opts2}|merge_pack_cmds(Cmds1, Cmds2)];
merge_pack_cmds(L1, L2) ->
    L1 ++ L2.

execute_pack_cmds(DB, [{Id,Opts}|Cmds]) ->
    gstk:config_impl(DB, Id, Opts),
    execute_pack_cmds(DB, Cmds);
execute_pack_cmds(_, []) ->
    ok.

pack_children(PackOpt, PosOpt, SizOpt, DB, Kids, Sizes) ->
    Schildren = keep_packed(Kids, PackOpt, DB),
    pack_children2(PackOpt, PosOpt, SizOpt, Schildren, Sizes).

pack_children2(PackOpt, PosOpt, SizOpt, [{StartStop,Id}|Childs], Sizes) ->
    [pack_child(Id, StartStop, SizOpt, PosOpt, Sizes)|
     pack_children2(PackOpt, PosOpt, SizOpt, Childs, Sizes)];
pack_children2(_, _, _, [], _) ->
    [].

pack_child(Id, {StartPos,StopPos}, SizOpt, PosOpt, Sizes) ->
    {Pos,Size} = find_pos(StartPos, StopPos, 1, 0, 0, Sizes),
    {Id,[{PosOpt,Pos},{SizOpt,Size}]}.

find_pos(_StartPos, Pos, Pos, AccPixelPos, AccPixelSize, [Size|_]) ->
    {AccPixelPos,Size + AccPixelSize};
find_pos(StartPos, StopPos, Pos, AccPixelPos, 0, [Size|Sizes])
    when Pos < StartPos ->
    find_pos(StartPos, StopPos, Pos + 1, Size + AccPixelPos, 0, Sizes);
find_pos(_StartPos,
         StopPos,
         Pos,
         AccPixelPos,
         AccPixelSize,
         [Size|Sizes])
    when Pos < StopPos ->
    find_pos(Pos,
             StopPos,
             Pos + 1,
             AccPixelPos,
             Size + AccPixelSize,
             Sizes).

keep_packed([Id|Ids], PackOpt, DB) ->
    case gstk:read_impl(DB, Id, PackOpt) of
        undefined ->
            keep_packed(Ids, PackOpt, DB);
        StartStop ->
            [{StartStop,Id}|keep_packed(Ids, PackOpt, DB)]
    end;
keep_packed([], _, _) ->
    [].

read_option(Option, Gstkid, TkW, _DB, _) ->
    case Option of
        bg ->
            tcl2erl:ret_color([TkW," cg -bg"]);
        _ ->
            {bad_result,{Gstkid#gstkid.objtype,invalid_option,Option}}
    end.



