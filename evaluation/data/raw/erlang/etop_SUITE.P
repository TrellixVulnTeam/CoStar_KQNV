-file("test/lib/observer/test/etop_SUITE.erl", 1).

-module(etop_SUITE).

-export([all/0,
         suite/0,
         groups/0,
         init_per_suite/1,
         end_per_suite/1,
         init_per_group/2,
         end_per_group/2]).

-export([text/1,text/2,text_tracing_off/1,text_tracing_off/2]).

-export([init_per_testcase/2,end_per_testcase/2]).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/lib/observer/test/etop_SUITE.erl", 29).

init_per_testcase(_Case, Config) ->
    Dog = test_server:timetrap(test_server:minutes(1)),
    [{watchdog,Dog}|Config].

end_per_testcase(Case, Config) ->
    try
        apply(etop_SUITE, Case, [cleanup,Config])
    catch
        error:undef ->
            ok
    end,
    Dog = test_server:lookup_config(watchdog, Config),
    test_server:timetrap_cancel(Dog),
    ok.

suite() ->
    [{ct_hooks,[ts_install_cth]}].

all() ->
    [text,text_tracing_off].

groups() ->
    [].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, Config) ->
    Config.

text(_) ->
    case test_server:is_native(lists) of
        true ->
            {skip,"Native libs -- tracing does not work"};
        false ->
            text()
    end.

text() ->
    {ok,Node} = test_server:start_node(node2, peer, []),
    spawn_link(etop, start, [[{node,Node},{output,text},{interval,3}]]),
    timer:sleep(4000),
    etop:config(interval, 2),
    timer:sleep(3000),
    etop:config(lines, 5),
    timer:sleep(3000),
    etop:config(accumulate, true),
    timer:sleep(3000),
    etop:config(sort, reductions),
    timer:sleep(3000),
    etop:config(sort, memory),
    timer:sleep(3000),
    etop:config(sort, msg_q),
    timer:sleep(3000),
    ok.

text(cleanup, _Config) ->
    etop:stop(),
    {ok,Host} = inet:gethostname(),
    Node = list_to_atom("node2@" ++ Host),
    test_server:stop_node(Node).

text_tracing_off(suite) ->
    [];
text_tracing_off(doc) ->
    ["Start etop with text presentation, and tracing turned off"];
text_tracing_off(Config) when is_list(Config) ->
    {ok,Node} = test_server:start_node(node2, peer, []),
    spawn_link(etop,
               start,
               [[{node,Node},{output,text},{interval,3},{tracing,off}]]),
    timer:sleep(4000),
    etop:config(interval, 2),
    timer:sleep(3000),
    etop:config(lines, 5),
    timer:sleep(3000),
    etop:config(accumulate, true),
    timer:sleep(3000),
    etop:config(sort, memory),
    timer:sleep(3000),
    etop:config(sort, msg_q),
    timer:sleep(3000),
    etop:config(sort, runtime),
    timer:sleep(3000),
    ok.

text_tracing_off(cleanup, _Config) ->
    etop:stop(),
    {ok,Host} = inet:gethostname(),
    Node = list_to_atom("node2@" ++ Host),
    test_server:stop_node(Node).



