-file("test/lib/hipe/amd64/hipe_amd64_encode.erl", 1).

-module(hipe_amd64_encode).

-export([cc/1,
         sindex/2,
         sib/1,
         sib/2,
         ea_disp32_base/2,
         ea_disp32_sib/2,
         ea_disp8_base/2,
         ea_disp8_sib/2,
         ea_base/1,
         ea_disp32_sindex/1,
         ea_sib/1,
         rm_reg/1,
         rm_mem/1,
         insn_encode/3,
         insn_sizeof/2]).

cc(o) ->
    0;
cc(no) ->
    1;
cc(b) ->
    2;
cc(ae) ->
    3;
cc(e) ->
    4;
cc(ne) ->
    5;
cc(be) ->
    6;
cc(a) ->
    7;
cc(s) ->
    8;
cc(ns) ->
    9;
cc(pe) ->
    10;
cc(po) ->
    11;
cc(l) ->
    12;
cc(ge) ->
    13;
cc(le) ->
    14;
cc(g) ->
    15.

sindex(Scale, Index) when is_integer(Scale), is_integer(Index) ->
    if
        Scale >= 0 ->
            [];
        true ->
            exit({hipe_amd64_encode,sindex})
    end,
    if
        Scale =< 3 ->
            [];
        true ->
            exit({hipe_amd64_encode,sindex})
    end,
    if
        Index =/= 4 ->
            [];
        true ->
            exit({hipe_amd64_encode,sindex})
    end,
    {sindex,Scale,Index}.

-record(sib,{sindex_opt,base :: undefined | integer()}).

sib(Base) when is_integer(Base) ->
    #sib{sindex_opt = none,base = Base}.

sib(Base, Sindex) when is_integer(Base) ->
    #sib{sindex_opt = Sindex,base = Base}.

ea_disp32_base(Disp32, Base) when is_integer(Base) ->
    if
        Base =/= 4 ->
            [];
        true ->
            exit({hipe_amd64_encode,ea_disp32_base})
    end,
    {ea_disp32_base,Disp32,Base}.

ea_disp32_sib(Disp32, SIB) ->
    {ea_disp32_sib,Disp32,SIB}.

ea_disp8_base(Disp8, Base) when is_integer(Base) ->
    if
        Base =/= 4 ->
            [];
        true ->
            exit({hipe_amd64_encode,ea_disp8_base})
    end,
    {ea_disp8_base,Disp8,Base}.

ea_disp8_sib(Disp8, SIB) ->
    {ea_disp8_sib,Disp8,SIB}.

ea_base(Base) when is_integer(Base) ->
    if
        Base =/= 4 ->
            [];
        true ->
            exit({hipe_amd64_encode,ea_base})
    end,
    if
        Base =/= 5 ->
            [];
        true ->
            exit({hipe_amd64_encode,ea_base})
    end,
    {ea_base,Base}.

ea_disp32_sindex(Disp32) ->
    {ea_disp32_sindex,Disp32,none}.

ea_sib(SIB) ->
    if
        SIB#sib.base =/= 5 ->
            [];
        true ->
            exit({hipe_amd64_encode,ea_sib})
    end,
    {ea_sib,SIB}.

rm_reg(Reg) ->
    {rm_reg,Reg}.

rm_mem(EA) ->
    {rm_mem,EA}.

mk_modrm(Mod, RO, RM) ->
    {rex([{r,RO},{b,RM}]),Mod bsl 6 bor (RO band 7 bsl 3) bor RM band 7}.

mk_sib(Scale, Index, Base) ->
    {rex([{x,Index},{b,Base}]),
     Scale bsl 6 bor (Index band 7 bsl 3) bor Base band 7}.

rex(REXs) ->
    {rex,rex_(REXs)}.

rex_([]) ->
    0;
rex_([{r8,Reg8}|Rest]) ->
    case Reg8 of
        {rm_mem,_} ->
            rex_(Rest);
        4 ->
            1 bsl 8 bor rex_(Rest);
        5 ->
            1 bsl 8 bor rex_(Rest);
        6 ->
            1 bsl 8 bor rex_(Rest);
        7 ->
            1 bsl 8 bor rex_(Rest);
        X when is_integer(X) ->
            rex_(Rest)
    end;
rex_([{w,REXW}|Rest]) ->
    REXW bsl 3 bor rex_(Rest);
rex_([{r,ModRM_regRegister}|Rest]) when is_integer(ModRM_regRegister) ->
    REXR =
        if
            ModRM_regRegister > 7 ->
                1;
            true ->
                0
        end,
    REXR bsl 2 bor rex_(Rest);
rex_([{x,SIB_indexRegister}|Rest]) when is_integer(SIB_indexRegister) ->
    REXX =
        if
            SIB_indexRegister > 7 ->
                1;
            true ->
                0
        end,
    REXX bsl 1 bor rex_(Rest);
rex_([{b,OtherRegister}|Rest]) when is_integer(OtherRegister) ->
    REXB =
        if
            OtherRegister > 7 ->
                1;
            true ->
                0
        end,
    REXB bor rex_(Rest).

le16(Word, Tail) ->
    [Word band 255,(Word bsr 8) band 255|Tail].

le32(Word, Tail) when is_integer(Word) ->
    [Word band 255,
     (Word bsr 8) band 255,
     (Word bsr 16) band 255,
     (Word bsr 24) band 255|
     Tail];
le32({Tag,Val}, Tail) ->
    [{le32,Tag,Val}|Tail].

le64(Word, Tail) when is_integer(Word) ->
    [Word band 255,
     (Word bsr 8) band 255,
     (Word bsr 16) band 255,
     (Word bsr 24) band 255,
     (Word bsr 32) band 255,
     (Word bsr 40) band 255,
     (Word bsr 48) band 255,
     (Word bsr 56) band 255|
     Tail];
le64({Tag,Val}, Tail) ->
    [{le64,Tag,Val}|Tail].

enc_sindex_opt({sindex,Scale,Index}) ->
    {Scale,Index};
enc_sindex_opt(none) ->
    {0,4}.

enc_sib(#sib{sindex_opt = SindexOpt,base = Base}) ->
    {Scale,Index} = enc_sindex_opt(SindexOpt),
    mk_sib(Scale, Index, Base).

enc_ea(EA, RO, Tail) ->
    case EA of
        {ea_disp32_base,Disp32,Base} ->
            [mk_modrm(2, RO, Base)|le32(Disp32, Tail)];
        {ea_disp32_sib,Disp32,SIB} ->
            [mk_modrm(2, RO, 4),enc_sib(SIB)|le32(Disp32, Tail)];
        {ea_disp8_base,Disp8,Base} ->
            [mk_modrm(1, RO, Base),Disp8|Tail];
        {ea_disp8_sib,Disp8,SIB} ->
            [mk_modrm(1, RO, 4),enc_sib(SIB),Disp8|Tail];
        {ea_base,Base} ->
            [mk_modrm(0, RO, Base)|Tail];
        {ea_disp32_sindex,Disp32,SindexOpt} ->
            {Scale,Index} = enc_sindex_opt(SindexOpt),
            SIB = mk_sib(Scale, Index, 5),
            MODRM = mk_modrm(0, RO, 4),
            [MODRM,SIB|le32(Disp32, Tail)];
        {ea_sib,SIB} ->
            [mk_modrm(0, RO, 4),enc_sib(SIB)|Tail];
        {ea_disp32_rip,Disp32} ->
            [mk_modrm(0, RO, 5)|le32(Disp32, Tail)]
    end.

encode_rm(RM, RO, Tail) ->
    case RM of
        {rm_reg,Reg} ->
            [mk_modrm(3, RO, Reg)|Tail];
        {rm_mem,EA} ->
            enc_ea(EA, RO, Tail)
    end.

st(0) ->
    0;
st(1) ->
    1;
st(2) ->
    2;
st(3) ->
    3;
st(4) ->
    4;
st(5) ->
    5;
st(6) ->
    6;
st(7) ->
    7.

arith_binop_encode(SubOpcode, Opnds) ->
    case Opnds of
        {eax,{imm32,Imm32}} ->
            [5 bor (SubOpcode bsl 3)|le32(Imm32, [])];
        {{rm32,RM32},{imm32,Imm32}} ->
            [129|encode_rm(RM32, SubOpcode, le32(Imm32, []))];
        {{rm32,RM32},{imm8,Imm8}} ->
            [131|encode_rm(RM32, SubOpcode, [Imm8])];
        {{rm32,RM32},{reg32,Reg32}} ->
            [1 bor (SubOpcode bsl 3)|encode_rm(RM32, Reg32, [])];
        {{reg32,Reg32},{rm32,RM32}} ->
            [3 bor (SubOpcode bsl 3)|encode_rm(RM32, Reg32, [])];
        {rax,{imm32,Imm32}} ->
            [rex([{w,1}]),5 bor (SubOpcode bsl 3)|le32(Imm32, [])];
        {{rm64,RM64},{imm32,Imm32}} ->
            [rex([{w,1}]),
             129|
             encode_rm(RM64, SubOpcode, le32(Imm32, []))];
        {{rm64,RM64},{imm8,Imm8}} ->
            [rex([{w,1}]),131|encode_rm(RM64, SubOpcode, [Imm8])];
        {{rm64,RM64},{reg64,Reg64}} ->
            [rex([{w,1}]),
             1 bor (SubOpcode bsl 3)|
             encode_rm(RM64, Reg64, [])];
        {{reg64,Reg64},{rm64,RM64}} ->
            [rex([{w,1}]),
             3 bor (SubOpcode bsl 3)|
             encode_rm(RM64, Reg64, [])]
    end.

sse2_arith_binop_encode(Prefix, Opcode, {{xmm,XMM64},{rm64fp,RM64}}) ->
    [Prefix,15,Opcode|encode_rm(RM64, XMM64, [])].

sse2_cvtsi2sd_encode({{xmm,XMM64},{rm64,RM64}}) ->
    [rex([{w,1}]),242,15,42|encode_rm(RM64, XMM64, [])].

sse2_mov_encode(Opnds) ->
    case Opnds of
        {{xmm,XMM64},{rm64fp,RM64}} ->
            [242,15,16|encode_rm(RM64, XMM64, [])];
        {{rm64fp,RM64},{xmm,XMM64}} ->
            [242,15,17|encode_rm(RM64, XMM64, [])]
    end.

bs_op_encode(Opcode, {{reg32,Reg32},{rm32,RM32}}) ->
    [15,Opcode|encode_rm(RM32, Reg32, [])].

bswap_encode(Opnds) ->
    case Opnds of
        {{reg32,Reg32}} ->
            [rex([{b,Reg32}]),15,200 bor Reg32 band 7];
        {{reg64,Reg64}} ->
            [rex([{w,1},{b,Reg64}]),15,200 bor Reg64 band 7]
    end.

bt_op_encode(SubOpcode, Opnds) ->
    case Opnds of
        {{rm32,RM32},{reg32,Reg32}} ->
            [15,163 bor (SubOpcode bsl 3)|encode_rm(RM32, Reg32, [])];
        {{rm32,RM32},{imm8,Imm8}} ->
            [15,186|encode_rm(RM32, SubOpcode, [Imm8])]
    end.

call_encode(Opnds) ->
    case Opnds of
        {{rel32,Rel32}} ->
            [232|le32(Rel32, [])];
        {{rm64,RM64}} ->
            [255|encode_rm(RM64, 2, [])]
    end.

cbw_encode({}) ->
    [102,152].

cbw_sizeof({}) ->
    2.

nullary_op_encode(Opcode, {}) ->
    [Opcode].

nullary_op_sizeof({}) ->
    1.

cmovcc_encode({{cc,CC},{reg32,Reg32},{rm32,RM32}}) ->
    [15,64 bor CC|encode_rm(RM32, Reg32, [])].

incdec_encode(SubOpcode, Opnds) ->
    case Opnds of
        {{rm32,RM32}} ->
            [255|encode_rm(RM32, SubOpcode, [])];
        {{rm64,RM64}} ->
            [rex([{w,1}]),255|encode_rm(RM64, SubOpcode, [])]
    end.

arith_unop_encode(Opcode, Opnds) ->
    case Opnds of
        {{rm32,RM32}} ->
            [247|encode_rm(RM32, Opcode, [])];
        {{rm64,RM64}} ->
            [rex([{w,1}]),247|encode_rm(RM64, Opcode, [])]
    end.

enter_encode({{imm16,Imm16},{imm8,Imm8}}) ->
    [200|le16(Imm16, [Imm8])].

enter_sizeof({{imm16,_},{imm8,_}}) ->
    1 + 2 + 1.

imul_encode(Opnds) ->
    case Opnds of
        {{rm32,RM32}} ->
            [247|encode_rm(RM32, 5, [])];
        {{rm64,RM64}} ->
            [rex([{w,1}]),247|encode_rm(RM64, 5, [])];
        {{reg32,Reg32},{rm32,RM32}} ->
            [15,175|encode_rm(RM32, Reg32, [])];
        {{reg64,Reg64},{rm64,RM64}} ->
            [rex([{w,1}]),15,175|encode_rm(RM64, Reg64, [])];
        {{reg32,Reg32},{rm32,RM32},{imm8,Imm8}} ->
            [107|encode_rm(RM32, Reg32, [Imm8])];
        {{reg64,Reg64},{rm64,RM64},{imm8,Imm8}} ->
            [rex([{w,1}]),107|encode_rm(RM64, Reg64, [Imm8])];
        {{reg32,Reg32},{rm32,RM32},{imm32,Imm32}} ->
            [105|encode_rm(RM32, Reg32, le32(Imm32, []))];
        {{reg64,Reg64},{rm64,RM64},{imm32,Imm32}} ->
            [rex([{w,1}]),105|encode_rm(RM64, Reg64, le32(Imm32, []))]
    end.

jcc_encode(Opnds) ->
    case Opnds of
        {{cc,CC},{rel8,Rel8}} ->
            [112 bor CC,Rel8];
        {{cc,CC},{rel32,Rel32}} ->
            [15,128 bor CC|le32(Rel32, [])]
    end.

jcc_sizeof(Opnds) ->
    case Opnds of
        {{cc,_},{rel8,_}} ->
            2;
        {{cc,_},{rel32,_}} ->
            2 + 4
    end.

jmp8_op_encode(Opcode, {{rel8,Rel8}}) ->
    [Opcode,Rel8].

jmp8_op_sizeof({{rel8,_}}) ->
    2.

jmp_encode(Opnds) ->
    case Opnds of
        {{rel8,Rel8}} ->
            [235,Rel8];
        {{rel32,Rel32}} ->
            [233|le32(Rel32, [])];
        {{rm64,RM64}} ->
            [255|encode_rm(RM64, 4, [])]
    end.

lea_encode({{reg32,Reg32},{ea,EA}}) ->
    [141|enc_ea(EA, Reg32, [])];
lea_encode({{reg64,Reg64},{ea,EA}}) ->
    [rex([{w,1}]),141|enc_ea(EA, Reg64, [])].

mov_encode(Opnds) ->
    case Opnds of
        {{rm8,RM8},{reg8,Reg8}} ->
            [rex([{r8,RM8},{r8,Reg8}]),136|encode_rm(RM8, Reg8, [])];
        {{rm16,RM16},{reg16,Reg16}} ->
            [102,137|encode_rm(RM16, Reg16, [])];
        {{rm32,RM32},{reg32,Reg32}} ->
            [137|encode_rm(RM32, Reg32, [])];
        {{rm64,RM64},{reg64,Reg64}} ->
            [rex([{w,1}]),137|encode_rm(RM64, Reg64, [])];
        {{reg8,Reg8},{rm8,RM8}} ->
            [rex([{r8,RM8},{r8,Reg8}]),138|encode_rm(RM8, Reg8, [])];
        {{reg16,Reg16},{rm16,RM16}} ->
            [102,139|encode_rm(RM16, Reg16, [])];
        {{reg32,Reg32},{rm32,RM32}} ->
            [139|encode_rm(RM32, Reg32, [])];
        {{reg64,Reg64},{rm64,RM64}} ->
            [rex([{w,1}]),139|encode_rm(RM64, Reg64, [])];
        {al,{moffs8,Moffs8}} ->
            [160|le32(Moffs8, [])];
        {ax,{moffs16,Moffs16}} ->
            [102,161|le32(Moffs16, [])];
        {eax,{moffs32,Moffs32}} ->
            [161|le32(Moffs32, [])];
        {rax,{moffs32,Moffs32}} ->
            [rex([{w,1}]),161|le32(Moffs32, [])];
        {{moffs8,Moffs8},al} ->
            [162|le32(Moffs8, [])];
        {{moffs16,Moffs16},ax} ->
            [102,163|le32(Moffs16, [])];
        {{moffs32,Moffs32},eax} ->
            [163|le32(Moffs32, [])];
        {{moffs32,Moffs32},rax} ->
            [rex([{w,1}]),163|le32(Moffs32, [])];
        {{reg8,Reg8},{imm8,Imm8}} ->
            [rex([{b,Reg8},{r8,Reg8}]),176 bor Reg8 band 7,Imm8];
        {{reg16,Reg16},{imm16,Imm16}} ->
            [102,rex([{b,Reg16}]),184 bor Reg16 band 7|le16(Imm16, [])];
        {{reg32,Reg32},{imm32,Imm32}} ->
            [rex([{b,Reg32}]),184 bor Reg32 band 7|le32(Imm32, [])];
        {{reg64,Reg64},{imm64,Imm64}} ->
            [rex([{w,1},{b,Reg64}]),
             184 bor Reg64 band 7|
             le64(Imm64, [])];
        {{rm8,RM8},{imm8,Imm8}} ->
            [rex([{r8,RM8}]),198|encode_rm(RM8, 0, [Imm8])];
        {{rm16,RM16},{imm16,Imm16}} ->
            [102,199|encode_rm(RM16, 0, le16(Imm16, []))];
        {{rm32,RM32},{imm32,Imm32}} ->
            [199|encode_rm(RM32, 0, le32(Imm32, []))];
        {{rm64,RM64},{imm32,Imm32}} ->
            [rex([{w,1}]),199|encode_rm(RM64, 0, le32(Imm32, []))]
    end.

movx_op_encode(Opcode, Opnds) ->
    case Opnds of
        {{reg16,Reg16},{rm8,RM8}} ->
            [102,rex([{r8,RM8}]),15,Opcode|encode_rm(RM8, Reg16, [])];
        {{reg32,Reg32},{rm8,RM8}} ->
            [rex([{r8,RM8}]),15,Opcode|encode_rm(RM8, Reg32, [])];
        {{reg32,Reg32},{rm16,RM16}} ->
            [15,Opcode bor 1|encode_rm(RM16, Reg32, [])];
        {{reg64,Reg64},{rm8,RM8}} ->
            [rex([{w,1}]),15,Opcode|encode_rm(RM8, Reg64, [])];
        {{reg64,Reg64},{rm16,RM16}} ->
            [rex([{w,1}]),15,Opcode bor 1|encode_rm(RM16, Reg64, [])];
        {{reg64,Reg64},{rm32,RM32}} ->
            [rex([{w,1 band (Opcode bsr 3)}]),
             99|
             encode_rm(RM32, Reg64, [])]
    end.

pop_encode(Opnds) ->
    case Opnds of
        {{rm64,RM64}} ->
            [143|encode_rm(RM64, 0, [])];
        {{reg64,Reg64}} ->
            [rex([{b,Reg64}]),88 bor Reg64 band 7]
    end.

push_encode(Opnds) ->
    case Opnds of
        {{rm64,RM64}} ->
            [255|encode_rm(RM64, 6, [])];
        {{reg64,Reg64}} ->
            [rex([{b,Reg64}]),80 bor Reg64 band 7];
        {{imm8,Imm8}} ->
            [106,Imm8];
        {{imm32,Imm32}} ->
            [104|le32(Imm32, [])]
    end.

shift_op_encode(SubOpcode, Opnds) ->
    case Opnds of
        {{rm32,RM32},1} ->
            [209|encode_rm(RM32, SubOpcode, [])];
        {{rm32,RM32},cl} ->
            [211|encode_rm(RM32, SubOpcode, [])];
        {{rm32,RM32},{imm8,Imm8}} ->
            [193|encode_rm(RM32, SubOpcode, [Imm8])];
        {{rm64,RM64},1} ->
            [rex([{w,1}]),209|encode_rm(RM64, SubOpcode, [])];
        {{rm64,RM64},cl} ->
            [rex([{w,1}]),211|encode_rm(RM64, SubOpcode, [])];
        {{rm64,RM64},{imm8,Imm8}} ->
            [rex([{w,1}]),193|encode_rm(RM64, SubOpcode, [Imm8])]
    end.

ret_encode(Opnds) ->
    case Opnds of
        {} ->
            [195];
        {{imm16,Imm16}} ->
            [194|le16(Imm16, [])]
    end.

ret_sizeof(Opnds) ->
    case Opnds of
        {} ->
            1;
        {{imm16,_}} ->
            1 + 2
    end.

setcc_encode({{cc,CC},{rm8,RM8}}) ->
    [rex([{r8,RM8}]),15,144 bor CC|encode_rm(RM8, 0, [])].

shd_op_encode(Opcode, Opnds) ->
    case Opnds of
        {{rm32,RM32},{reg32,Reg32},{imm8,Imm8}} ->
            [15,Opcode|encode_rm(RM32, Reg32, [Imm8])];
        {{rm32,RM32},{reg32,Reg32},cl} ->
            [15,Opcode bor 1|encode_rm(RM32, Reg32, [])]
    end.

test_encode(Opnds) ->
    case Opnds of
        {eax,{imm32,Imm32}} ->
            [169|le32(Imm32, [])];
        {{rm32,RM32},{imm32,Imm32}} ->
            [247|encode_rm(RM32, 0, le32(Imm32, []))];
        {{rm32,RM32},{reg32,Reg32}} ->
            [133|encode_rm(RM32, Reg32, [])]
    end.

fild_encode(Opnds) ->
    {{rm64,RM64}} = Opnds,
    [219|encode_rm(RM64, 0, [])].

fld_encode(Opnds) ->
    case Opnds of
        {{rm64fp,RM64fp}} ->
            [221|encode_rm(RM64fp, 0, [])];
        {{fpst,St}} ->
            [217,192 bor st(St)]
    end.

x87_comm_arith_encode(OpCode, Opnds) ->
    case Opnds of
        {{rm64fp,RM64fp}} ->
            [220|encode_rm(RM64fp, OpCode, [])];
        {{fpst,0},{fpst,St}} ->
            [216,192 bor (OpCode bsl 3) bor st(St)];
        {{fpst,St},{fpst,0}} ->
            [220,192 bor (OpCode bsl 3) bor st(St)]
    end.

x87_comm_arith_pop_encode(OpCode, Opnds) ->
    case Opnds of
        [] ->
            [222,192 bor (OpCode bsl 3) bor st(1)];
        {{fpst,St},{fpst,0}} ->
            [222,192 bor (OpCode bsl 3) bor st(St)]
    end.

x87_arith_encode(OpCode, Opnds) ->
    case Opnds of
        {{rm64fp,RM64fp}} ->
            [220|encode_rm(RM64fp, OpCode, [])];
        {{fpst,0},{fpst,St}} ->
            OpCode0 = OpCode band 6,
            [216,192 bor (OpCode0 bsl 3) bor st(St)];
        {{fpst,St},{fpst,0}} ->
            OpCode0 = OpCode bor 1,
            [220,192 bor (OpCode0 bsl 3) bor st(St)]
    end.

x87_arith_pop_encode(OpCode, Opnds) ->
    OpCode0 = OpCode bor 1,
    case Opnds of
        [] ->
            [222,200 bor (OpCode0 bsl 3) bor st(1)];
        {{fpst,St},{fpst,0}} ->
            [222,200 bor (OpCode0 bsl 3) bor st(St)]
    end.

x87_arith_rev_encode(OpCode, Opnds) ->
    case Opnds of
        {{rm64fp,RM64fp}} ->
            [220|encode_rm(RM64fp, OpCode, [])];
        {{fpst,0},{fpst,St}} ->
            OpCode0 = OpCode bor 1,
            [216,192 bor (OpCode0 bsl 3) bor st(St)];
        {{fpst,St},{fpst,0}} ->
            OpCode0 = OpCode band 6,
            [220,192 bor (OpCode0 bsl 3) bor st(St)]
    end.

x87_arith_rev_pop_encode(OpCode, Opnds) ->
    OpCode0 = OpCode band 6,
    case Opnds of
        [] ->
            [222,192 bor (OpCode0 bsl 3) bor st(1)];
        {{fpst,St},{fpst,0}} ->
            [222,192 bor (OpCode0 bsl 3) bor st(St)]
    end.

fst_encode(OpCode, Opnds) ->
    case Opnds of
        {{rm64fp,RM64fp}} ->
            [221|encode_rm(RM64fp, OpCode, [])];
        {{fpst,St}} ->
            [221,192 bor (OpCode bsl 3) bor st(St)]
    end.

fchs_encode() ->
    [217,224].

fchs_sizeof() ->
    2.

ffree_encode({{fpst,St}}) ->
    [221,192 bor st(St)].

ffree_sizeof() ->
    2.

fwait_encode() ->
    [155].

fwait_sizeof() ->
    1.

fxch_encode(Opnds) ->
    case Opnds of
        [] ->
            [217,200 bor st(1)];
        {{fpst,St}} ->
            [217,200 bor st(St)]
    end.

fxch_sizeof() ->
    2.

insn_encode(Op, Opnds, Offset) ->
    Bytes_and_REX = insn_encode_internal(Op, Opnds),
    Bytes = fix_rex(Bytes_and_REX),
    case has_relocs(Bytes) of
        false ->
            {Bytes,[]};
        _ ->
            fix_relocs(Bytes, Offset, [], [])
    end.

fix_rex(Bytes) ->
    fix_rex(Bytes, 4 bsl 4, []).

fix_rex([{rex,REX}|Rest], REXAcc, Bytes) ->
    fix_rex(Rest, REXAcc bor REX, Bytes);
fix_rex([{{rex,REX},Byte}|Rest], REXAcc, Bytes) ->
    fix_rex(Rest, REXAcc bor REX, [Byte|Bytes]);
fix_rex([Byte|Rest], REXAcc, Bytes) ->
    fix_rex(Rest, REXAcc, [Byte|Bytes]);
fix_rex([], 64, Bytes) ->
    lists:reverse(Bytes);
fix_rex([], REX0, Bytes) ->
    REX = REX0 band 255,
    [Head|Tail] = lists:reverse(Bytes),
    case Head of
        102 ->
            [102,REX|Tail];
        242 ->
            [242,REX|Tail];
        _ ->
            [REX,Head|Tail]
    end.

has_relocs([{le32,_,_}|_]) ->
    true;
has_relocs([{le64,_,_}|_]) ->
    true;
has_relocs([_|Bytes]) ->
    has_relocs(Bytes);
has_relocs([]) ->
    false.

fix_relocs([{le32,Tag,Val}|Bytes], Offset, Code, Relocs) ->
    fix_relocs(Bytes,
               Offset + 4,
               [0,0,0,0|Code],
               [{Tag,Offset,Val}|Relocs]);
fix_relocs([{le64,Tag,Val}|Bytes], Offset, Code, Relocs) ->
    fix_relocs(Bytes,
               Offset + 8,
               [0,0,0,0,0,0,0,0|Code],
               [{Tag,Offset,Val}|Relocs]);
fix_relocs([Byte|Bytes], Offset, Code, Relocs) ->
    fix_relocs(Bytes, Offset + 1, [Byte|Code], Relocs);
fix_relocs([], _Offset, Code, Relocs) ->
    {lists:reverse(Code),lists:reverse(Relocs)}.

insn_encode_internal(Op, Opnds) ->
    case Op of
        adc ->
            arith_binop_encode(2, Opnds);
        add ->
            arith_binop_encode(0, Opnds);
        'and' ->
            arith_binop_encode(4, Opnds);
        bsf ->
            bs_op_encode(188, Opnds);
        'bsr' ->
            bs_op_encode(189, Opnds);
        bswap ->
            bswap_encode(Opnds);
        bt ->
            bt_op_encode(4, Opnds);
        btc ->
            bt_op_encode(7, Opnds);
        btr ->
            bt_op_encode(6, Opnds);
        bts ->
            bt_op_encode(5, Opnds);
        call ->
            call_encode(Opnds);
        cbw ->
            cbw_encode(Opnds);
        cdq ->
            nullary_op_encode(153, Opnds);
        clc ->
            nullary_op_encode(248, Opnds);
        cld ->
            nullary_op_encode(252, Opnds);
        cmc ->
            nullary_op_encode(245, Opnds);
        cmovcc ->
            cmovcc_encode(Opnds);
        cmp ->
            arith_binop_encode(7, Opnds);
        cwde ->
            nullary_op_encode(152, Opnds);
        dec ->
            incdec_encode(1, Opnds);
        'div' ->
            arith_unop_encode(6, Opnds);
        enter ->
            enter_encode(Opnds);
        idiv ->
            arith_unop_encode(7, Opnds);
        imul ->
            imul_encode(Opnds);
        inc ->
            incdec_encode(0, Opnds);
        into ->
            case get(hipe_target_arch) of
                x86 ->
                    nullary_op_encode(206, Opnds);
                amd64 ->
                    exit({invalid_amd64_opcode,hipe_amd64_encode__erl})
            end;
        jcc ->
            jcc_encode(Opnds);
        jecxz ->
            jmp8_op_encode(227, Opnds);
        jmp ->
            jmp_encode(Opnds);
        lea ->
            lea_encode(Opnds);
        leave ->
            nullary_op_encode(201, Opnds);
        loop ->
            jmp8_op_encode(226, Opnds);
        loope ->
            jmp8_op_encode(225, Opnds);
        loopne ->
            jmp8_op_encode(224, Opnds);
        mov ->
            mov_encode(Opnds);
        movsx ->
            movx_op_encode(190, Opnds);
        movzx ->
            movx_op_encode(182, Opnds);
        mul ->
            arith_unop_encode(4, Opnds);
        neg ->
            arith_unop_encode(3, Opnds);
        nop ->
            nullary_op_encode(144, Opnds);
        'not' ->
            arith_unop_encode(2, Opnds);
        'or' ->
            arith_binop_encode(1, Opnds);
        pop ->
            pop_encode(Opnds);
        prefix_fs ->
            nullary_op_encode(100, Opnds);
        push ->
            push_encode(Opnds);
        rcl ->
            shift_op_encode(2, Opnds);
        rcr ->
            shift_op_encode(3, Opnds);
        ret ->
            ret_encode(Opnds);
        rol ->
            shift_op_encode(0, Opnds);
        ror ->
            shift_op_encode(1, Opnds);
        sar ->
            shift_op_encode(7, Opnds);
        sbb ->
            arith_binop_encode(3, Opnds);
        setcc ->
            setcc_encode(Opnds);
        shl ->
            shift_op_encode(4, Opnds);
        shld ->
            shd_op_encode(164, Opnds);
        shr ->
            shift_op_encode(5, Opnds);
        shrd ->
            shd_op_encode(172, Opnds);
        stc ->
            nullary_op_encode(249, Opnds);
        std ->
            nullary_op_encode(253, Opnds);
        sub ->
            arith_binop_encode(5, Opnds);
        test ->
            test_encode(Opnds);
        'xor' ->
            arith_binop_encode(6, Opnds);
        addsd ->
            sse2_arith_binop_encode(242, 88, Opnds);
        cmpsd ->
            sse2_arith_binop_encode(242, 194, Opnds);
        comisd ->
            sse2_arith_binop_encode(102, 47, Opnds);
        cvtsi2sd ->
            sse2_cvtsi2sd_encode(Opnds);
        divsd ->
            sse2_arith_binop_encode(242, 94, Opnds);
        maxsd ->
            sse2_arith_binop_encode(242, 95, Opnds);
        minsd ->
            sse2_arith_binop_encode(242, 93, Opnds);
        movsd ->
            sse2_mov_encode(Opnds);
        mulsd ->
            sse2_arith_binop_encode(242, 89, Opnds);
        sqrtsd ->
            sse2_arith_binop_encode(242, 81, Opnds);
        subsd ->
            sse2_arith_binop_encode(242, 92, Opnds);
        ucomisd ->
            sse2_arith_binop_encode(102, 46, Opnds);
        xorpd ->
            sse2_arith_binop_encode(102, 87, Opnds);
        fadd ->
            x87_comm_arith_encode(0, Opnds);
        faddp ->
            x87_comm_arith_pop_encode(0, Opnds);
        fchs ->
            fchs_encode();
        fdiv ->
            x87_arith_encode(6, Opnds);
        fdivp ->
            x87_arith_pop_encode(6, Opnds);
        fdivr ->
            x87_arith_rev_encode(7, Opnds);
        fdivrp ->
            x87_arith_rev_pop_encode(7, Opnds);
        ffree ->
            ffree_encode(Opnds);
        fild ->
            fild_encode(Opnds);
        fld ->
            fld_encode(Opnds);
        fmul ->
            x87_comm_arith_encode(1, Opnds);
        fmulp ->
            x87_comm_arith_pop_encode(1, Opnds);
        fst ->
            fst_encode(2, Opnds);
        fstp ->
            fst_encode(3, Opnds);
        fsub ->
            x87_arith_encode(4, Opnds);
        fsubp ->
            x87_arith_pop_encode(4, Opnds);
        fsubr ->
            x87_arith_rev_encode(5, Opnds);
        fsubrp ->
            x87_arith_rev_pop_encode(5, Opnds);
        fwait ->
            fwait_encode();
        fxch ->
            fxch_encode(Opnds);
        _ ->
            exit({hipe_amd64_encode,insn_encode,Op})
    end.

insn_sizeof(Op, Opnds) ->
    case Op of
        cbw ->
            cbw_sizeof(Opnds);
        cdq ->
            nullary_op_sizeof(Opnds);
        clc ->
            nullary_op_sizeof(Opnds);
        cld ->
            nullary_op_sizeof(Opnds);
        cmc ->
            nullary_op_sizeof(Opnds);
        cwde ->
            nullary_op_sizeof(Opnds);
        enter ->
            enter_sizeof(Opnds);
        into ->
            nullary_op_sizeof(Opnds);
        jcc ->
            jcc_sizeof(Opnds);
        jecxz ->
            jmp8_op_sizeof(Opnds);
        leave ->
            nullary_op_sizeof(Opnds);
        loop ->
            jmp8_op_sizeof(Opnds);
        loope ->
            jmp8_op_sizeof(Opnds);
        loopne ->
            jmp8_op_sizeof(Opnds);
        nop ->
            nullary_op_sizeof(Opnds);
        prefix_fs ->
            nullary_op_sizeof(Opnds);
        ret ->
            ret_sizeof(Opnds);
        stc ->
            nullary_op_sizeof(Opnds);
        std ->
            nullary_op_sizeof(Opnds);
        fchs ->
            fchs_sizeof();
        ffree ->
            ffree_sizeof();
        fwait ->
            fwait_sizeof();
        fxch ->
            fxch_sizeof();
        _ ->
            {Bytes,_} = insn_encode(Op, Opnds, 0),
            length(Bytes)
    end.



