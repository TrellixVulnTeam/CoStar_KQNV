-file("test/lib/stdlib/test/erl_internal_SUITE.erl", 1).

-module(erl_internal_SUITE).

-export([all/0,
         suite/0,
         groups/0,
         init_per_suite/1,
         end_per_suite/1,
         init_per_group/2,
         end_per_group/2]).

-export([behav/1]).

-export([init_per_testcase/2,end_per_testcase/2]).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/lib/stdlib/test/erl_internal_SUITE.erl", 29).

suite() ->
    [{ct_hooks,[ts_install_cth]}].

all() ->
    [behav].

groups() ->
    [].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, Config) ->
    Config.

init_per_testcase(_Case, Config) ->
    Dog = test_server:timetrap(test_server:minutes(2)),
    [{watchdog,Dog}|Config].

end_per_testcase(_Case, Config) ->
    Dog = test_server:lookup_config(watchdog, Config),
    test_server:timetrap_cancel(Dog),
    ok.

behav(suite) ->
    [];
behav(doc) ->
    ["Check that the behaviour callbacks are correctly defined"];
behav(_) ->
    check_behav_list([{start,2},{stop,1}],
                     application:behaviour_info(callbacks)),
    check_behav_list([{init,1},
                      {handle_call,3},
                      {handle_cast,2},
                      {handle_info,2},
                      {terminate,2},
                      {code_change,3}],
                     gen_server:behaviour_info(callbacks)),
    check_behav_list([{init,1},
                      {handle_event,3},
                      {handle_sync_event,4},
                      {handle_info,3},
                      {terminate,3},
                      {code_change,4}],
                     gen_fsm:behaviour_info(callbacks)),
    check_behav_list([{init,1},
                      {handle_event,2},
                      {handle_call,2},
                      {handle_info,2},
                      {terminate,2},
                      {code_change,3}],
                     gen_event:behaviour_info(callbacks)),
    check_behav_list([{init,1},{terminate,2}],
                     supervisor_bridge:behaviour_info(callbacks)),
    check_behav_list([{init,1}], supervisor:behaviour_info(callbacks)),
    ok.

check_behav_list([], []) ->
    ok;
check_behav_list([L|L1], L2) ->
    true = lists:member(L, L2),
    L3 = lists:delete(L, L2),
    check_behav_list(L1, L3).



