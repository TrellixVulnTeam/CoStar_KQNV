-file("test/lib/diameter/test/diameter_reg_SUITE.erl", 1).

-module(diameter_reg_SUITE).

-export([suite/0,all/0,groups/0,init_per_suite/1,end_per_suite/1]).

-export([add/1,add_new/1,del/1,repl/1,terms/1,pids/1]).

suite() ->
    [{timetrap,{seconds,60}}].

all() ->
    [{group,all},{group,all,[parallel]}].

groups() ->
    [{all,[],tc()}].

tc() ->
    [add,add_new,del,repl,terms,pids].

init_per_suite(Config) ->
    ok = diameter:start(),
    Config.

end_per_suite(_Config) ->
    ok = diameter:stop().

add(_) ->
    Ref = make_ref(),
    true = diameter_reg:add(Ref),
    true = diameter_reg:add(Ref),
    [{Ref,Pid}] = diameter_reg:match(Ref),
    Pid = self().

add_new(_) ->
    Ref = make_ref(),
    true = diameter_reg:add_new(Ref),
    false = diameter_reg:add_new(Ref).

del(_) ->
    Ref = make_ref(),
    true = diameter_reg:add_new(Ref),
    true = diameter_reg:add_new({Ref}),
    true = diameter_reg:del({Ref}),
    [{Ref,Pid}] = diameter_reg:match(Ref),
    Pid = self().

repl(_) ->
    Ref = make_ref(),
    true = diameter_reg:add_new({Ref}),
    true = diameter_reg:repl({Ref}, Ref),
    false = diameter_reg:add_new(Ref),
    false = diameter_reg:repl({Ref}, Ref),
    [{Ref,Pid}] = diameter_reg:match(Ref),
    Pid = self().

terms(_) ->
    Ref = make_ref(),
    true = diameter_reg:add_new(Ref),
    [[Pid]] =
        [ 
         L ||
             {T,L} <- diameter_reg:terms(),
             T == Ref
        ],
    Pid = self().

pids(_) ->
    Ref = make_ref(),
    true = diameter_reg:add_new(Ref),
    [_|_] =
        [ 
         L ||
             {P,L} <- diameter_reg:pids(),
             P == self()
        ].



