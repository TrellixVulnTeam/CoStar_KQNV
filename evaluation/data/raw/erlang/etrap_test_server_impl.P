-file("test/lib/cosTransactions/test/etrap_test_server_impl.erl", 1).

-module(etrap_test_server_impl).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/orber-3.6.24/include/corba.hrl",
      1).

-record(orb_ImplDef,{node,module,typename,start = start,args = [[]],pid}).

-record(any,{typecode,value}).

-record(fixed,{digits,scale,value}).

-record('IOP_ServiceContext',{context_id,context_data}).

-record('InvalidName',{'OE_ID' = "IDL:omg.org/CORBA/ORB/InvalidName:1.0"}).

-record('UNKNOWN',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('BAD_PARAM',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('NO_MEMORY',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('IMP_LIMIT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('COMM_FAILURE',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('INV_OBJREF',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('NO_PERMISSION',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('INTERNAL',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('MARSHAL',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INITIALIZE',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('NO_IMPLEMENT',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('BAD_TYPECODE',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('BAD_OPERATION',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('NO_RESOURCES',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('NO_RESPONSE',{'OE_ID' = "",
                       minor = 1163001856,
                       completion_status}).

-record('PERSIST_STORE',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('BAD_INV_ORDER',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('TRANSIENT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('FREE_MEM',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INV_IDENT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INV_FLAG',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INTF_REPOS',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('BAD_CONTEXT',{'OE_ID' = "",
                       minor = 1163001856,
                       completion_status}).

-record('OBJ_ADAPTER',{'OE_ID' = "",
                       minor = 1163001856,
                       completion_status}).

-record('DATA_CONVERSION',{'OE_ID' = "",
                           minor = 1163001856,
                           completion_status}).

-record('OBJECT_NOT_EXIST',{'OE_ID' = "",
                            minor = 1163001856,
                            completion_status}).

-record('TRANSACTION_REQUIRED',{'OE_ID' = "",
                                minor = 1163001856,
                                completion_status}).

-record('TRANSACTION_ROLLEDBACK',{'OE_ID' = "",
                                  minor = 1163001856,
                                  completion_status}).

-record('INVALID_TRANSACTION',{'OE_ID' = "",
                               minor = 1163001856,
                               completion_status}).

-record('INV_POLICY',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('CODESET_INCOMPATIBLE',{'OE_ID' = "",
                                minor = 1163001856,
                                completion_status}).

-record('REBIND',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('TIMEOUT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('TRANSACTION_UNAVAILABLE',{'OE_ID' = "",
                                   minor = 1163001856,
                                   completion_status}).

-record('TRANSACTION_MODE',{'OE_ID' = "",
                            minor = 1163001856,
                            completion_status}).

-record('BAD_QOS',{'OE_ID' = "",minor = 1163001856,completion_status}).

-file("test/lib/cosTransactions/test/etrap_test_server_impl.erl", 24).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/orber-3.6.24/include/ifr_types.hrl",
      1).

-record(contained_description,{kind,value}).

-record(structmember,{name,type,type_def}).

-record(unionmember,{name,label,type,type_def}).

-record(container_description,{contained_object,kind,value}).

-record(moduledescription,{name,id,defined_in,version}).

-record(constantdescription,{name,id,defined_in,version,type,value}).

-record(typedescription,{name,id,defined_in,version,type}).

-record(exceptiondescription,{name,id,defined_in,version,type}).

-record(attributedescription,{name,id,defined_in,version,type,mode}).

-record(parameterdescription,{name,type,type_def,mode}).

-record(operationdescription,{name,
                              id,
                              defined_in,
                              version,
                              result,
                              mode,
                              contexts,
                              parameters,
                              exceptions}).

-record(fullinterfacedescription,{name,
                                  id,
                                  defined_in,
                                  version,
                                  operations,
                                  attributes,
                                  base_interfaces,
                                  type}).

-record(interfacedescription,{name,
                              id,
                              defined_in,
                              version,
                              base_interfaces}).

-file("test/lib/cosTransactions/test/etrap_test_server_impl.erl", 25).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosTransactions-1.2.12/src/ETraP_Common.hrl",
      1).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/orber-3.6.24/include/corba.hrl",
      1).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosTransactions-1.2.12/src/ETraP_Common.hrl",
      31).

-file([], 31).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosTransactions-1.2.12/include/CosTransactions.hrl",
      1).

-record('CosTransactions_otid_t',{formatID,bqual_length,tid}).

-record('CosTransactions_TransIdentity',{coord,term,otid}).

-record('CosTransactions_PropagationContext',{timeout,
                                              current,
                                              parents,
                                              implementation_specific_data}).

-record('CosTransactions_HeuristicRollback',{'OE_ID' =
                                                 "IDL:omg.org/CosTransa"
                                                 "ctions/HeuristicRollb"
                                                 "ack:1.0"}).

-record('CosTransactions_HeuristicCommit',{'OE_ID' =
                                               "IDL:omg.org/CosTransact"
                                               "ions/HeuristicCommit:1."
                                               "0"}).

-record('CosTransactions_HeuristicMixed',{'OE_ID' =
                                              "IDL:omg.org/CosTransacti"
                                              "ons/HeuristicMixed:1.0"}).

-record('CosTransactions_HeuristicHazard',{'OE_ID' =
                                               "IDL:omg.org/CosTransact"
                                               "ions/HeuristicHazard:1."
                                               "0"}).

-record('CosTransactions_WrongTransaction',{'OE_ID' =
                                                "IDL:omg.org/CosTransac"
                                                "tions/WrongTransaction"
                                                ":1.0"}).

-record('CosTransactions_SubtransactionsUnavailable',{'OE_ID' =
                                                          "IDL:omg.org/"
                                                          "CosTransacti"
                                                          "ons/Subtrans"
                                                          "actionsUnava"
                                                          "ilable:1.0"}).

-record('CosTransactions_NotSubtransaction',{'OE_ID' =
                                                 "IDL:omg.org/CosTransa"
                                                 "ctions/NotSubtransact"
                                                 "ion:1.0"}).

-record('CosTransactions_Inactive',{'OE_ID' =
                                        "IDL:omg.org/CosTransactions/In"
                                        "active:1.0"}).

-record('CosTransactions_NotPrepared',{'OE_ID' =
                                           "IDL:omg.org/CosTransactions"
                                           "/NotPrepared:1.0"}).

-record('CosTransactions_NoTransaction',{'OE_ID' =
                                             "IDL:omg.org/CosTransactio"
                                             "ns/NoTransaction:1.0"}).

-record('CosTransactions_InvalidControl',{'OE_ID' =
                                              "IDL:omg.org/CosTransacti"
                                              "ons/InvalidControl:1.0"}).

-record('CosTransactions_Unavailable',{'OE_ID' =
                                           "IDL:omg.org/CosTransactions"
                                           "/Unavailable:1.0"}).

-record('CosTransactions_SynchronizationUnavailable',{'OE_ID' =
                                                          "IDL:omg.org/"
                                                          "CosTransacti"
                                                          "ons/Synchron"
                                                          "izationUnava"
                                                          "ilable:1.0"}).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosTransactions-1.2.12/src/ETraP_Common.hrl",
      32).

-file([], 32).

-record(context,{terminator,
                 etrap,
                 recCoord,
                 alarm = infinity,
                 timeout = infinity,
                 parents = [],
                 trid,
                 typeCheck,
                 sub_tr_allowed,
                 hashMax,
                 local,
                 rollback = false,
                 reportH,
                 maxRetries,
                 comFailWait}).

-file("test/lib/cosTransactions/test/etrap_test_server_impl.erl", 27).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosTransactions-1.2.12/include/CosTransactions.hrl",
      1).

-file("test/lib/cosTransactions/test/etrap_test_server_impl.erl", 28).

-export([prepare/2,
         rollback/2,
         commit/2,
         commit_one_phase/2,
         forget/2,
         commit_subtransaction/3,
         rollback_subtransaction/2]).

-export([init/1,terminate/2]).

-export([handle_call/3,handle_cast/2,handle_info/2,code_change/3]).

init(State) ->
    process_flag(trap_exit, true),
    io:format("etrap_test_server:init ~p~n", [State]),
    ok,
    {ok,State}.

terminate(Reason, _State) ->
    io:format("etrap_test_server:terminate ~p~n", [Reason]),
    ok,
    ok.

code_change(_OldVsn, State, _Extra) ->
    {ok,State}.

handle_call(_, _, State) ->
    {noreply,State}.

handle_cast(_, State) ->
    {noreply,State}.

handle_info(_Info, State) ->
    {noreply,State}.

prepare(_Self, State) ->
    case 'ETraP_Common':is_debug_compiled() of
        true ->
            io:format("etrap_test_server:prepare ~p~n", [State]);
        _ ->
            ok
    end,
    action(prepare, State, {reply,'VoteCommit',State}).

rollback(_Self, State) ->
    case 'ETraP_Common':is_debug_compiled() of
        true ->
            io:format("etrap_test_server:rollback ~p~n", [State]);
        _ ->
            ok
    end,
    case sync_test(State) of
        true ->
            action(rollback, State, {reply,ok,State});
        _ ->
            action(rollback, State, {stop,normal,ok,State})
    end.

commit(_Self, State) ->
    case 'ETraP_Common':is_debug_compiled() of
        true ->
            io:format("etrap_test_server:commit ~p~n", [State]);
        _ ->
            ok
    end,
    case sync_test(State) of
        true ->
            action(commit, State, {reply,ok,State});
        _ ->
            action(commit, State, {stop,normal,ok,State})
    end.

commit_one_phase(_Self, State) ->
    case 'ETraP_Common':is_debug_compiled() of
        true ->
            io:format("etrap_test_server:commit_one_phase ~p~n",
                      [State]);
        _ ->
            ok
    end,
    case sync_test(State) of
        true ->
            {reply,ok,State};
        _ ->
            {stop,normal,ok,State}
    end.

forget(_Self, State) ->
    case 'ETraP_Common':is_debug_compiled() of
        true ->
            io:format("etrap_test_server:forget ~p~n", [State]);
        _ ->
            ok
    end,
    case sync_test(State) of
        true ->
            {reply,ok,State};
        _ ->
            {stop,normal,ok,State}
    end.

commit_subtransaction(_Self, State, Parent) ->
    case 'ETraP_Common':is_debug_compiled() of
        true ->
            io:format("etrap_test_server:commit_subtransaction( ~p )~n",
                      [Parent]);
        _ ->
            ok
    end,
    {reply,ok,State}.

rollback_subtransaction(_Self, State) ->
    case 'ETraP_Common':is_debug_compiled() of
        true ->
            io:format("etrap_test_server:rollback_subtransaction()~n",
                      []);
        _ ->
            ok
    end,
    {reply,ok,State}.

action(Key, State, Default) ->
    case catch lists:keysearch(Key, 1, State) of
        {value,{Key,stop_reply,R}} ->
            case sync_test(State) of
                true ->
                    {reply,R,State};
                _ ->
                    {stop,normal,R,State}
            end;
        {value,{Key,reply,R}} ->
            {reply,R,State};
        {value,{Key,exc,E}} ->
            corba:raise(E);
        {value,{Key,delay,Time}} ->
            timer:sleep(Time * 1000),
            Default;
        {value,{Key,Value}} ->
            Value;
        _ ->
            Default
    end.

sync_test(State) ->
    case catch lists:keysearch(sync, 1, State) of
        {value,{sync,true}} ->
            true;
        _ ->
            false
    end.



