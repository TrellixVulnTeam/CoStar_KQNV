-file("test/lib/gs/src/gstk_arc.erl", 1).

-module(gstk_arc).

-compile([{nowarn_deprecated_function,{gs,creation_error,2}}]).

-export([create/3,
         config/3,
         read/3,
         delete/2,
         destroy/3,
         event/5,
         option/5,
         read_option/5]).

-file("test/lib/gs/src/gstk.hrl", 1).

-record(gstkid,{id = undefined,widget,widget_data,owner,parent,objtype}).

-record(so,{main,object,hscroll,vscroll,misc}).

-file("test/lib/gs/src/gstk_arc.erl", 69).

create(DB, GstkId, Opts) ->
    case
        gstk_canvas:pickout_coords(Opts, [], GstkId#gstkid.objtype, 2)
    of
        {error,Error} ->
            gs:creation_error(GstkId, Error);
        {Coords,NewOpts} ->
            Ngstkid = gstk_canvas:upd_gstkid(DB, GstkId, Opts),
            #gstkid{widget = CanvasTkW} = Ngstkid,
            MCmd = [CanvasTkW," create ar ",Coords],
            gstk_canvas:mk_cmd_and_call(NewOpts,
                                        Ngstkid,
                                        CanvasTkW,
                                        MCmd,
                                        DB)
    end.

config(DB, Gstkid, Opts) ->
    gstk_canvas:item_config(DB, Gstkid, Opts).

read(DB, Gstkid, Opt) ->
    Item = Gstkid#gstkid.widget_data,
    gstk_generic:read_option(DB, Gstkid, Opt, [gstk:to_ascii(Item)]).

delete(DB, Gstkid) ->
    gstk_canvas:item_delete_impl(DB, Gstkid).

destroy(_DB, Canvas, Item) ->
    gstk:exec([Canvas," delete ",gstk:to_ascii(Item)]).

event(DB, Gstkid, Etype, Edata, Args) ->
    gstk_generic:event(DB, Gstkid, Etype, Edata, Args).

option(Option, _Gstkid, _Canvas, _DB, _AItem) ->
    case Option of
        {bw,Int} ->
            {s,[" -w ",gstk:to_ascii(Int)]};
        {extent,Degrees} ->
            {s,[" -e ",gstk:to_ascii(Degrees)]};
        {fg,Color} ->
            {s,[" -outline ",gstk:to_color(Color)]};
        {start,Degrees} ->
            {s,[" -start ",gstk:to_ascii(Degrees)]};
        {style,Style} ->
            {s,[" -sty ",gstk:to_ascii(Style)]};
        _ ->
            invalid_option
    end.

read_option(Option, Gstkid, Canvas, _DB, AItem) ->
    case Option of
        bw ->
            tcl2erl:ret_int([Canvas," itemcg ",AItem," -w"]);
        extent ->
            tcl2erl:ret_int([Canvas," itemcg ",AItem," -e"]);
        fg ->
            tcl2erl:ret_color([Canvas," itemcg ",AItem," -outline"]);
        start ->
            tcl2erl:ret_int([Canvas," itemcg ",AItem," -start"]);
        stipple ->
            tcl2erl:ret_stipple([Canvas," itemcg ",AItem," -sti"]);
        style ->
            tcl2erl:ret_atom([Canvas," itemcg ",AItem," -sty"]);
        _ ->
            {bad_result,{Gstkid#gstkid.objtype,invalid_option,Option}}
    end.



