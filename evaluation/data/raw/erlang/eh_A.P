-file("test/lib/common_test/test/ct_event_handler_SUITE_data/eh_A.erl",
      1).

-module(eh_A).

-behaviour(gen_event).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/lib/common_test/test/ct_event_handler_SUITE_data/eh_A.erl",
      30).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/common_test-1.6.3/include/ct_event.hrl",
      1).

-record(event,{name,node,data}).

-file("test/lib/common_test/test/ct_event_handler_SUITE_data/eh_A.erl",
      31).

-export([init/1,
         handle_event/2,
         handle_call/2,
         handle_info/2,
         terminate/2,
         code_change/3]).

-record(state,{cbm = ct_test_support,trace_level = 50}).

init(String = [X|_]) when is_integer(X) ->
    case erl_scan:string(String ++ ".") of
        {ok,Ts,_} ->
            case erl_parse:parse_term(Ts) of
                {ok,Args} ->
                    init(Args);
                _ ->
                    init(String)
            end;
        _ ->
            init(String)
    end;
init(Args) ->
    S1 =
        case lists:keysearch(cbm, 1, Args) of
            {_,{cbm,CBM}} ->
                #state{cbm = CBM};
            _ ->
                #state{}
        end,
    S2 =
        case lists:keysearch(trace_level, 1, Args) of
            {_,{trace_level,Level}} ->
                S1#state{trace_level = Level};
            _ ->
                S1
        end,
    print(S2#state.trace_level, "Event Handler ~w started!~n", [eh_A]),
    {ok,S2}.

handle_event(Event, State = #state{cbm = CBM,trace_level = _Level}) ->
    CBM:handle_event(eh_A, Event),
    {ok,State}.

handle_call(_Req, State) ->
    Reply = ok,
    {ok,Reply,State}.

handle_info(_Info, State) ->
    {ok,State}.

terminate(_Reason, _State) ->
    ok.

code_change(_OldVsn, State, _Extra) ->
    {ok,State}.

print(Level, _Str, _Args) ->
    test_server:format(Level, _Str, _Args).



