-file("test/lib/et/src/et_viewer.erl", 1).

-module(et_viewer).

-export([file/1,
         start/0,
         start/1,
         start/2,
         start_link/1,
         start_link/2,
         open_event/2,
         stop/1,
         get_collector_pid/1]).

-file("test/lib/et/src/../include/et.hrl", 1).

-record(event,{detail_level,trace_ts,event_ts,from,to,label,contents}).

-file("test/lib/et/src/et_viewer.erl", 38).

-file("test/lib/et/src/et_internal.hrl", 1).

-record(filter,{name,function}).

-file("test/lib/et/src/et_viewer.erl", 39).

file(FileName) ->
    start_link([{trace_client,{file,FileName}}], default).

start() ->
    start([{trace_global,true}], default).

start(GUI) when GUI =:= wx; GUI =:= gs; GUI =:= default ->
    start_link([{trace_global,true}], GUI);
start(Options) ->
    start_link([{parent_pid,undefined}|Options], default).

start(Options, GUI) ->
    start_link([{parent_pid,undefined}|Options], GUI).

start_link(GUI) when GUI =:= wx; GUI =:= gs; GUI =:= default ->
    start_link([{trace_global,true}], GUI);
start_link(Options) ->
    start_link(Options, default).

start_link(Options, GUI) ->
    case GUI of
        wx ->
            et_wx_viewer:start_link(Options);
        gs ->
            et_gs_viewer:start_link(Options);
        default ->
            start_link(Options, which_gui())
    end.

which_gui() ->
    try
        wx:new(),
        wx:destroy(),
        wx
    catch
        _:_ ->
            gs
    end.

get_collector_pid(ViewerPid) ->
    call(ViewerPid, get_collector_pid).

stop(ViewerPid) ->
    call(ViewerPid, stop).

open_event(ViewerPid, N) ->
    call(ViewerPid, {open_event,N}).

call(ViewerPid, Request) ->
    gen_server:call(ViewerPid, Request, infinity).



