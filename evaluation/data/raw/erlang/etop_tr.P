-file("test/lib/observer/src/etop_tr.erl", 1).

-module(etop_tr).

-author('siri@erix.ericsson.se').

-export([setup_tracer/1,stop_tracer/1,reader/1]).

-import(etop, [getopt/2]).

-file("test/lib/observer/src/etop_defs.hrl", 1).

-record(opts,{node = node(),
              port = 8415,
              accum = false,
              intv = 5000,
              lines = 10,
              width = 700,
              height = 340,
              sort = runtime,
              tracing = on,
              out_mod = etop_gui,
              out_proc,
              server,
              host,
              tracer,
              store,
              accum_tab,
              remote}).

-file("test/lib/observer/src/etop_tr.erl", 27).

setup_tracer(Config) ->
    TraceNode = getopt(node, Config),
    RHost = rpc:call(TraceNode, net_adm, localhost, []),
    Store = ets:new(etop_tr, [set,public]),
    case whereis(dbg) of
        undefined ->
            case rpc:call(TraceNode, erlang, whereis, [dbg]) of
                undefined ->
                    fine;
                Pid ->
                    exit(Pid, kill)
            end;
        Pid ->
            exit(Pid, kill)
    end,
    dbg:tracer(TraceNode,
               port,
               dbg:trace_port(ip, {getopt(port, Config),5000})),
    dbg:p(all, [running,timestamp]),
    T = dbg:get_tracer(TraceNode),
    Config#opts{tracer = T,host = RHost,store = Store}.

stop_tracer(_Config) ->
    dbg:p(all, clear),
    dbg:stop(),
    ok.

reader(Config) ->
    Host = getopt(host, Config),
    Port = getopt(port, Config),
    {ok,Sock} = gen_tcp:connect(Host, Port, [{active,false}]),
    spawn_link(fun() ->
                      reader_init(Sock, getopt(store, Config), nopid)
               end).

reader_init(Sock, Store, Last) ->
    process_flag(priority, high),
    reader(Sock, Store, Last).

reader(Sock, Store, Last) ->
    Data = get_data(Sock),
    New = handle_data(Last, Data, Store),
    reader(Sock, Store, New).

handle_data(_, {_,Pid,in,_,Time}, _) ->
    {Pid,Time};
handle_data({Pid,Time1}, {_,Pid,out,_,Time2}, Store) ->
    Elapsed = elapsed(Time1, Time2),
    case ets:member(Store, Pid) of
        true ->
            ets:update_counter(Store, Pid, Elapsed);
        false ->
            ets:insert(Store, {Pid,Elapsed})
    end,
    nopid;
handle_data(_W, {drop,D}, _) ->
    io:format("Erlang top dropped data ~p~n", [D]),
    nopid;
handle_data(nopid, {_,_,out,_,_}, _Store) ->
    nopid;
handle_data(_, G, _) ->
    io:format("Erlang top got garbage ~p~n", [G]),
    nopid.

elapsed({Me1,S1,Mi1}, {Me2,S2,Mi2}) ->
    Me = (Me2 - Me1) * 1000000,
    S = (S2 - S1 + Me) * 1000000,
    Mi2 - Mi1 + S.

get_data(Sock) ->
    [Op|BESiz] = my_ip_read(Sock, 5),
    Siz = get_be(BESiz),
    case Op of
        0 ->
            B = list_to_binary(my_ip_read(Sock, Siz)),
            binary_to_term(B);
        1 ->
            {drop,Siz};
        Else ->
            exit({'bad trace tag',Else})
    end.

get_be([A,B,C,D]) ->
    A * 16777216 + B * 65536 + C * 256 + D.

my_ip_read(Sock, N) ->
    case gen_tcp:recv(Sock, N) of
        {ok,Data} ->
            case length(Data) of
                N ->
                    Data;
                X ->
                    Data ++ my_ip_read(Sock, N - X)
            end;
        _Else ->
            exit(eof)
    end.



