-file("test/lib/diameter/src/base/diameter_callback.erl", 1).

-module(diameter_callback).

-export([peer_up/3,
         peer_down/3,
         pick_peer/4,
         prepare_request/3,
         prepare_retransmit/3,
         handle_request/3,
         handle_answer/4,
         handle_error/4]).

-export([peer_up/4,
         peer_down/4,
         pick_peer/5,
         prepare_request/4,
         prepare_retransmit/4,
         handle_request/4,
         handle_answer/5,
         handle_error/5]).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/diameter-1.3/include/diameter.hrl",
      1).

-record(diameter_event,{service,info}).

-record(diameter_packet,{header,avps,msg,bin,errors = [],transport_data}).

-record(diameter_header,{version,
                         length,
                         cmd_code,
                         application_id,
                         hop_by_hop_id,
                         end_to_end_id,
                         is_request,
                         is_proxiable,
                         is_error,
                         is_retransmitted}).

-record(diameter_avp,{code,
                      vendor_id,
                      is_mandatory = false,
                      need_encryption = false,
                      data,
                      name,
                      value,
                      type,
                      index}).

-record(diameter_caps,{origin_host,
                       origin_realm,
                       host_ip_address = [],
                       vendor_id,
                       product_name,
                       origin_state_id = [],
                       supported_vendor_id = [],
                       auth_application_id = [],
                       inband_security_id = [],
                       acct_application_id = [],
                       vendor_specific_application_id = [],
                       firmware_revision = [],
                       avp = []}).

-record(diameter_uri,{type,
                      fqdn,
                      port = 3868,
                      transport = sctp,
                      protocol = diameter}).

-record(diameter_callback,{peer_up,
                           peer_down,
                           pick_peer,
                           prepare_request,
                           prepare_retransmit,
                           handle_request,
                           handle_answer,
                           handle_error,
                           default,
                           extra = []}).

-record(diameter_service,{pid,capabilities,applications = []}).

-record(diameter_app,{alias,
                      dictionary,
                      module,
                      init_state,
                      id,
                      mutable = false,
                      options = [{answer_errors,report}]}).

-file("test/lib/diameter/src/base/diameter_callback.erl", 93).

peer_up(_Svc, _Peer, State) ->
    State.

peer_up(Svc, Peer, State, D) ->
    cb(peer_up, [Svc,Peer,State], D#diameter_callback.peer_up, D).

peer_down(_Svc, _Peer, State) ->
    State.

peer_down(Svc, Peer, State, D) ->
    cb(peer_down, [Svc,Peer,State], D#diameter_callback.peer_down, D).

pick_peer([Peer|_], _, _Svc, _State) ->
    {ok,Peer};
pick_peer([], _, _Svc, _State) ->
    false.

pick_peer(PeersL, PeersR, Svc, State, D) ->
    cb(pick_peer,
       [PeersL,PeersR,Svc,State],
       D#diameter_callback.pick_peer,
       D).

prepare_request(Pkt, _Svc, _Peer) ->
    {send,Pkt}.

prepare_request(Pkt, Svc, Peer, D) ->
    cb(prepare_request,
       [Pkt,Svc,Peer],
       D#diameter_callback.prepare_request,
       D).

prepare_retransmit(Pkt, _Svc, _Peer) ->
    {send,Pkt}.

prepare_retransmit(Pkt, Svc, Peer, D) ->
    cb(prepare_retransmit,
       [Pkt,Svc,Peer],
       D#diameter_callback.prepare_retransmit,
       D).

handle_request(_Pkt, _Svc, _Peer) ->
    {protocol_error,3001}.

handle_request(Pkt, Svc, Peer, D) ->
    cb(handle_request,
       [Pkt,Svc,Peer],
       D#diameter_callback.handle_request,
       D).

handle_answer(#diameter_packet{msg = Ans,errors = []},
              _Req,
              _Svc,
              _Peer) ->
    Ans;
handle_answer(#diameter_packet{msg = Ans,errors = Es},
              _Req,
              _Svc,
              _Peer) ->
    [Ans|Es].

handle_answer(Pkt, Req, Svc, Peer, D) ->
    cb(handle_answer,
       [Pkt,Req,Svc,Peer],
       D#diameter_callback.handle_answer,
       D).

handle_error(Reason, _Req, _Svc, _Peer) ->
    {error,Reason}.

handle_error(Reason, Req, Svc, Peer, D) ->
    cb(handle_error,
       [Reason,Req,Svc,Peer],
       D#diameter_callback.handle_error,
       D).

cb(CB, Args, undefined, D) ->
    cb(CB, Args, D);
cb(CB, Args, false, _) ->
    apply(diameter_callback, CB, Args);
cb(_, Args, F, #diameter_callback{extra = X}) ->
    diameter_lib:eval([[F|X]|Args]).

cb(CB, Args, #diameter_callback{default = undefined}) ->
    apply(diameter_callback, CB, Args);
cb(CB, Args, #diameter_callback{default = M,extra = X}) when is_atom(M) ->
    apply(M, CB, Args ++ X);
cb(CB, Args, #diameter_callback{default = F,extra = X}) ->
    diameter_lib:eval([F,CB,Args|X]).



