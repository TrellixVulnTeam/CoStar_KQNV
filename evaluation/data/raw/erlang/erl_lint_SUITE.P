-file("test/lib/stdlib/test/erl_lint_SUITE.erl", 1).

-module(erl_lint_SUITE).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/lib/stdlib/test/erl_lint_SUITE.erl", 31).

-export([all/0,
         suite/0,
         groups/0,
         init_per_suite/1,
         end_per_suite/1,
         init_per_group/2,
         end_per_group/2,
         init_per_testcase/2,
         end_per_testcase/2]).

-export([unused_vars_warn_basic/1,
         unused_vars_warn_lc/1,
         unused_vars_warn_rec/1,
         unused_vars_warn_fun/1,
         unused_vars_OTP_4858/1,
         export_vars_warn/1,
         shadow_vars/1,
         unused_import/1,
         unused_function/1,
         unsafe_vars/1,
         unsafe_vars2/1,
         unsafe_vars_try/1,
         guard/1,
         otp_4886/1,
         otp_4988/1,
         otp_5091/1,
         otp_5276/1,
         otp_5338/1,
         otp_5362/1,
         otp_5371/1,
         otp_7227/1,
         otp_5494/1,
         otp_5644/1,
         otp_5878/1,
         otp_5917/1,
         otp_6585/1,
         otp_6885/1,
         otp_10436/1,
         otp_11254/1,
         export_all/1,
         bif_clash/1,
         behaviour_basic/1,
         behaviour_multiple/1,
         otp_7550/1,
         otp_8051/1,
         format_warn/1,
         on_load_successful/1,
         on_load_failing/1,
         too_many_arguments/1,
         basic_errors/1,
         bin_syntax_errors/1]).

init_per_testcase(_Case, Config) ->
    Dog = test_server:timetrap(test_server:minutes(1)),
    [{watchdog,Dog}|Config].

end_per_testcase(_Case, _Config) ->
    Dog = test_server:lookup_config(watchdog, _Config),
    test_server:timetrap_cancel(Dog),
    ok.

suite() ->
    [{ct_hooks,[ts_install_cth]}].

all() ->
    [{group,unused_vars_warn},
     export_vars_warn,
     shadow_vars,
     unused_import,
     unused_function,
     unsafe_vars,
     unsafe_vars2,
     unsafe_vars_try,
     guard,
     otp_4886,
     otp_4988,
     otp_5091,
     otp_5276,
     otp_5338,
     otp_5362,
     otp_5371,
     otp_7227,
     otp_5494,
     otp_5644,
     otp_5878,
     otp_5917,
     otp_6585,
     otp_6885,
     otp_10436,
     otp_11254,
     export_all,
     bif_clash,
     behaviour_basic,
     behaviour_multiple,
     otp_7550,
     otp_8051,
     format_warn,
     {group,on_load},
     too_many_arguments,
     basic_errors,
     bin_syntax_errors].

groups() ->
    [{unused_vars_warn,
      [],
      [unused_vars_warn_basic,
       unused_vars_warn_lc,
       unused_vars_warn_rec,
       unused_vars_warn_fun,
       unused_vars_OTP_4858]},
     {on_load,[],[on_load_successful,on_load_failing]}].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, Config) ->
    Config.

unused_vars_warn_basic(doc) ->
    "Warnings for unused variables in some simple cases.";
unused_vars_warn_basic(suite) ->
    [];
unused_vars_warn_basic(Config) when is_list(Config) ->
    Ts =
        [{basic1,
          <<"f(F) -> % F unused.\n                ok.\n\n            f("
            "F, F) ->\n                ok.\n\n            g(_X) ->\n   "
            "             y.\n\n            h(P) ->\n                P."
            "\n\n            x(N) ->\n                case a:b() of\n  "
            "                  [N|Y] -> % Y unused.\n                  "
            "      ok\n                end.\n\n            y(N, L) ->\n"
            "                lists:map(fun(T) -> T*N end, L).\n\n      "
            "      z(N, L) -> % N unused\n                lists:map(fun"
            "(N, T) -> T*N end, L).  % N shadowed.\n\n\n            c(A"
            ") ->\n                case A of\n                    1 -> "
            "B = []; % B unused.\n                    2 -> B = []; % B "
            "unused.\n                    3 -> B = f, B\n              "
            "  end.\n           ">>,
          [warn_unused_vars],
          {warnings,
           [{1,erl_lint,{unused_var,'F'}},
            {15,erl_lint,{unused_var,'Y'}},
            {22,erl_lint,{unused_var,'N'}},
            {23,erl_lint,{shadowed_var,'N','fun'}},
            {28,erl_lint,{unused_var,'B'}},
            {29,erl_lint,{unused_var,'B'}}]}},
         {basic2,
          <<"-record(r, {x,y}).\n              f({X,Y}) -> {Z=X,Z=Y};\n"
            "              f([H|T]) -> [Z=H|Z=T];\n              f(#r{x"
            "=X,y=Y}) -> #r{x=A=X,y=A=Y}.\n              g({M, F}) -> ("
            "Z=M):(Z=F)();\n              g({M, F, Arg}) -> (Z=M):F(Z=A"
            "rg).\n              h(X, Y) -> (Z=X) + (Z=Y).">>,
          [warn_unused_vars],
          []}],
    [] = run(Config, Ts),
    ok.

unused_vars_warn_lc(doc) ->
    "Warnings for unused variables in list comprehensions.";
unused_vars_warn_lc(suite) ->
    [];
unused_vars_warn_lc(Config) when is_list(Config) ->
    Ts =
        [{lc1,
          <<"bin([X]) ->\n                  [A || <<A:X>> <- []]; % X u"
            "sed, not shadowed.\n              bin({X}) ->\n           "
            "       [X || <<X:X>> <- []]; % X used, and shadowed.\n    "
            "          bin({X,Y,Z}) ->\n                  [{A,B} || <<A"
            ":X>> <- Z, <<B:Y>> <- Z];\n              bin([X,Y,Z]) -> %"
            " Y unused.\n                  [C || <<V:X>> <- Z, <<B:V>> "
            "<- Z, <<C:B>> <- Z].\n           ">>,
          [warn_unused_vars],
          {warnings,
           [{4,erl_lint,{shadowed_var,'X',generate}},
            {7,erl_lint,{unused_var,'Y'}}]}},
         {lc2,
          <<"bin([X]) ->\n                  [A || <<A:X>> <- []]; % X u"
            "sed, not shadowed.\n              bin({X}) ->\n           "
            "       [X || <<X:X>> <- []]; % X used, and shadowed.\n    "
            "          bin({X,Y,Z}) ->\n                  [{A,B} || <<A"
            ":X>> <- Z, <<B:Y>> <- Z];\n              bin([X,Y,Z]) -> %"
            " Y unused.\n                  [C || <<V:X>> <- Z, <<B:V>> "
            "<- Z, <<C:B>> <- Z].\n           ">>,
          [warn_unused_vars],
          {warnings,
           [{4,erl_lint,{shadowed_var,'X',generate}},
            {7,erl_lint,{unused_var,'Y'}}]}},
         {lc3,
          <<"a([A]) ->\n                  B = foo,\n                  ["
            "{C,B} || {C,_} <- A];\n              a({A}) ->\n          "
            "        B = foo,\n                  [C || {C,_} <- [B,A]];"
            "\n              a({A,A}) ->\n                  B = foo,\n "
            "                 [C || {C,_} <- B, B < A].\n           ">>,
          [warn_unused_vars],
          []},
         {lc4,
          <<"b(A) ->\n                  B = foo, % B unused.\n         "
            "         [C || {C,_} <- A].\n           ">>,
          [warn_unused_vars],
          {warnings,[{2,erl_lint,{unused_var,'B'}}]}},
         {lc5,
          <<"c(A) ->\n                  B = foo,\n                  [C "
            "|| {C,_} <- A],\n                  B.\n           ">>,
          [warn_unused_vars],
          []},
         {lc6,
          <<"d(A) ->\n                  B = foo,\n                  [{A"
            ",B} || {Id,_} <- A]. % Id unused.\n           ">>,
          [warn_unused_vars],
          {warnings,[{3,erl_lint,{unused_var,'Id'}}]}},
         {lc7,
          <<"e(A) ->\n                  B = foo, % B unused.\n         "
            "         [B || B <- A]. % B shadowed.\n           ">>,
          [warn_unused_vars],
          {warnings,
           [{2,erl_lint,{unused_var,'B'}},
            {3,erl_lint,{shadowed_var,'B',generate}}]}},
         {lc8,
          <<"f(A) ->\n                  B = foo,\n                  [B "
            "|| B <- A], % B shadowed.\n                  B.\n         "
            "  ">>,
          [warn_unused_vars],
          {warnings,[{3,erl_lint,{shadowed_var,'B',generate}}]}},
         {lc9,
          <<"g(A) ->\n                  B = foo, % B unused.\n         "
            "         [A || B <- A]. % B shadowed, B unused.\n         "
            "  ">>,
          [warn_unused_vars],
          {warnings,
           [{2,erl_lint,{unused_var,'B'}},
            {3,erl_lint,{unused_var,'B'}},
            {3,erl_lint,{shadowed_var,'B',generate}}]}},
         {lc10,
          <<"h(A) ->\n                  B = foo,\n                  [A "
            "|| B <- A], % B shadowed, B unused.\n                  B."
            "\n           ">>,
          [warn_unused_vars],
          {warnings,
           [{3,erl_lint,{unused_var,'B'}},
            {3,erl_lint,{shadowed_var,'B',generate}}]}},
         {lc11,
          <<"i(X) ->\n                  [Z || Z <- X, % Z unused.\n    "
            "                    Z = X <- [foo]]. % X and Z shadowed. X"
            " unused!\n           ">>,
          [warn_unused_vars],
          {warnings,
           [{2,erl_lint,{unused_var,'Z'}},
            {3,erl_lint,{unused_var,'X'}},
            {3,erl_lint,{shadowed_var,'X',generate}},
            {3,erl_lint,{shadowed_var,'Z',generate}}]}},
         {lc12,
          <<"j({X}) ->\n                  [Z || Z <- X, % Z unused.\n  "
            "                      Z <- X = [[1,2,3]], % Z shadowed. Z "
            "unused.\n                        Z <- X, % Z shadowed. Z u"
            "nused.\n                        Z <- X]; % Z shadowed.\n  "
            "            j(X) ->\n                  [foo || X <- X, % X"
            " shadowed.\n                        X <-    % X shadowed. "
            "X unused.\n                             X = \n            "
            "                     Y = [[1,2,3]], % Y unused.\n         "
            "               X <- [], % X shadowed.\n                   "
            "     X <- X]. % X shadowed. X unused.\n           ">>,
          [warn_unused_vars],
          {warnings,
           [{2,erl_lint,{unused_var,'Z'}},
            {3,erl_lint,{unused_var,'Z'}},
            {3,erl_lint,{shadowed_var,'Z',generate}},
            {4,erl_lint,{unused_var,'Z'}},
            {4,erl_lint,{shadowed_var,'Z',generate}},
            {5,erl_lint,{shadowed_var,'Z',generate}},
            {7,erl_lint,{shadowed_var,'X',generate}},
            {8,erl_lint,{unused_var,'X'}},
            {8,erl_lint,{shadowed_var,'X',generate}},
            {10,erl_lint,{unused_var,'Y'}},
            {11,erl_lint,{shadowed_var,'X',generate}},
            {12,erl_lint,{unused_var,'X'}},
            {12,erl_lint,{shadowed_var,'X',generate}}]}},
         {lc13,
          <<"k(X) ->\n                  [Z || Z <- Y = X]; % Y unused."
            "\n              k(X) ->\n                  [Z || Z <- X = "
            "Y = X]; % Y unused!\n              k(X) ->\n              "
            "    [Z || Z <- begin X = Y = X, Y end];\n              k(X"
            ") ->\n                  [{Y,W} || W <- Y = X]; % Y unbound"
            "\n              k(X) ->\n                  [Z || Z <- (Y ="
            " X), % Y unused.\n                       Y > X]; % Y unbou"
            "nd.\n              k(X) ->\n                  [Y || Y = X "
            "> 3, Z = X]; % Z unused.\n              k(X) ->\n         "
            "         [Z || Y = X > 3, Z = X]. % Y unused.\n           ">>,
          [warn_unused_vars],
          {error,
           [{8,erl_lint,{unbound_var,'Y'}},
            {11,erl_lint,{unbound_var,'Y'}}],
           [{2,erl_lint,{unused_var,'Y'}},
            {4,erl_lint,{unused_var,'Y'}},
            {8,erl_lint,{unused_var,'Y'}},
            {10,erl_lint,{unused_var,'Y'}},
            {13,erl_lint,{unused_var,'Z'}},
            {15,erl_lint,{unused_var,'Y'}}]}},
         {lc14,
          <<"lc2() ->\n                  Z = [[1],[2],[3]], \n         "
            "         [X || Z <- Z, % Z shadowed.\n                    "
            "    X <- Z].\n           ">>,
          [warn_unused_vars],
          {warnings,[{3,erl_lint,{shadowed_var,'Z',generate}}]}},
         {lc15,
          <<"lc3() ->\n                  Z = [1,2,3], \n               "
            "   [X || X <- Z, \n                        Z <- Z]. % Z sh"
            "adowed. Z unused.\n           ">>,
          [warn_unused_vars],
          {warnings,
           [{4,erl_lint,{unused_var,'Z'}},
            {4,erl_lint,{shadowed_var,'Z',generate}}]}},
         {lc16,
          <<"bin(Z) ->\n                  case bar of\n                "
            "      true ->\n                          U = 2;\n         "
            "             false ->\n                          true\n   "
            "               end,\n                  case bar of\n      "
            "                true ->\n                          X = 2;"
            "\n                      false ->\n                        "
            "  X = 3\n                  end,\n                  case fo"
            "o of\n                      true ->\n                     "
            "     Y = 3; % Y unused.\n                      false ->\n "
            "                         4\n                  end,\n      "
            "            case foo of\n                      1 ->\n     "
            "                     U; % U unsafe.\n                     "
            " 2 ->\n                          [Z || <<U:X>> <- Z]; % (X"
            " exported.) U unused.\n                      3 ->\n       "
            "                   [Z || <<U:X>> <- Z], % (X exported.) U "
            "unused.\n                          U % U unsafe.\n        "
            "          end.\n           ">>,
          [warn_unused_vars],
          {error,
           [{22,erl_lint,{unsafe_var,'U',{'case',2}}},
            {27,erl_lint,{unsafe_var,'U',{'case',2}}}],
           [{16,erl_lint,{unused_var,'Y'}},
            {24,erl_lint,{unused_var,'U'}},
            {26,erl_lint,{unused_var,'U'}}]}},
         {lc17,
          <<"bin(Z) ->\n                  %% This used to pass erl_lint"
            "...\n                  case bar of\n                      "
            "true ->\n                          U = 2;\n               "
            "       false ->\n                          true\n         "
            "         end,\n                  case bar of\n            "
            "          true ->\n                          X = 2;\n     "
            "                 false ->\n                          X = 3"
            "\n                  end,\n                  case foo of\n "
            "                     true ->\n                          Y "
            "= 3; % Y unused.\n                      false ->\n        "
            "                  4\n                  end,\n             "
            "     [Z || <<U:X>> <- Z], % (X exported.) U unused.\n     "
            "             U. % U unsafe.\n           ">>,
          [warn_unused_vars],
          {error,
           [{22,erl_lint,{unsafe_var,'U',{'case',3}}}],
           [{17,erl_lint,{unused_var,'Y'}},
            {21,erl_lint,{unused_var,'U'}}]}},
         {lc18,
          <<"bin(Z) ->\n                  case bar of\n                "
            "      true ->\n                          U = 2;\n         "
            "             false ->\n                          true\n   "
            "               end,\n                  case bar of\n      "
            "                true ->\n                          X = 2;"
            "\n                      false ->\n                        "
            "  X = 3\n                  end,\n                  case fo"
            "o of\n                      true ->\n                     "
            "     Y = 3;\n                      false ->\n             "
            "             4\n                  end,\n                  "
            "[B || <<U: % U unused\n                          U>> <- X,"
            " <<B:Y>> <- Z]. % U unsafe. Y unsafe. \n                  "
            "                                 % U shadowed. (X exported"
            ".)\n           ">>,
          [warn_unused_vars],
          {error,
           [{21,erl_lint,{unsafe_var,'U',{'case',2}}},
            {21,erl_lint,{unsafe_var,'Y',{'case',14}}}],
           [{20,erl_lint,{unused_var,'U'}}]}},
         {lc19,
          <<"p({B,C}) ->\n                  <<A:B,A:C>> = <<17:32>>;\n "
            "             p(B) ->\n                  <<A:B>> = <<17:32>"
            ">. % A unused.\n           ">>,
          [warn_unused_vars],
          {warnings,[{4,erl_lint,{unused_var,'A'}}]}},
         {lc20,
          <<"c({I1,I2}) ->\n                  if\n                     "
            " <<I1:I2>> == <<>> ->\n                          foo\n    "
            "              end;\n              c([C1,C2]) -> % C1 unuse"
            "d.\n                  case foo of\n                      <"
            "<C2:C2,\n                        C3:C2>> -> % C3 unused.\n"
            "                          bar\n                  end.\n\n "
            "          ">>,
          [warn_unused_vars],
          {warnings,
           [{6,erl_lint,{unused_var,'C1'}},
            {7,sys_core_fold,no_clause_match},
            {9,erl_lint,{unused_var,'C3'}}]}},
         {lc21,
          <<"t() ->\n                  S = 8,\n                  case <"
            "<3:8>> of\n                      <<X:S>> ->\n             "
            "             X;\n                      <<S:X>> -> % X unbo"
            "und\n                          foo\n                  end;"
            "\n              t() ->\n                  S = 8,\n        "
            "          case <<3:8>> of\n                      <<S:S>> -"
            ">\n                          S;\n                      <<Q"
            ":32>> -> % Q unused.\n                          foo\n     "
            "             end.\n           ">>,
          [warn_unused_vars],
          {error,
           [{6,erl_lint,{unbound_var,'X'}}],
           [{14,erl_lint,{unused_var,'Q'}}]}}],
    [] = run(Config, Ts),
    ok.

unused_vars_warn_rec(doc) ->
    "Warnings for unused variables in records.";
unused_vars_warn_rec(suite) ->
    [];
unused_vars_warn_rec(Config) when is_list(Config) ->
    Ts =
        [{rec1,
          <<"-record(edge,\n                      {ltpr,\n             "
            "          ltsu,\n                       rtpr,\n           "
            "            rtsu\n                      }).\n\n           "
            "   f1(#edge{ltpr = A, ltsu = A}) ->\n                  tru"
            "e;\n              f1({Q, Q}) ->\n                  true.\n"
            "\n              f2(Edge, Etab) ->\n                  case "
            "gb_trees:lookup(Edge, Etab) of\n                      {val"
            "ue,#edge{ltpr=Same,ltsu=Same}} -> ok;\n                   "
            "   {value,_} -> error\n                  end.\n\n         "
            "     bar(Edge, Etab) ->\n                  case gb_trees:l"
            "ookup(Edge, Etab) of\n                      {Same,Same} ->"
            " ok;\n                      {value,#edge{ltpr=Same}} -> ok"
            "; % Same unused.\n                      {value,_} -> error"
            "\n                  end.\n           ">>,
          [warn_unused_vars],
          {warnings,[{22,erl_lint,{unused_var,'Same'}}]}},
         {rec2,
          <<"-record(r, {a,b}).\n              f(X, Y) -> #r{a=[K || K "
            "<- Y], b=[K || K <- Y]}.\n              g(X, Y) -> #r{a=li"
            "sts:map(fun (K) -> K end, Y),\n                           "
            " b=lists:map(fun (K) -> K end, Y)}.\n              h(X, Y)"
            " -> #r{a=case Y of _ when is_list(Y) -> Y end,\n          "
            "                  b=case Y of _ when is_list(Y) -> Y end}."
            "\n              i(X, Y) -> #r{a=if is_list(Y) -> Y end, b="
            "if is_list(Y) -> Y end}.\n             ">>,
          [warn_unused_vars],
          {warnings,
           [{2,erl_lint,{unused_var,'X'}},
            {3,erl_lint,{unused_var,'X'}},
            {5,erl_lint,{unused_var,'X'}},
            {7,erl_lint,{unused_var,'X'}}]}},
         {rec3,
          <<"-record(r, {a}).\n              t() -> X = 1, #r{a=foo, a="
            "bar, a=qux}.\n             ">>,
          [warn_unused_vars],
          {error,
           [{2,erl_lint,{redefine_field,r,a}},
            {2,erl_lint,{redefine_field,r,a}}],
           [{2,erl_lint,{unused_var,'X'}}]}}],
    [] = run(Config, Ts),
    ok.

unused_vars_warn_fun(doc) ->
    "Warnings for unused variables in records.";
unused_vars_warn_fun(suite) ->
    [];
unused_vars_warn_fun(Config) when is_list(Config) ->
    Ts =
        [{fun1,
          <<"a({A,B}) -> % A unused.\n                  fun(A) -> B end"
            "; % A shadowed. A unused.\n              a([A,B]) ->\n    "
            "              fun(<<A:B>>, % A shadowed. A unused.\n      "
            "                 <<Q:A>>) -> foo % Q unused.\n            "
            "      end;\n              a({A,B,C,D,E}) ->\n             "
            "     fun(E) when C == <<A:A>>, <<17:B>> == D -> % E shadow"
            "ed. E unused.\n                          foo\n            "
            "      end,\n                  E;\n              a([A,B,C,D"
            ",E]) -> % E unused.\n                  fun() ->\n         "
            "                 (C == <<A:A>>) and (<<17:B>> == D)\n     "
            "             end.\n           ">>,
          [warn_unused_vars],
          {warnings,
           [{1,erl_lint,{unused_var,'A'}},
            {2,erl_lint,{unused_var,'A'}},
            {2,erl_lint,{shadowed_var,'A','fun'}},
            {4,erl_lint,{unused_var,'A'}},
            {4,erl_lint,{shadowed_var,'A','fun'}},
            {5,erl_lint,{unused_var,'Q'}},
            {8,erl_lint,{unused_var,'E'}},
            {8,erl_lint,{shadowed_var,'E','fun'}},
            {8,sys_core_fold,useless_building},
            {12,erl_lint,{unused_var,'E'}}]}},
         {fun2,
          <<"u() ->\n                  case foo of\n                   "
            "   true ->\n                          U = 2;\n            "
            "          false ->\n                          true\n      "
            "            end,\n                  fun(U) -> foo end, % U"
            " unused.\n                  U; % U unsafe.\n              "
            "u() ->\n                  case foo of\n                   "
            "   true ->\n                          U = 2;\n            "
            "          false ->\n                          U = 3\n     "
            "             end,\n                  fun(U) -> foo end, % "
            "U shadowed. U unused.\n                  U;\n             "
            " u() ->\n                  case foo of\n                  "
            "    true ->\n                          U = 2; % U unused."
            "\n                      false ->\n                        "
            "  U = 3 % U unused.\n                  end,\n             "
            "     fun(U) -> foo end. % U shadowed. U unused.\n         "
            "  ">>,
          [warn_unused_vars],
          {error,
           [{9,erl_lint,{unsafe_var,'U',{'case',2}}}],
           [{8,erl_lint,{unused_var,'U'}},
            {17,erl_lint,{unused_var,'U'}},
            {17,erl_lint,{shadowed_var,'U','fun'}},
            {22,erl_lint,{unused_var,'U'}},
            {24,erl_lint,{unused_var,'U'}},
            {26,erl_lint,{unused_var,'U'}},
            {26,erl_lint,{shadowed_var,'U','fun'}}]}}],
    [] = run(Config, Ts),
    ok.

unused_vars_OTP_4858(doc) ->
    "Bit syntax, binsize variable used in the same matching.";
unused_vars_OTP_4858(suite) ->
    [];
unused_vars_OTP_4858(Config) when is_list(Config) ->
    Ts =
        [{otp_4858,
          <<"objs(<<Size:4/unit:8, B:Size/binary>>) ->\n               "
            "   B.\n\n              fel(<<Size:4/unit:8, B:BadSize/bina"
            "ry>>) -> % BadSize unbound.\n                  BadSize.   "
            "                             % B, Size unused.\n\n        "
            "      r9c_highlight() -> % B, Rest unused.\n              "
            "   <<Size, B:Size/binary,Rest/binary>> = <<2,\"AB\",3,\"CD"
            "E\">>.\n           ">>,
          [warn_unused_vars],
          {error,
           [{4,erl_lint,{unbound_var,'BadSize'}}],
           [{4,erl_lint,{unused_var,'B'}},
            {4,erl_lint,{unused_var,'Size'}},
            {8,erl_lint,{unused_var,'B'}},
            {8,erl_lint,{unused_var,'Rest'}}]}}],
    [] = run(Config, Ts),
    ok.

export_vars_warn(doc) ->
    "Warnings for exported variables";
export_vars_warn(suite) ->
    [];
export_vars_warn(Config) when is_list(Config) ->
    Ts =
        [{exp1,
          <<"u() ->\n                  case foo of\n                   "
            "   1 ->\n                          A = 1,\n               "
            "           B = 2,\n                          W = 3, % W un"
            "used.\n                          Z = 3; % Z unused.\n     "
            "                 2 ->\n                          B = 2,\n "
            "                         Z = 4 % Z unused.\n              "
            "    end,\n                  case bar of\n                 "
            "     true ->\n                          A = 17, % A unsafe"
            ".\n                          X = 3, % X unused.\n         "
            "                 U = 2,\n                          U;\n   "
            "                   false ->\n                          B ="
            " 19, % B exported.\n                          U = 3; % U u"
            "nused.\n                      foo ->\n                    "
            "      X = 3,\n                          X;\n              "
            "        bar ->\n                          X = 9, % X unuse"
            "d.\n                          U = 14 % U unused.\n        "
            "          end.\n           ">>,
          [warn_unused_vars],
          {error,
           [{14,erl_lint,{unsafe_var,'A',{'case',2}}}],
           [{6,erl_lint,{unused_var,'W'}},
            {7,erl_lint,{unused_var,'Z'}},
            {10,erl_lint,{unused_var,'Z'}},
            {15,erl_lint,{unused_var,'X'}},
            {19,erl_lint,{exported_var,'B',{'case',2}}},
            {20,erl_lint,{unused_var,'U'}},
            {25,erl_lint,{unused_var,'X'}},
            {26,erl_lint,{unused_var,'U'}}]}},
         {exp2,
          <<"bin(A) ->\n                  receive\n                    "
            "  M ->\n                           X = M,\n               "
            "            Y = M,\n                           Z = M\n    "
            "              end,\n                  [B || <<B:X>> <- A],"
            " % X exported.\n                  Y = B, % Y exported. B u"
            "nbound.\n                  [B || B <- Z]. % Z exported. B "
            "shadowed.\n           ">>,
          [warn_export_vars],
          {error,
           [{9,erl_lint,{unbound_var,'B'}}],
           [{8,erl_lint,{exported_var,'X',{'receive',2}}},
            {9,erl_lint,{exported_var,'Y',{'receive',2}}},
            {10,erl_lint,{exported_var,'Z',{'receive',2}}},
            {10,erl_lint,{shadowed_var,'B',generate}}]}},
         {exp3,
          <<"bin(A) ->\n                  receive\n                    "
            "  M ->\n                           X = M,\n               "
            "            Y = M,\n                           Z = M\n    "
            "              end,\n                  [B || <<B:X>> <- A],"
            " % (X exported.)\n                  Y = B, % Y exported. B"
            " unbound.\n                  [B || B <- Z]. % (Z exported."
            ") B shadowed.\n           ">>,
          [],
          {error,
           [{9,erl_lint,{unbound_var,'B'}}],
           [{9,erl_lint,{exported_var,'Y',{'receive',2}}},
            {10,erl_lint,{shadowed_var,'B',generate}}]}}],
    [] = run(Config, Ts),
    ok.

shadow_vars(doc) ->
    "Shadowed variables are tested in other places, but here we test th"
    "at the warning can be turned off.";
shadow_vars(suite) ->
    [];
shadow_vars(Config) when is_list(Config) ->
    Ts =
        [{shadow1,
          <<"bin(A) ->\n                  receive\n                    "
            "  M ->\n                           X = M,\n               "
            "            Y = M,\n                           Z = M\n    "
            "              end,\n                  [B || <<B:X>> <- A],"
            "\n                  Y = B,\n                  [B || B <- Z"
            "]. % B shadowed.\n           ">>,
          [nowarn_shadow_vars],
          {error,
           [{9,erl_lint,{unbound_var,'B'}}],
           [{9,erl_lint,{exported_var,'Y',{'receive',2}}}]}}],
    [] = run(Config, Ts),
    ok.

unused_import(doc) ->
    "Test that the 'warn_unused_import' option works.";
unused_import(suite) ->
    [];
unused_import(Config) when is_list(Config) ->
    Ts =
        [{imp1,
          <<"-import(lists, [map/2,foldl/3]).\n              t(L) ->\n "
            "                map(fun(X) -> 2*X end, L).\n           ">>,
          [warn_unused_import],
          {warnings,[{1,erl_lint,{unused_import,{{foldl,3},lists}}}]}}],
    [] = run(Config, Ts),
    ok.

unused_function(doc) ->
    "Test warnings for unused functions.";
unused_function(suite) ->
    [];
unused_function(Config) when is_list(Config) ->
    Ts =
        [{func1,
          <<"-export([t/1]).\n              t(L) ->\n                 l"
            "ists:map(fun(X) -> 2*X end, L).\n\n              fact(N) -"
            ">\n                fact_1(N, 1).\n\n              fact_1(1"
            ", P) -> P;\n              fact_1(N, P) -> fact_1(N-1, P*N)"
            ".\n           ">>,
          {[]},
          {warnings,
           [{5,erl_lint,{unused_function,{fact,1}}},
            {8,erl_lint,{unused_function,{fact_1,2}}}]}},
         {func2,
          <<"-export([t/1]).\n              t(L) ->\n                 l"
            "ists:map(fun(X) -> 2*X end, L).\n\n              b(X) ->\n"
            "                32*X.\n           ">>,
          {[nowarn_unused_function]},
          []},
         {func3,
          <<"-export([t/1]).\n              -compile(nowarn_unused_func"
            "tion).\n\n              t(L) ->\n                 lists:ma"
            "p(fun(X) -> 2*X end, L).\n\n              b(X) ->\n       "
            "         32*X.\n           ">>,
          {[]},
          []}],
    [] = run(Config, Ts),
    ok.

unsafe_vars(doc) ->
    "OTP-4671. Errors for unsafe variables";
unsafe_vars(suite) ->
    [];
unsafe_vars(Config) when is_list(Config) ->
    Ts =
        [{unsafe1,
          <<"t() ->\n                 (X = true) orelse (Y = false),\n "
            "                 Y.\n           ">>,
          [warn_unused_vars],
          {error,
           [{3,erl_lint,{unsafe_var,'Y',{'orelse',2}}}],
           [{2,erl_lint,{unused_var,'X'}}]}},
         {unsafe2,
          <<"t2() ->\n                  (X = true) orelse (Y = false),"
            "\n                  X.\n           ">>,
          [warn_unused_vars],
          {warnings,[{2,erl_lint,{unused_var,'Y'}}]}},
         {unsafe3,
          <<"t3() ->\n                  (X = true) andalso (Y = false),"
            "\n                  Y.\n           ">>,
          [warn_unused_vars],
          {error,
           [{3,erl_lint,{unsafe_var,'Y',{'andalso',2}}}],
           [{2,erl_lint,{unused_var,'X'}}]}},
         {unsafe4,
          <<"t4() ->\n                  (X = true) andalso (true = X),"
            "\n                  X.\n           ">>,
          [warn_unused_vars],
          []},
         {unsafe5,
          <<"t5() ->\n                  Y = 3,\n                  (X = "
            "true) andalso (X = true),\n                  {X,Y}.\n     "
            "      ">>,
          [warn_unused_vars],
          []},
         {unsafe6,
          <<"t6() ->\n                  X = true,\n                  (X"
            " = true) andalso (true = X),\n                  X.\n      "
            "     ">>,
          [warn_unused_vars],
          []},
         {unsafe7,
          <<"t7() ->\n                  (if true -> X = 3; false -> tru"
            "e end) \n                      andalso (X > 2),\n         "
            "         X.\n           ">>,
          [warn_unused_vars],
          {errors,
           [{3,erl_lint,{unsafe_var,'X',{'if',2}}},
            {4,erl_lint,{unsafe_var,'X',{'if',2}}}],
           []}}],
    [] = run(Config, Ts),
    ok.

unsafe_vars2(doc) ->
    "OTP-4831, seq8202. No warn_unused_vars and unsafe variables";
unsafe_vars2(suite) ->
    [];
unsafe_vars2(Config) when is_list(Config) ->
    Ts =
        [{unsafe2_1,
          <<"foo(State) ->\n                  case State of\n          "
            "            true ->\n                          if\n       "
            "                       false -> ok;\n                     "
            "         true ->  State1=State\n                          "
            "end\n                  end,\n                  State1. % u"
            "nsafe\n           ">>,
          [warn_unused_vars],
          {errors,[{9,erl_lint,{unsafe_var,'State1',{'if',4}}}],[]}},
         {unsafe2_2,
          <<"foo(State) ->\n                  case State of\n          "
            "            true ->\n                          if\n       "
            "                       false -> ok;\n                     "
            "         true ->  State1=State\n                          "
            "end\n                  end,\n                  State1. % u"
            "nsafe\n           ">>,
          [],
          {errors,[{9,erl_lint,{unsafe_var,'State1',{'if',4}}}],[]}}],
    [] = run(Config, Ts),
    ok.

unsafe_vars_try(doc) ->
    "Errors for unsafe variables in try/catch constructs.";
unsafe_vars_try(suite) ->
    [];
unsafe_vars_try(Config) when is_list(Config) ->
    Ts =
        [{unsafe_try1,
          <<"foo2() ->\n                try self()\n                cat"
            "ch\n                  Class:Data -> Result={Class,Data}\n "
            "               end,\n                Result.\n            "
            "  foo3a() ->\n                try self() of\n             "
            "     R -> R\n                catch\n                  Clas"
            "s:Data -> Result={Class,Data}\n                end,\n     "
            "           Result.\n              foo3b() ->\n            "
            "    try self() of\n                  Result -> ok\n       "
            "         catch\n                  Class:Data -> {Class,Dat"
            "a}\n                end,\n                Result.\n       "
            "    ">>,
          [],
          {errors,
           [{6,erl_lint,{unsafe_var,'Result',{'try',2}}},
            {13,erl_lint,{unsafe_var,'Result',{'try',8}}},
            {20,erl_lint,{unsafe_var,'Result',{'try',15}}}],
           []}},
         {unsafe_try2,
          <<"foo1a() ->\n                Try = \n                  try "
            "self()\n                  catch\n                    Class"
            ":Data -> Rc={Class,Data}\n                  after\n       "
            "             Ra=ok\n                  end,\n              "
            "  {Try,Rc,Ra}.\n              foo1b() ->\n                "
            "Try = \n                  try self() of\n                 "
            "   R -> R\n                  catch\n                    Cl"
            "ass:Data -> Rc={Class,Data}\n                  after\n    "
            "                Ra=R\n                  end,\n            "
            "    {Try,Rc,Ra}.\n              foo2() ->\n               "
            " Try = \n                  try self() of\n                "
            "    R -> Ro=R\n                  catch\n                  "
            "  Class:Data -> {Class,Data}\n                  after\n   "
            "                 Ra=R\n                  end,\n           "
            "     {Try,Ro,Ra}.\n              foo3() ->\n              "
            "  Try = \n                  try self() of\n               "
            "     R -> Ro=R\n                  catch\n                 "
            "   Class:Data -> Rc={Class,Data}\n                  after"
            "\n                    Ra=R\n                  end,\n      "
            "          {Try,R,Ro,Rc,Ra}.\n           ">>,
          [],
          {errors,
           [{9,erl_lint,{unsafe_var,'Ra',{'try',3}}},
            {9,erl_lint,{unsafe_var,'Rc',{'try',3}}},
            {17,erl_lint,{unsafe_var,'R',{'try',12}}},
            {19,erl_lint,{unsafe_var,'Ra',{'try',12}}},
            {19,erl_lint,{unsafe_var,'Rc',{'try',12}}},
            {27,erl_lint,{unsafe_var,'R',{'try',22}}},
            {29,erl_lint,{unsafe_var,'Ra',{'try',22}}},
            {29,erl_lint,{unsafe_var,'Ro',{'try',22}}},
            {37,erl_lint,{unsafe_var,'R',{'try',32}}},
            {39,erl_lint,{unsafe_var,'R',{'try',32}}},
            {39,erl_lint,{unsafe_var,'Ra',{'try',32}}},
            {39,erl_lint,{unsafe_var,'Rc',{'try',32}}},
            {39,erl_lint,{unsafe_var,'Ro',{'try',32}}}],
           []}},
         {unsafe_try3,
          <<"foo1(X) ->\n                Try = \n                  try "
            "R=self()\n                  catch\n                    Cla"
            "ss:Data -> Rc={X,R,Class,Data}\n                  end,\n  "
            "              {X,Try,Rc}.\n\t      foo2(X) ->\n           "
            "     Try = \n                  try R=self() of\n          "
            "          RR -> Ro={X,R,RR}\n                  catch\n    "
            "                Class:Data -> {X,R,RR,Ro,Class,Data}\n    "
            "              end,\n                {X,Try,R,RR,Ro,Class,D"
            "ata}.\n\t      foo3(X) ->\n                Try = \n       "
            "           try R=self() of\n                    RR -> {X,R"
            ",RR}\n                  catch\n                    Class:D"
            "ata -> {X,R,RR,Class,Data}\n                  after\n     "
            "               Ra={X,R,RR,Class,Data}\n                  e"
            "nd,\n                {X,Try,R,RR,Ra,Class,Data}.\n        "
            "   ">>,
          [],
          {errors,
           [{5,erl_lint,{unsafe_var,'R',{'try',3}}},
            {7,erl_lint,{unsafe_var,'Rc',{'try',3}}},
            {11,erl_lint,{unsafe_var,'R',{'try',10}}},
            {13,erl_lint,{unbound_var,'RR'}},
            {13,erl_lint,{unbound_var,'Ro'}},
            {13,erl_lint,{unsafe_var,'R',{'try',10}}},
            {15,erl_lint,{unsafe_var,'Class',{'try',10}}},
            {15,erl_lint,{unsafe_var,'Data',{'try',10}}},
            {15,erl_lint,{unsafe_var,'R',{'try',10}}},
            {15,erl_lint,{unsafe_var,'RR',{'try',10}}},
            {15,erl_lint,{unsafe_var,'Ro',{'try',10}}},
            {19,erl_lint,{unsafe_var,'R',{'try',18}}},
            {21,erl_lint,{unbound_var,'RR'}},
            {21,erl_lint,{unsafe_var,'R',{'try',18}}},
            {23,erl_lint,{unsafe_var,'Class',{'try',18}}},
            {23,erl_lint,{unsafe_var,'Data',{'try',18}}},
            {23,erl_lint,{unsafe_var,'R',{'try',18}}},
            {23,erl_lint,{unsafe_var,'RR',{'try',18}}},
            {25,erl_lint,{unsafe_var,'Class',{'try',18}}},
            {25,erl_lint,{unsafe_var,'Data',{'try',18}}},
            {25,erl_lint,{unsafe_var,'R',{'try',18}}},
            {25,erl_lint,{unsafe_var,'RR',{'try',18}}},
            {25,erl_lint,{unsafe_var,'Ra',{'try',18}}}],
           []}},
         {unsafe_try4,
          <<"foo1(X) ->\n                Try = \n                  try "
            "R=self() of\n                    RR -> Ro={X,R,RR}\n      "
            "            catch\n                    Class:Data -> Rc={X"
            ",R,RR,Ro,Class,Data}\n                  after\n           "
            "         Ra={X,R,RR,Ro,Rc,Class,Data}\n                  e"
            "nd,\n                {X,Try,R,RR,Ro,Rc,Ra,Class,Data}.\n  "
            "         ">>,
          [],
          {errors,
           [{4,erl_lint,{unsafe_var,'R',{'try',3}}},
            {6,erl_lint,{unbound_var,'RR'}},
            {6,erl_lint,{unbound_var,'Ro'}},
            {6,erl_lint,{unsafe_var,'R',{'try',3}}},
            {8,erl_lint,{unsafe_var,'Class',{'try',3}}},
            {8,erl_lint,{unsafe_var,'Data',{'try',3}}},
            {8,erl_lint,{unsafe_var,'R',{'try',3}}},
            {8,erl_lint,{unsafe_var,'RR',{'try',3}}},
            {8,erl_lint,{unsafe_var,'Rc',{'try',3}}},
            {8,erl_lint,{unsafe_var,'Ro',{'try',3}}},
            {10,erl_lint,{unsafe_var,'Class',{'try',3}}},
            {10,erl_lint,{unsafe_var,'Data',{'try',3}}},
            {10,erl_lint,{unsafe_var,'R',{'try',3}}},
            {10,erl_lint,{unsafe_var,'RR',{'try',3}}},
            {10,erl_lint,{unsafe_var,'Ra',{'try',3}}},
            {10,erl_lint,{unsafe_var,'Rc',{'try',3}}},
            {10,erl_lint,{unsafe_var,'Ro',{'try',3}}}],
           []}},
         {unsafe_try5,
          <<"bang() ->\n                case 1 of\n                  ni"
            "l ->\n                    Acc = 2;\n                  _ ->"
            "\n                    try\n                      Acc = 3,"
            "\n                      Acc\n                    catch _:_"
            " ->\n                      ok\n                    end\n  "
            "              end,\n                Acc.\n           ">>,
          [],
          {errors,[{13,erl_lint,{unsafe_var,'Acc',{'try',6}}}],[]}}],
    [] = run(Config, Ts),
    ok.

guard(doc) ->
    "OTP-4670. Guards, is_record in particular.";
guard(suite) ->
    [];
guard(Config) when is_list(Config) ->
    Ts =
        [{guard1,
          <<"-record(apa, {}).\n              t(A) when atom(A) ->\n   "
            "               atom;\n              t(A) when binary(A) ->"
            "\n                  binary;\n              t(A) when const"
            "ant(A) ->\n                  constant;\n              t(A)"
            " when float(A) ->\n                  float;\n             "
            " t(A) when function(A) ->\n                  function;\n  "
            "            t(A) when integer(A) ->\n                  int"
            "eger;\n              t(A) when is_atom(A) ->\n            "
            "      is_atom;\n              t(A) when is_binary(A) ->\n "
            "                 is_binary;\n              t(A) when is_co"
            "nstant(A) ->\n                  is_constant;\n            "
            "  t(A) when is_float(A) ->\n                  is_float;\n "
            "             t(A) when is_function(A) ->\n                "
            "  is_function;\n              t(A) when is_integer(A) ->\n"
            "                  is_integer;\n              t(A) when is_"
            "list(A) ->\n                  is_list;\n              t(A)"
            " when is_number(A) ->\n                  is_number;\n     "
            "         t(A) when is_pid(A) ->\n                  is_pid;"
            "\n              t(A) when is_port(A) ->\n                 "
            " is_port;\n              t(A) when is_record(A, apa) ->\n "
            "                 is_record;\n              t(A) when is_re"
            "cord(A, apa, 1) ->\n                  is_record;\n        "
            "      t(A) when is_reference(A) ->\n                  is_r"
            "eference;\n              t(A) when is_tuple(A) ->\n       "
            "           is_tuple;\n              t(A) when list(A) ->\n"
            "                  list;\n              t(A) when number(A)"
            " ->\n                  number;\n              t(A) when pi"
            "d(A) ->\n                  pid;\n              t(A) when p"
            "ort(A) ->\n                  port;\n              t(A) whe"
            "n record(A, apa) ->\n                  record;\n          "
            "    t(A) when reference(A) ->\n                  reference"
            ";\n              t(A) when tuple(A) ->\n                  "
            "tuple.\n           ">>,
          [nowarn_obsolete_guard],
          {error,
           [{6,erl_lint,illegal_guard_expr},
            {18,erl_lint,illegal_guard_expr}],
           [{18,
             erl_lint,
             {removed,{erlang,is_constant,1},"Removed in R13B"}}]}},
         {guard2,
          <<"-record(apa,{}).\n              t1(A) when atom(A), atom(A"
            ") ->\n                  atom;\n              t1(A) when bi"
            "nary(A), binary(A) ->\n                  binary;\n        "
            "      t1(A) when constant(A), constant(A) ->\n            "
            "      constant;\n              t1(A) when float(A), float("
            "A) ->\n                  float;\n              t1(A) when "
            "function(A), function(A) ->\n                  function;\n"
            "              t1(A) when integer(A), integer(A) ->\n      "
            "            integer;\n              t1(A) when is_atom(A),"
            " is_atom(A) ->\n                  is_atom;\n              "
            "t1(A) when is_binary(A), is_binary(A) ->\n                "
            "  is_binary;\n              t1(A) when is_constant(A), is_"
            "constant(A) ->\n                  is_constant;\n          "
            "    t1(A) when is_float(A), is_float(A) ->\n              "
            "    is_float;\n              t1(A) when is_function(A), is"
            "_function(A) ->\n                  is_function;\n         "
            "     t1(A) when is_integer(A), is_integer(A) ->\n         "
            "         is_integer;\n              t1(A) when is_list(A),"
            " is_list(A) ->\n                  is_list;\n              "
            "t1(A) when is_number(A), is_number(A) ->\n                "
            "  is_number;\n              t1(A) when is_pid(A), is_pid(A"
            ") ->\n                  is_pid;\n              t1(A) when "
            "is_port(A), is_port(A) ->\n                  is_port;\n   "
            "           t1(A) when is_record(A, apa), is_record(A, apa)"
            " ->\n                  is_record;\n              t1(A) whe"
            "n is_record(A, apa, 1), is_record(A, apa, 1) ->\n         "
            "         is_record;\n              t1(A) when is_reference"
            "(A), is_reference(A) ->\n                  is_reference;\n"
            "              t1(A) when is_tuple(A), is_tuple(A) ->\n    "
            "              is_tuple;\n              t1(A) when list(A),"
            " list(A) ->\n                  list;\n              t1(A) "
            "when number(A), number(A) ->\n                  number;\n "
            "             t1(A) when pid(A), pid(A) ->\n               "
            "   pid;\n              t1(A) when port(A), port(A) ->\n   "
            "               port;\n              t1(A) when record(A, a"
            "pa), record(A, apa) ->\n                  record;\n       "
            "       t1(A) when reference(A), reference(A) ->\n         "
            "         reference;\n              t1(A) when tuple(A), tu"
            "ple(A) ->\n                  tuple.\n           ">>,
          [nowarn_obsolete_guard],
          {error,
           [{6,erl_lint,illegal_guard_expr},
            {6,erl_lint,illegal_guard_expr},
            {18,erl_lint,illegal_guard_expr},
            {18,erl_lint,illegal_guard_expr}],
           [{18,
             erl_lint,
             {removed,{erlang,is_constant,1},"Removed in R13B"}},
            {18,
             erl_lint,
             {removed,{erlang,is_constant,1},"Removed in R13B"}}]}},
         {guard3,
          <<"-record(apa,{}).\n              t2(A) when atom(A); atom(A"
            ") ->\n                  atom;\n              t2(A) when bi"
            "nary(A); binary(A) ->\n                  binary;\n        "
            "      t2(A) when float(A); float(A) ->\n                  "
            "float;\n              t2(A) when function(A); function(A) "
            "->\n                  function;\n              t2(A) when "
            "integer(A); integer(A) ->\n                  integer;\n   "
            "           t2(A) when is_atom(A); is_atom(A) ->\n         "
            "         is_atom;\n              t2(A) when is_binary(A); "
            "is_binary(A) ->\n                  is_binary;\n           "
            "   t2(A) when is_float(A); is_float(A) ->\n               "
            "   is_float;\n              t2(A) when is_function(A); is_"
            "function(A) ->\n                  is_function;\n          "
            "    t2(A) when is_integer(A); is_integer(A) ->\n          "
            "        is_integer;\n              t2(A) when is_list(A); "
            "is_list(A) ->\n                  is_list;\n              t"
            "2(A) when is_number(A); is_number(A) ->\n                 "
            " is_number;\n              t2(A) when is_pid(A); is_pid(A)"
            " ->\n                  is_pid;\n              t2(A) when i"
            "s_port(A); is_port(A) ->\n                  is_port;\n    "
            "          t2(A) when is_record(A, apa); is_record(A, apa) "
            "->\n                  is_record;\n              t2(A) when"
            " is_record(A, gurka, 1); is_record(A, gurka, 1) ->\n      "
            "            is_record;\n              t2(A) when is_refere"
            "nce(A); is_reference(A) ->\n                  is_reference"
            ";\n              t2(A) when is_tuple(A); is_tuple(A) ->\n "
            "                 is_tuple;\n              t2(A) when list("
            "A); list(A) ->\n                  list;\n              t2("
            "A) when number(A); number(A) ->\n                  number;"
            "\n              t2(A) when pid(A); pid(A) ->\n            "
            "      pid;\n              t2(A) when port(A); port(A) ->\n"
            "                  port;\n              t2(A) when record(A"
            ", apa); record(A, apa) ->\n                  record;\n    "
            "          t2(A) when reference(A); reference(A) ->\n      "
            "            reference;\n              t2(A) when tuple(A);"
            " tuple(A) ->\n                  tuple.\n           ">>,
          [nowarn_obsolete_guard],
          []},
         {guard4,
          <<"-record(apa, {}).\n              t3(A) when float(A) or fl"
            "oat(A) -> % coercing... (badarg)\n                  float;"
            "\n              t3(A) when is_atom(A) or is_atom(A) ->\n  "
            "                is_atom;\n              t3(A) when is_bina"
            "ry(A) or is_binary(A) ->\n                  is_binary;\n  "
            "            t3(A) when is_float(A) or is_float(A) ->\n    "
            "              is_float;\n              t3(A) when is_funct"
            "ion(A) or is_function(A) ->\n                  is_function"
            ";\n              t3(A) when is_integer(A) or is_integer(A)"
            " ->\n                  is_integer;\n              t3(A) wh"
            "en is_list(A) or is_list(A) ->\n                  is_list;"
            "\n              t3(A) when is_number(A) or is_number(A) ->"
            "\n                  is_number;\n              t3(A) when i"
            "s_pid(A) or is_pid(A) ->\n                  is_pid;\n     "
            "         t3(A) when is_port(A) or is_port(A) ->\n         "
            "         is_port;\n              t3(A) when is_record(A, a"
            "pa) or is_record(A, apa) ->\n                  is_record;"
            "\n              t3(A) when is_record(A, apa, 1) or is_reco"
            "rd(A, apa, 1) ->\n                  is_record;\n          "
            "    t3(A) when is_reference(A) or is_reference(A) ->\n    "
            "              is_reference;\n              t3(A) when is_t"
            "uple(A) or is_tuple(A) ->\n                  is_tuple.\n  "
            "         ">>,
          [nowarn_obsolete_guard],
          []}],
    [] = run(Config, Ts),
    Ts1 =
        [{guard5,
          <<"-record(apa, {}).\n               t3(A) when record(A, {ap"
            "a}) ->\n                   foo;\n               t3(A) when"
            " is_record(A, {apa}) ->\n                   foo;\n        "
            "       t3(A) when erlang:is_record(A, {apa}) ->\n         "
            "          foo;\n               t3(A) when is_record(A, {ap"
            "a}, 1) ->\n                   foo;\n               t3(A) w"
            "hen erlang:is_record(A, {apa}, 1) ->\n                   f"
            "oo;\n               t3(A) when is_record(A, apa, []) ->\n "
            "                  foo;\n               t3(A) when erlang:i"
            "s_record(A, apa, []) ->\n                   foo;\n        "
            "       t3(A) when record(A, apa) ->\n                   fo"
            "o;\n               t3(A) when is_record(A, apa) ->\n      "
            "             foo;\n               t3(A) when erlang:is_rec"
            "ord(A, apa) ->\n                   foo.\n            ">>,
          [warn_unused_vars,nowarn_obsolete_guard],
          {errors,
           [{2,erl_lint,illegal_guard_expr},
            {4,erl_lint,illegal_guard_expr},
            {6,erl_lint,illegal_guard_expr},
            {8,erl_lint,illegal_guard_expr},
            {10,erl_lint,illegal_guard_expr},
            {12,erl_lint,illegal_guard_expr},
            {14,erl_lint,illegal_guard_expr}],
           []}},
         {guard6,
          <<"-record(apa,{a=a,b=foo:bar()}).\n              apa() ->\n "
            "                [X || X <- [], #apa{a = a} == {r,X,foo}];"
            "\n              apa() ->\n                 [X || X <- [], "
            "#apa{b = b} == {r,X,foo}];\n              apa() ->\n      "
            "           [X || X <- [], #ful{a = a} == {r,X,foo}].\n    "
            "        ">>,
          [],
          {errors,[{7,erl_lint,{undefined_record,ful}}],[]}},
         {guard7,
          <<"-record(apa,{}).\n               t() ->\n               [X"
            " || X <- [1,#apa{},3], (3+is_record(X, apa)) or \n        "
            "                                (is_record(X, apa)*2)].\n "
            "           ">>,
          [],
          []},
         {guard8,
          <<"t(A) when erlang:is_foobar(A) -> ok;\n\t      t(A) when A "
            "! ok -> ok;\n\t      t(A) when A ++ [x] -> ok.">>,
          [],
          {errors,
           [{1,erl_lint,illegal_guard_expr},
            {2,erl_lint,illegal_guard_expr},
            {3,erl_lint,illegal_guard_expr}],
           []}}],
    [] = run(Config, Ts1),
    ok.

otp_4886(doc) ->
    "OTP-4886. Calling is_record with given record name.";
otp_4886(suite) ->
    [];
otp_4886(Config) when is_list(Config) ->
    Ts =
        [{otp_4886,
          <<"t() ->\n                  X = {foo},\n                  is"
            "_record(X, foo),\n                  erlang:is_record(X, fo"
            "o),\n                  {erlang,is_record}(X, foo),\n      "
            "            %% Note: is_record/3 does not verify that the "
            "record is defined,\n                  %% so the following "
            "lines should give no errors.\n                  is_record("
            "X, foo, 1),\n                  erlang:is_record(X, foo, 1)"
            ",\n                  {erlang,is_record}(X, foo, 1).\n     "
            "        ">>,
          [],
          {errors,
           [{3,erl_lint,{undefined_record,foo}},
            {4,erl_lint,{undefined_record,foo}},
            {5,erl_lint,{undefined_record,foo}}],
           []}}],
    [] = run(Config, Ts),
    ok.

otp_4988(doc) ->
    "OTP-4988. Error when in-lining non-existent functions.";
otp_4988(suite) ->
    [];
otp_4988(Config) when is_list(Config) ->
    Ts =
        [{otp_4988,
          <<"-compile({inline, [{f,3},{f,4},{f,2},{f,a},{1,foo}]}).\n  "
            "            -compile({inline, {g,1}}).\n              -com"
            "pile({inline, {g,12}}).\n              -compile(inline).\n"
            "              -compile({inline_size,100}).\n\n            "
            "  f(A, B) ->\n                  {g(A), B}.\n\n            "
            "  g(A) ->\n                  {A}.\n             ">>,
          [],
          {errors,
           [{1,erl_lint,{bad_inline,{1,foo}}},
            {1,erl_lint,{bad_inline,{f,3}}},
            {1,erl_lint,{bad_inline,{f,4}}},
            {1,erl_lint,{bad_inline,{f,a}}},
            {3,erl_lint,{bad_inline,{g,12}}}],
           []}}],
    [] = run(Config, Ts),
    ok.

otp_5091(doc) ->
    "OTP-5091. Patterns and the bit syntax: invalid warnings.";
otp_5091(suite) ->
    [];
otp_5091(Config) when is_list(Config) ->
    Ts =
        [{otp_5091_1,
          <<"t() ->\n                 [{Type, Value} || <<Type:16, _Len"
            ":16, \n                                    Value:_Len/bina"
            "ry>> <- []].\n             ">>,
          [],
          []},
         {otp_5091_2,
          <<"t() ->\n                 %% This one has always been handl"
            "ed OK:\n                 <<Type:16, _Len:16, \n           "
            "           Value:_Len/binary>> = <<18:16, 9:16, \"12345678"
            "9\">>,\n                 {Type, Value}.\n             ">>,
          [],
          []},
         {otp_5091_3,
          <<"t() ->\n                 fun(<<Type:16, _Len:16, Value:_Le"
            "n/binary>>) ->\n                     {Type, Value}\n      "
            "           end.\n             ">>,
          [],
          []},
         {otp_5091_4,
          <<"t() ->\n                 L = 8,\n                 F = fun("
            "<<A:L,B:A>>) -> B end,\n                 F(<<16:8, 7:16>>)"
            ".\n             ">>,
          [],
          []},
         {otp_5091_5,
          <<"t() ->\n                 L = 8,\n                 F = fun("
            "<<L: % L shadowed.\n                            L,\n      "
            "                     B:\n                            L>>) "
            "-> B end,\n                 F(<<16:8, 7:16>>).\n          "
            "   ">>,
          [],
          {warnings,[{3,erl_lint,{shadowed_var,'L','fun'}}]}},
         {otp_5091_6,
          <<"t(A) ->\n                 (fun(<<L:16,M:L,N:M>>) -> ok end"
            ")(A).\n             ">>,
          [],
          {warnings,[{2,erl_lint,{unused_var,'N'}}]}},
         {otp_5091_7,
          <<"t() ->\n                  U = 8, \n                  (fun("
            "<<U: % U shadowed.\n                          U>>) -> U en"
            "d)(<<32:8>>).\n             ">>,
          [],
          {warnings,[{3,erl_lint,{shadowed_var,'U','fun'}}]}},
         {otp_5091_8,
          <<"t() ->\n                  [X || <<A:8,\n                  "
            "        B:A>> <- [],\n                        <<X:8>> <- ["
            "B]].\n             ">>,
          [],
          []},
         {otp_5091_9,
          <<"t() ->\n                  L = 8,\n                  F = fu"
            "n(<<L: % Shadow.\n                           L,\n         "
            "                  L:\n                           L,\n     "
            "                      L:\n                           L\n  "
            "                         >>) ->\n                         "
            "     L\n                      end,\n                  F(<<"
            "16:8, 8:16, 32:8>>).\n             ">>,
          [],
          {warnings,[{3,erl_lint,{shadowed_var,'L','fun'}}]}},
         {otp_5091_10,
          <<"t() ->\n                L = 8, <<A:L,B:A>> = <<16:8, 7:16>"
            ">, B.\n             ">>,
          [],
          []},
         {otp_5091_11,
          <<"t() ->\n                fun(<<L:16,L:L,L:L>>) -> ok end.\n"
            "             ">>,
          [],
          []},
         {otp_5091_12,
          <<"t([A,B]) ->\n                 fun(<<A:B>>, % A shadowed an"
            "d unused\n                     <<Q:A>>) -> foo % Q unused."
            " 'outer' A is used.\n                 end.\n             ">>,
          [],
          {warnings,
           [{2,erl_lint,{unused_var,'A'}},
            {2,erl_lint,{shadowed_var,'A','fun'}},
            {3,erl_lint,{unused_var,'Q'}}]}},
         {otp_5091_13,
          <<"t([A,B]) -> % A unused, B unused\n                 fun({A,"
            "B}, % A shadowed, B unused, B shadowed\n                  "
            "   {Q,A}) -> foo % Q unused. 'inner' A is used\n          "
            "       end.\n             ">>,
          [],
          {warnings,
           [{1,erl_lint,{unused_var,'A'}},
            {1,erl_lint,{unused_var,'B'}},
            {2,erl_lint,{unused_var,'B'}},
            {2,erl_lint,{shadowed_var,'A','fun'}},
            {2,erl_lint,{shadowed_var,'B','fun'}},
            {3,erl_lint,{unused_var,'Q'}}]}},
         {otp_5091_14,
          <<"t() ->\n                 A = 4,\n                 fun(<<A:"
            " % shadowed, unused\n                       A>>) -> 2 end."
            "\n             ">>,
          [],
          {warnings,
           [{3,erl_lint,{unused_var,'A'}},
            {3,erl_lint,{shadowed_var,'A','fun'}}]}},
         {otp_5091_15,
          <<"t() ->\n                 A = 4, % unused\n                "
            " fun(<<A:8, % shadowed\n                       16:A>>) -> "
            "2 end.\n             ">>,
          [],
          {warnings,
           [{2,erl_lint,{unused_var,'A'}},
            {3,erl_lint,{shadowed_var,'A','fun'}}]}},
         {otp_5091_16,
          <<"t() ->\n                 A = 4,\n                 fun(<<8:"
            "A, % \n                       A:8>>) -> 7 end. % shadowed,"
            " unused\n             ">>,
          [],
          {warnings,
           [{4,erl_lint,{unused_var,'A'}},
            {4,erl_lint,{shadowed_var,'A','fun'}}]}},
         {otp_5091_17,
          <<"t() ->\n                 L = 16,\n                 fun(<<L"
            ": % shadow\n                       L>>, % 'outer' L\n     "
            "                <<L: % shadow and match\n                 "
            "      L>>) -> % 'outer' L\n                         a\n   "
            "              end.\n             ">>,
          [],
          {warnings,[{3,erl_lint,{shadowed_var,'L','fun'}}]}},
         {otp_5091_18,
          <<"t() ->\n                 L = 4,      % L unused\n         "
            "        fun({L,     % L shadowed\n                      L}"
            ",\n                     {L,\n                      L}) ->"
            "\n                         a\n                 end.\n     "
            "        ">>,
          [],
          {warnings,
           [{2,erl_lint,{unused_var,'L'}},
            {3,erl_lint,{shadowed_var,'L','fun'}}]}},
         {otp_5091_19,
          <<"t() ->\n                 L = 4,\n                 [L || <<"
            "L: % shadowed\n                         L, \n             "
            "            L:\n                         L>> <- []].\n    "
            "         ">>,
          [],
          {warnings,[{3,erl_lint,{shadowed_var,'L',generate}}]}},
         {otp_5091_20,
          <<"t() ->\n                 L = 4, % L unused.\n             "
            "    [1 || L <- []]. % L unused, L shadowed.\n             ">>,
          [],
          {warnings,
           [{2,erl_lint,{unused_var,'L'}},
            {3,erl_lint,{unused_var,'L'}},
            {3,erl_lint,{shadowed_var,'L',generate}}]}},
         {otp_5091_21,
          <<"t() ->\n                 L = 4,\n                 [1 || L "
            "<- [L]]. % L shadowed. L unused.\n             ">>,
          [],
          {warnings,
           [{3,erl_lint,{unused_var,'L'}},
            {3,erl_lint,{shadowed_var,'L',generate}}]}},
         {otp_5091_22,
          <<"t() ->\n                 L = 4, % unused\n                "
            " fun(L) -> L end. % shadowed\n             ">>,
          [],
          {warnings,
           [{2,erl_lint,{unused_var,'L'}},
            {3,erl_lint,{shadowed_var,'L','fun'}}]}},
         {otp_5091_23,<<"t([A,A]) -> a.">>,[],[]},
         {otp_5091_24,<<"t({A,A}) -> a.">>,[],[]},
         {otp_5091_25,
          <<"-record(r, {f1,f2}).\n              t(#r{f1 = A, f2 = A}) "
            "-> a.">>,
          [],
          []}],
    [] = run(Config, Ts),
    ok.

otp_5276(doc) ->
    "OTP-5276. Check the 'deprecated' attributed.";
otp_5276(suite) ->
    [];
otp_5276(Config) when is_list(Config) ->
    Ts =
        [{otp_5276_1,
          <<"-deprecated([{frutt,0,next_version}]).\n             -depr"
            "ecated([{does_not_exist,1}]).\n             -deprecated('f"
            "oo bar').\n             -deprecated(module).\n            "
            " -deprecated([{f,'_'}]).\n             -deprecated([{t,0}]"
            ").\n             -deprecated([{t,'_',eventually}]).\n     "
            "        -deprecated([{'_','_',never}]).\n             -dep"
            "recated([{{badly,formed},1}]).\n             -deprecated(["
            "{'_','_',next_major_release}]).\n             -deprecated("
            "[{atom_to_list,1}]).\n             -export([t/0]).\n      "
            "       frutt() -> ok.\n             t() -> ok.\n          "
            "  ">>,
          {[]},
          {error,
           [{1,erl_lint,{bad_deprecated,{frutt,0}}},
            {2,erl_lint,{bad_deprecated,{does_not_exist,1}}},
            {3,erl_lint,{invalid_deprecated,'foo bar'}},
            {5,erl_lint,{bad_deprecated,{f,'_'}}},
            {8,erl_lint,{invalid_deprecated,{'_','_',never}}},
            {9,erl_lint,{invalid_deprecated,{{badly,formed},1}}},
            {11,erl_lint,{bad_deprecated,{atom_to_list,1}}}],
           [{13,erl_lint,{unused_function,{frutt,0}}}]}}],
    [] = run(Config, Ts),
    ok.

otp_5917(doc) ->
    "OTP-5917. Check the 'deprecated' attributed.";
otp_5917(suite) ->
    [];
otp_5917(Config) when is_list(Config) ->
    Ts =
        [{otp_5917_1,
          <<"-compile(export_all).\n\n             -deprecated({t,0})."
            "\n\n             t() ->\n                 foo.\n          "
            "  ">>,
          {[]},
          []}],
    [] = run(Config, Ts),
    ok.

otp_6585(doc) ->
    "OTP-6585. Check the deprecated guards list/1, pid/1, ....";
otp_6585(suite) ->
    [];
otp_6585(Config) when is_list(Config) ->
    Ts =
        [{otp_6585_1,
          <<"-compile(export_all).\n\n             -record(r, {}).\n\n "
            "            f(A) when list(A) -> list;\n             f(R) "
            "when record(R, r) -> rec;\n             f(P) when pid(P) -"
            "> pid.\n\n             t() ->\n                 f([]).\n  "
            "          ">>,
          [warn_obsolete_guard],
          {warnings,
           [{5,erl_lint,{obsolete_guard,{list,1}}},
            {6,erl_lint,{obsolete_guard,{record,2}}},
            {7,erl_lint,{obsolete_guard,{pid,1}}}]}}],
    [] = run(Config, Ts),
    ok.

otp_5338(doc) ->
    "OTP-5338. Bad warning in record initialization.";
otp_5338(suite) ->
    [];
otp_5338(Config) when is_list(Config) ->
    Ts =
        [{otp_5338,
          <<"-record(c, {a = <<X:7/binary-unit:8>>}).\n              t("
            ") ->\n                  X = <<\"hejsans\">>,\n            "
            "      #c{}.\n            ">>,
          [],
          {error,
           [{1,erl_lint,{unbound_var,'X'}}],
           [{3,erl_lint,{unused_var,'X'}}]}}],
    [] = run(Config, Ts),
    ok.

otp_5362(doc) ->
    "OTP-5362. deprecated_function, {nowarn_unused_funtion,FAs}, 'bette"
    "r' line numbers.";
otp_5362(suite) ->
    [];
otp_5362(Config) when is_list(Config) ->
    Ts =
        [{otp_5362_1,
          <<"-include_lib(\"stdlib/include/qlc.hrl\").\n\n             "
            "-file(?FILE, 1000).\n\n             t() ->\n              "
            "   qlc:q([X || X <- [],\n                             begi"
            "n A = 3, true end]).\n            ">>,
          {[warn_unused_vars]},
          {warnings,
           [{1002,erl_lint,{unused_function,{t,0}}},
            {1004,erl_lint,{unused_var,'A'}}]}},
         {otp_5362_2,
          <<"-export([inline/0]).\n\n             -import(lists, [a/1,b"
            "/1]). % b/1 is not used\n\n             -compile([{inline,"
            "{inl,7}}]).    % undefined\n             -compile([{inline"
            ",[{inl,17}]}]). % undefined\n             -compile([{inlin"
            "e,{inl,1}}]).    % OK\n\n             foop() ->   % unused"
            " function\n                 a([]),  % used import, OK\n   "
            "              fipp(). % undefined\n\n             inline()"
            " ->\n                 inl(foo).\n\n             inl(_) ->"
            "\n                 true.\n\n             not_used() ->    "
            "  % unused function\n                 true.\n\n           "
            "  -compile({nowarn_unused_function,[{and_not_used,2}]}). %"
            " unknown \n             and_not_used(_) -> % unused functi"
            "on\n                 foo.\n\n             -compile({nowarn"
            "_unused_function,{unused_function,2}}).\n             unus"
            "ed_function(_, _) ->\n                 ok.\n           ">>,
          {[warn_unused_vars,warn_unused_import]},
          {error,
           [{5,erl_lint,{bad_inline,{inl,7}}},
            {6,erl_lint,{bad_inline,{inl,17}}},
            {11,erl_lint,{undefined_function,{fipp,0}}},
            {22,erl_lint,{bad_nowarn_unused_function,{and_not_used,2}}}],
           [{3,erl_lint,{unused_import,{{b,1},lists}}},
            {9,erl_lint,{unused_function,{foop,0}}},
            {19,erl_lint,{unused_function,{not_used,0}}},
            {23,erl_lint,{unused_function,{and_not_used,1}}}]}},
         {otp_5362_3,
          <<"-record(a, {x,\n                          x}).\n          "
            "    -record(a, {x,\n                          X}). % erl_p"
            "arse\n              -record(a, [x,\n                      "
            "    x]). % erl_parse\n              -record(ok, {a,b}).\n"
            "\n              -record(r, {a = #ok{}, \n                 "
            "         b = (#ok{})#ok.a}).\n\n              t() ->\n    "
            "              {#a{},\n                   #nix{},\n        "
            "           #ok{nix = []},\n                   #ok{Var = 4}"
            ", \n                   #r{}\n                  }.\n       "
            "    ">>,
          {[nowarn_unused_function]},
          {errors2,
           [{4,erl_parse,"bad record field"},
            {5,erl_parse,"bad record declaration"}],
           [{2,erl_lint,{redefine_field,a,x}},
            {14,erl_lint,{undefined_record,nix}},
            {15,erl_lint,{undefined_field,ok,nix}},
            {16,erl_lint,{field_name_is_variable,ok,'Var'}}]}},
         {otp_5362_4,
          <<"-compile(nowarn_deprecated_function).\n              -comp"
            "ile(nowarn_bif_clash).\n              spawn(A) ->\n       "
            "           erlang:hash(A, 3000),\n                  spawn("
            "A).\n           ">>,
          {[nowarn_unused_function,
            warn_deprecated_function,
            warn_bif_clash]},
          {error,
           [{5,erl_lint,{call_to_redefined_old_bif,{spawn,1}}}],
           [{4,
             erl_lint,
             {deprecated,
              {erlang,hash,2},
              {erlang,phash2,2},
              "in a future release"}}]}},
         {otp_5362_5,
          <<"-compile(nowarn_deprecated_function).\n              -comp"
            "ile(nowarn_bif_clash).\n              spawn(A) ->\n       "
            "           erlang:hash(A, 3000),\n                  spawn("
            "A).\n           ">>,
          {[nowarn_unused_function]},
          {errors,[{2,erl_lint,disallowed_nowarn_bif_clash}],[]}},
         {otp_5362_6,
          <<"-compile({nowarn_deprecated_function,{erlang,hash,2}}).\n "
            "             -compile({nowarn_bif_clash,{spawn,1}}).\n    "
            "          spawn(A) ->\n                  erlang:hash(A, 30"
            "00),\n                  spawn(A).\n           ">>,
          {[nowarn_unused_function,
            warn_deprecated_function,
            warn_bif_clash]},
          {errors,[{2,erl_lint,disallowed_nowarn_bif_clash}],[]}},
         {otp_5362_7,
          <<"-export([spawn/1]).\n              -compile({nowarn_deprec"
            "ated_function,{erlang,hash,2}}).\n              -compile({"
            "nowarn_bif_clash,{spawn,1}}).\n              -compile({now"
            "arn_bif_clash,{spawn,2}}). % bad\n              -compile(["
            "{nowarn_deprecated_function, \n                           "
            "     [{erlang,hash,-1},{3,hash,-1}]}, % 2 bad\n           "
            "          {nowarn_deprecated_function, {{a,b,c},hash,-1}}]"
            "). % bad\n              spawn(A) ->\n                  erl"
            "ang:hash(A, 3000),\n                  spawn(A).\n         "
            "  ">>,
          {[nowarn_unused_function]},
          {error,
           [{3,erl_lint,disallowed_nowarn_bif_clash},
            {4,erl_lint,disallowed_nowarn_bif_clash},
            {4,erl_lint,{bad_nowarn_bif_clash,{spawn,2}}}],
           [{5,erl_lint,{bad_nowarn_deprecated_function,{3,hash,- 1}}},
            {5,
             erl_lint,
             {bad_nowarn_deprecated_function,{erlang,hash,- 1}}},
            {5,
             erl_lint,
             {bad_nowarn_deprecated_function,{{a,b,c},hash,- 1}}}]}},
         {otp_5362_8,
          <<"-export([spawn/1]).\n              -compile(warn_deprecate"
            "d_function).\n              -compile(warn_bif_clash).\n   "
            "           spawn(A) ->\n                  erlang:hash(A, 3"
            "000),\n                  spawn(A).\n           ">>,
          {[nowarn_unused_function,{nowarn_bif_clash,{spawn,1}}]},
          {warnings,
           [{5,
             erl_lint,
             {deprecated,
              {erlang,hash,2},
              {erlang,phash2,2},
              "in a future release"}}]}},
         {otp_5362_9,
          <<"-include_lib(\"stdlib/include/qlc.hrl\").\n              -"
            "record(a, {x = qlc:q([{X,Y} || {X} <- [],{Y} <- [],X =:= Y"
            "])}).\n              -export([t/0]).              \n      "
            "        t() -> #a{}.\n          ">>,
          {[]},
          []},
         {otp_5362_10,
          <<"-compile({nowarn_deprecated_function,{erlang,hash,2}}).\n "
            "             -compile({nowarn_bif_clash,{spawn,1}}).\n    "
            "          -import(x,[spawn/1]).\n              spin(A) ->"
            "\n                  erlang:hash(A, 3000),\n               "
            "   spawn(A).\n           ">>,
          {[nowarn_unused_function,
            warn_deprecated_function,
            warn_bif_clash]},
          {errors,[{2,erl_lint,disallowed_nowarn_bif_clash}],[]}},
         {call_deprecated_function,
          <<"t(X) -> erlang:hash(X, 2000).">>,
          [],
          {warnings,
           [{1,
             erl_lint,
             {deprecated,
              {erlang,hash,2},
              {erlang,phash2,2},
              "in a future release"}}]}},
         {call_removed_function,
          <<"t(X) -> regexp:match(X).">>,
          [],
          {warnings,
           [{1,
             erl_lint,
             {removed,
              {regexp,match,1},
              "removed in R15; use the re module instead"}}]}}],
    [] = run(Config, Ts),
    ok.

otp_5371(doc) ->
    "OTP-5371. Aliases for bit syntax expressions are no longer allowed"
    ".";
otp_5371(suite) ->
    [];
otp_5371(Config) when is_list(Config) ->
    Ts =
        [{otp_5371_1,
          <<"t(<<A:8>> = <<B:8>>) ->\n                  {A,B}.\n       "
            "      ">>,
          [],
          {errors,[{1,erl_lint,illegal_bin_pattern}],[]}},
         {otp_5371_2,
          <<"x([<<A:8>>] = [<<B:8>>]) ->\n                  {A,B}.\n   "
            "           y({a,<<A:8>>} = {b,<<B:8>>}) ->\n              "
            "    {A,B}.\n             ">>,
          [],
          {errors,
           [{1,erl_lint,illegal_bin_pattern},
            {3,erl_lint,illegal_bin_pattern}],
           []}},
         {otp_5371_3,
          <<"-record(foo, {a,b,c}).\n              -record(bar, {x,y,z}"
            ").\n              -record(buzz, {x,y}).\n              a(#"
            "foo{a = <<X:8>>} = #bar{x = <<Y:8>>}) ->\n                "
            "  {X,Y}.\n              b(#foo{b = <<X:8>>} = #foo{b = <<Y"
            ":4,Z:4>>}) ->\n                  {X,Y,Z}.\n              c"
            "(#foo{a = <<X:8>>} = #buzz{x = <<Y:8>>}) ->\n             "
            "     {X,Y}.\n              d(#foo{a=x,b = <<X:8>>} = #buzz"
            "{y = <<Y:8>>}) ->\n                  {X,Y}.\n             "
            " e(#foo{a=x,b = <<X:8>>} = #buzz{x=glurf,y = <<Y:8>>}) ->"
            "\n                  {X,Y}.\n             ">>,
          [],
          {errors,
           [{4,erl_lint,illegal_bin_pattern},
            {6,erl_lint,illegal_bin_pattern},
            {8,erl_lint,illegal_bin_pattern},
            {10,erl_lint,illegal_bin_pattern},
            {12,erl_lint,illegal_bin_pattern}],
           []}},
         {otp_5371_4,
          <<"-record(foo, {a,b,c}).\n              -record(bar, {x,y,z}"
            ").\n              -record(buzz, {x,y}).\n              a(#"
            "foo{a = <<X:8>>,b=x} = #foo{b = <<Y:8>>}) ->\n            "
            "      {X,Y}.\n              b(#foo{a = <<X:8>>} = #bar{y ="
            " <<Y:4,Z:4>>}) ->\n                  {X,Y,Z}.\n           "
            "   c(#foo{a = <<X:8>>} = #buzz{y = <<Y:8>>}) ->\n         "
            "         {X,Y}.\n             ">>,
          [],
          {warnings,
           [{4,v3_core,nomatch},{6,v3_core,nomatch},{8,v3_core,nomatch}]}}],
    [] = run(Config, Ts),
    ok.

otp_7227(doc) ->
    "OTP_7227. Some aliases for bit syntax expressions were still allow"
    "ed.";
otp_7227(Config) when is_list(Config) ->
    Ts =
        [{otp_7227_1,
          <<"t([<<A:8>> = {C,D} = <<B:8>>]) ->\n                  {A,B,"
            "C,D}.\n             ">>,
          [],
          {errors,[{1,erl_lint,illegal_bin_pattern}],[]}},
         {otp_7227_2,
          <<"t([(<<A:8>> = {C,D}) = <<B:8>>]) ->\n                  {A,"
            "B,C,D}.\n             ">>,
          [],
          {errors,[{1,erl_lint,illegal_bin_pattern}],[]}},
         {otp_7227_3,
          <<"t([(<<A:8>> = {C,D}) = (<<B:8>> = <<C:8>>)]) ->\n         "
            "         {A,B,C,D}.\n             ">>,
          [],
          {errors,
           [{1,erl_lint,illegal_bin_pattern},
            {1,erl_lint,illegal_bin_pattern},
            {1,erl_lint,illegal_bin_pattern}],
           []}},
         {otp_7227_4,
          <<"t(Val) ->\n                  <<A:8>> = <<B:8>> = Val,\n   "
            "               {A,B}.\n             ">>,
          [],
          {errors,[{2,erl_lint,illegal_bin_pattern}],[]}},
         {otp_7227_5,
          <<"t(Val) ->\n                  <<A:8>> = X = <<B:8>> = Val,"
            "\n                  {A,B,X}.\n             ">>,
          [],
          {errors,[{2,erl_lint,illegal_bin_pattern}],[]}},
         {otp_7227_6,
          <<"t(X, Y) ->\n                  <<A:8>> = <<X:4,Y:4>>,\n    "
            "              A.\n             ">>,
          [],
          []},
         {otp_7227_7,
          <<"t(Val) ->\n                  (<<A:8>> = X) = (<<B:8>> = <<"
            "A:4,B:4>>) = Val,\n                  {A,B,X}.\n           "
            "  ">>,
          [],
          {errors,
           [{2,erl_lint,illegal_bin_pattern},
            {2,erl_lint,illegal_bin_pattern},
            {2,erl_lint,illegal_bin_pattern}],
           []}},
         {otp_7227_8,
          <<"t(Val) ->\n                  (<<A:8>> = X) = (Y = <<B:8>>)"
            " = Val,\n                  {A,B,X,Y}.\n             ">>,
          [],
          {errors,[{2,erl_lint,illegal_bin_pattern}],[]}},
         {otp_7227_9,
          <<"t(Val) ->\n                  (Z = <<A:8>> = X) = (Y = <<B:"
            "8>> = W) = Val,\n                  {A,B,X,Y,Z,W}.\n       "
            "      ">>,
          [],
          {errors,[{2,erl_lint,illegal_bin_pattern}],[]}}],
    [] = run(Config, Ts),
    ok.

otp_5494(doc) ->
    "OTP-5494. Warnings for functions exported more than once.";
otp_5494(suite) ->
    [];
otp_5494(Config) when is_list(Config) ->
    Ts =
        [{otp_5494_1,
          <<"-export([t/0]).\n              -export([t/0]).\n          "
            "    t() -> a.\n             ">>,
          [],
          {warnings,[{2,erl_lint,{duplicated_export,{t,0}}}]}}],
    [] = run(Config, Ts),
    ok.

otp_5644(doc) ->
    "OTP-5644. M:F/A in record initialization.";
otp_5644(suite) ->
    [];
otp_5644(Config) when is_list(Config) ->
    Ts =
        [{otp_5644,
          <<"-record(c, {a = fun ?MODULE:i/1(17)}).\n              t() "
            "->\n                  #c{}.\n\n              i(X) ->\n    "
            "              X.\n            ">>,
          [],
          []}],
    [] = run(Config, Ts),
    ok.

otp_5878(doc) ->
    "OTP-5878. Record declaration: forward references, introduced varia"
    "bles.";
otp_5878(suite) ->
    [];
otp_5878(Config) when is_list(Config) ->
    Ts =
        [{otp_5878_10,
          <<"-record(rec1, {a = #rec2{}}).\n             -record(rec2, "
            "{a = #rec1{}}).\n             t() ->#rec1{}.\n            ">>,
          [warn_unused_record],
          {error,
           [{1,erl_lint,{undefined_record,rec2}}],
           [{2,erl_lint,{unused_record,rec2}}]}},
         {otp_5878_20,
          <<"-record(r1, {a = begin A = 4, {A,B} end}). % B unbound\n  "
            "            -record(r2, {e = begin A = 3, #r1{} end}).\n  "
            "            t() -> #r2{}.\n             ">>,
          [warn_unused_record],
          {error,
           [{1,erl_lint,{unbound_var,'B'}},
            {1,erl_lint,{variable_in_record_def,'A'}},
            {2,erl_lint,{variable_in_record_def,'A'}}],
           [{1,erl_lint,{unused_record,r1}}]}},
         {otp_5878_30,
          <<"-record(r1, {t = case foo of _ -> 3 end}).\n              "
            "-record(r2, {a = case foo of A -> A; _ -> 3 end}).\n      "
            "        -record(r3, {a = case foo of A -> A end}).\n      "
            "        t() -> {#r1{},#r2{},#r3{}}.\n             ">>,
          [warn_unused_record],
          {errors,
           [{2,erl_lint,{variable_in_record_def,'A'}},
            {3,erl_lint,{variable_in_record_def,'A'}}],
           []}},
         {otp_5878_40,
          <<"-record(r1, {foo = A}). % A unbound\n              -record"
            "(r2, {a = fun(X) -> X end(3)}).\n              -record(r3,"
            " {a = [X || X <- [1,2,3]]}).\n              t() -> {#r1{},"
            "#r2{},#r3{}}.\n             ">>,
          [warn_unused_record],
          {errors,[{1,erl_lint,{unbound_var,'A'}}],[]}},
         {otp_5878_50,
          <<"-record(r1, {a = {A, % A unbound\n                        "
            "        A}}). % A unbound\n              -record(r2, {a = "
            "begin case foo of \n                                      "
            "   A -> A\n                                     end,\n    "
            "                                 A\n                      "
            "          end}).\n              -record(r3, {a = fun(X) ->"
            "\n                                       case foo of\n    "
            "                                       A -> A\n           "
            "                            end\n                         "
            "      end\n                          }).\n              -r"
            "ecord(r4, {a = case foo of\n                              "
            "     foo ->\n                                       case f"
            "oo of\n                                           A -> A\n"
            "                                       end;\n             "
            "                      _ -> \n                             "
            "          bar\n                               end}).\n    "
            "          t() -> {#r1{},#r2{},#r3{},#r4{}}.\n             ">>,
          [warn_unused_record],
          {error,
           [{1,erl_lint,{unbound_var,'A'}},
            {2,erl_lint,{unbound_var,'A'}},
            {4,erl_lint,{variable_in_record_def,'A'}},
            {17,erl_lint,{variable_in_record_def,'A'}}],
           [{8,erl_lint,{unused_var,'X'}}]}},
         {otp_5878_60,
          <<"-record(r1, {a = fun(NotShadowing) -> NotShadowing end})."
            "\n              t() ->\n                  NotShadowing = 1"
            "7,\n                  {#r1{}, NotShadowing}.\n            "
            " ">>,
          [warn_unused_record],
          []},
         {otp_5878_70,
          <<"-record(r1, {a = fun(<<X:8>>) -> X end,\n                 "
            "          b = case <<17:8>> of\n                          "
            "         <<_:Y>> -> Y;\n                                  "
            " <<Y:8>> -> \n                                       Y\n  "
            "                             end}).\n              t() -> "
            "#r1{}.\n             ">>,
          [warn_unused_record],
          {errors,
           [{3,erl_lint,{unbound_var,'Y'}},
            {4,erl_lint,{variable_in_record_def,'Y'}}],
           []}},
         {otp_5878_80,
          <<"-record(r, {a = [X || {A,Y} <- [{1,2},V={3,4}],\n         "
            "                           begin Z = [1,2,3], true end,\n "
            "                                   X <- Z ++ [A,Y]]}).\n  "
            "            t() ->#r{}.\n             ">>,
          [warn_unused_record],
          {warnings,[{1,erl_lint,{unused_var,'V'}}]}},
         {otp_5878_90,
          <<"-record(r, {a = foo()}). % unused\n\n              t() -> "
            "ok.\n             ">>,
          [warn_unused_record],
          {error,
           [{1,erl_lint,{undefined_function,{foo,0}}}],
           [{1,erl_lint,{unused_record,r}}]}}],
    [] = run(Config, Ts),
    Abstr = <<"-module(lint_test, [A, B]).\n            ">>,
    {errors,[{1,erl_lint,pmod_unsupported}],[]} =
        run_test2(Config, Abstr, [warn_unused_record]),
    QLC1 =
        <<"-module(lint_test).\n              -include_lib(\"stdlib/inc"
          "lude/qlc.hrl\").\n              -export([t/0]).\n           "
          "   -record(r1, {a = qlc:e(qlc:q([X || X <- [1,2,3]]))}).\n  "
          "            -record(r2, {a = qlc:q([X || X <- [1,2,3]])}).\n"
          "              -record(r3, {a = qlc:q([X || {A,Y} <- [{1,2},V"
          "={3,4}],\n                                           begin Z"
          " = [1,2,3], true end,\n                                     "
          "      X <- Z ++ [A,Y]])}).\n              t() -> {#r1{},#r2{"
          "},#r3{}}.\n             ">>,
    {error,
     [{8,qlc,{used_generator_variable,'A'}},
      {8,qlc,{used_generator_variable,'Y'}},
      {8,qlc,{used_generator_variable,'Z'}}],
     [{6,erl_lint,{unused_var,'V'}}]} =
        run_test2(Config, QLC1, [warn_unused_record]),
    Ill1 =
        <<"-module(lint_test).\n              -export([t/0]).\n        "
          "      -record(r, {a = true}).\n              -record(r1, {a,"
          "b}).\n              -record(r2, {a = #r1{a = true}}).\n     "
          "         -record(r3, {a = A}). % A is unbound\n             "
          " -record(r4, {a = dict:new()}).\n\n              t() ->\n   "
          "               case x() of\n                      _ when (#r"
          "{})#r.a ->\n                          a; \n                 "
          "     _ when (#r4{})#r.a -> % illegal\n                      "
          "    b;\n                      _ when (#r3{q = 5})#r.a -> % n"
          "o warning for unbound A\n                          q;\n     "
          "                 _ when (#r{q = 5})#r.a ->\n                "
          "          a; \n                      _ when (((#r{a = #r2{}}"
          ")#r.a)#r2.a)#r1.a ->\n                          b;\n        "
          "              _ when #r{a = dict:new()} -> % illegal\n      "
          "                    c; \n                      _ when l() > "
          "3 -> % illegal, does not use l/0...\n                       "
          "   d;\n                      _ ->\n                         "
          " w\n                  end.\n\n              l() ->\n        "
          "          foo.\n\n              x() ->\n                  ba"
          "r.\n              ">>,
    {errors,
     [{6,erl_lint,{unbound_var,'A'}},
      {13,erl_lint,illegal_guard_expr},
      {15,erl_lint,{undefined_field,r3,q}},
      {17,erl_lint,{undefined_field,r,q}},
      {21,erl_lint,illegal_guard_expr},
      {23,erl_lint,{illegal_guard_local_call,{l,0}}}],
     []} =
        run_test2(Config, Ill1, [warn_unused_record]),
    Ill2 =
        <<"-module(lint_test).\n              -export([t/0]).\n        "
          "      t() ->\n                  case x() of\n               "
          "       _ when l() \n                             or\n       "
          "                      l() ->\n                          foo"
          "\n                  end.\n             ">>,
    {errors,
     [{4,erl_lint,{undefined_function,{x,0}}},
      {5,erl_lint,illegal_guard_expr},
      {7,erl_lint,illegal_guard_expr}],
     []} =
        run_test2(Config, Ill2, [warn_unused_record]),
    Ill3 = <<"t() -> ok.">>,
    {errors,[{1,erl_lint,undefined_module}],[]} =
        run_test2(Config, Ill3, [warn_unused_record]),
    Usage1 =
        <<"-module(lint_test).\n                -export([t/0]).\n      "
          "          -record(u1, {a}).\n                -record(u2, {a "
          "= #u1{}}).\n                -record(u3, {a}). % unused\n    "
          "            -record(u4, {a = #u3{}}). % unused\n\n          "
          "      t() ->\n                    {#u2{}}.\n               ">>,
    {warnings,
     [{5,erl_lint,{unused_record,u3}},{6,erl_lint,{unused_record,u4}}]} =
        run_test2(Config, Usage1, [warn_unused_record]),
    Usage2 =
        <<"-module(lint_test).\n                -export([t/0]).\n      "
          "          -record(u1, {a}).\n                -record(u2, {a "
          "= #u1{}}).\n                -file(\"some_file.hrl\", 1).\n  "
          "              -record(u3, {a}). % unused, but on other file"
          "\n                -record(u4, {a = #u3{}}). % -\"-\n\n      "
          "          t() ->\n                    {#u2{}}.\n            "
          "   ">>,
    [] = run_test2(Config, Usage2, [warn_unused_record]),
    QLC2 =
        <<"-module(lint_test).\n              -import(qlc, [q/2]).\n   "
          "           -export([t/0]).\n\n              t() ->\n        "
          "          H1 = qlc:q([X || X <- [1,2]]),\n                  "
          "H2 = qlc:q([X || X <- [1,2]], []),\n                  H3 = q"
          "([X || X <- [1,2]], []),\n                  {H1,H2,H3}.\n   "
          "          ">>,
    {warnings,
     [{6,erl_lint,{missing_qlc_hrl,1}},
      {7,erl_lint,{missing_qlc_hrl,2}},
      {8,erl_lint,{missing_qlc_hrl,2}}]} =
        run_test2(Config, QLC2, [warn_unused_record]),
    UsedByType =
        <<"-module(t).\n                    -export([foo/1]).\n        "
          "            -record(sipurl,  {host :: string()}).\n         "
          "           -record(keylist, {list = [] :: [_]}).\n          "
          "          -type sip_headers() :: #keylist{}.\n              "
          "      -record(request, {uri :: #sipurl{}, header :: sip_head"
          "ers()}).\n\n                    foo(#request{}) -> ok.\n    "
          "              ">>,
    [] = run_test2(Config, UsedByType, [warn_unused_record]),
    ok.

otp_6885(doc) ->
    "OTP-6885. Binary fields in bit syntax matching is now only allowed"
    " at the end.";
otp_6885(suite) ->
    [];
otp_6885(Config) when is_list(Config) ->
    Ts =
        <<"-module(otp_6885).\n            -export([t/1]).\n           "
          " t(<<_/binary,I>>) -> I;\n            t(<<X/binary,I:X>>) ->"
          " I;\n\t    t(<<B/binary,T/binary>>) -> {B,T}.\n\n           "
          " build(A, B) ->\n               <<A/binary,B/binary>>.\n\n  "
          "          foo(<<\"abc\"/binary>>) ->\n               ok;\n  "
          "          foo(<<\"abc\":13/integer>>) ->\n               ok;"
          "\n            foo(<<\"abc\"/float>>) ->\n               ok;"
          "\n            foo(<<\"abc\":19>>) ->\n               ok;\n  "
          "          foo(<<\"abc\"/utf8>>) ->\n               ok;\n    "
          "        foo(<<\"abc\"/utf16>>) ->\n               ok;\n     "
          "       foo(<<\"abc\"/utf32>>) ->\n               ok.\n\n    "
          "       ">>,
    {errors,
     [{3,erl_lint,unsized_binary_not_at_end},
      {4,erl_lint,unsized_binary_not_at_end},
      {5,erl_lint,unsized_binary_not_at_end},
      {10,erl_lint,typed_literal_string},
      {12,erl_lint,typed_literal_string},
      {14,erl_lint,typed_literal_string},
      {16,erl_lint,typed_literal_string}],
     []} =
        run_test2(Config, Ts, []),
    ok.

otp_10436(doc) ->
    "OTP-6885. Warnings for opaque types.";
otp_10436(suite) ->
    [];
otp_10436(Config) when is_list(Config) ->
    Ts =
        <<"-module(otp_10436).\n            -export_type([t1/0]).\n    "
          "        -opaque t1() :: {i, integer()}.\n            -opaque"
          " t2() :: {a, atom()}.\n         ">>,
    {warnings,
     [{4,erl_lint,{not_exported_opaque,{t2,0}}},
      {4,erl_lint,{unused_type,{t2,0}}}]} =
        run_test2(Config, Ts, []),
    Ts2 =
        <<"-module(otp_10436_2).\n             -export_type([t1/0, t2/0"
          "]).\n             -opaque t1() :: term().\n             -opa"
          "que t2() :: any().\n         ">>,
    {warnings,
     [{3,erl_lint,{underspecified_opaque,{t1,0}}},
      {4,erl_lint,{underspecified_opaque,{t2,0}}}]} =
        run_test2(Config, Ts2, []),
    ok.

otp_11254(doc) ->
    "OTP-11254. Warnings for opaque types.";
otp_11254(suite) ->
    [];
otp_11254(Config) when is_list(Config) ->
    Ts =
        <<"-module(p2).\n            -export([manifest/2]).\n          "
          "  manifest(Module, Name) ->\n              fun Module:Nine/1"
          ".\n         ">>,
    {error,
     [{4,erl_lint,{unbound_var,'Nine'}}],
     [{3,erl_lint,{unused_var,'Name'}}]} =
        run_test2(Config, Ts, []),
    ok.

export_all(doc) ->
    "OTP-7392. Warning for export_all.";
export_all(Config) when is_list(Config) ->
    Ts =
        <<"-module(export_all_module).\n            -compile([export_al"
          "l]).\n\n            id(I) -> I.\n           ">>,
    [] = run_test2(Config, Ts, []),
    {warnings,[{2,erl_lint,export_all}]} =
        run_test2(Config, Ts, [warn_export_all]),
    ok.

bif_clash(doc) ->
    "Test warnings for functions that clash with BIFs.";
bif_clash(suite) ->
    [];
bif_clash(Config) when is_list(Config) ->
    Ts =
        [{clash1,
          <<"t(X) ->\n                  size(X).\n\n              %% No"
            " warning for the following calls, since they\n            "
            "  %% are unambigous.\n              b(X) ->\n             "
            "     erlang:size(X).\n\n              c(X) ->\n           "
            "       ?MODULE:size(X).\n\n              size({N,_}) ->\n "
            "               N.\n             ">>,
          [],
          {errors,
           [{2,erl_lint,{call_to_redefined_old_bif,{size,1}}}],
           []}},
         {clash2,
          <<"-export([t/1,size/1]).\n              t(X) ->\n           "
            "       size(X).\n\n              size({N,_}) ->\n         "
            "       N.\n\n              %% My own abs/1 function works "
            "on lists too. From R14 this really works.\n              a"
            "bs([H|T]) when $a =< H, H =< $z -> [H-($a-$A)|abs(T)];\n  "
            "            abs([H|T]) -> [H|abs(T)];\n              abs(["
            "]) -> [];\n              abs(X) -> erlang:abs(X).\n       "
            "      ">>,
          {[nowarn_unused_function,nowarn_bif_clash]},
          {errors,[{erl_lint,disallowed_nowarn_bif_clash}],[]}},
         {clash3,
          <<"-export([size/1]).\n              size({N,_}) ->\n        "
            "        N;\n              size(X) ->\n                erla"
            "ng:size(X).\n             ">>,
          [],
          []},
         {clash4,
          <<"-export([size/1]).\n              size({N,_}) ->\n        "
            "        N;\n              size(X) ->\n                size"
            "(X).\n             ">>,
          [],
          {errors,
           [{5,erl_lint,{call_to_redefined_old_bif,{size,1}}}],
           []}},
         {clash5,
          <<"-export([binary_part/2]).\n              binary_part({B,_}"
            ",{X,Y}) ->\n                binary_part(B,{X,Y});\n       "
            "       binary_part(B,{X,Y}) ->\n                binary:par"
            "t(B,X,Y).\n             ">>,
          [],
          {warnings,
           [{3,erl_lint,{call_to_redefined_bif,{binary_part,2}}}]}},
         {clash6,
          <<"-export([size/1]).\n              -compile({no_auto_import"
            ",[size/1]}).\n              size([]) ->\n                0"
            ";\n              size({N,_}) ->\n                N;\n     "
            "         size([_|T]) ->\n                1+size(T).\n     "
            "        ">>,
          [],
          []},
         {clash7,
          <<"-export([binary_part/2]).\n              -compile({no_auto"
            "_import,[binary_part/2]}).\n              binary_part({B,_"
            "},{X,Y}) ->\n                binary_part(B,{X,Y});\n      "
            "        binary_part(B,{X,Y}) ->\n                binary:pa"
            "rt(B,X,Y).\n             ">>,
          [],
          []},
         {clash8,
          <<"-export([x/1]).\n              -compile({no_auto_import,[b"
            "inary_part/2]}).\n              x(X) when binary_part(X,{1"
            ",2}) =:= <<1,2>> ->\n                 hej.\n              "
            "binary_part({B,_},{X,Y}) ->\n                binary_part(B"
            ",{X,Y});\n              binary_part(B,{X,Y}) ->\n         "
            "       binary:part(B,X,Y).\n             ">>,
          [],
          {errors,
           [{3,erl_lint,{illegal_guard_local_call,{binary_part,2}}}],
           []}},
         {clash9,
          <<"-export([x/1]).\n              -compile({no_auto_import,[b"
            "inary_part/2]}).\n              x(X) ->\n                 "
            "binary_part(X,{1,2}) =:= <<1,2>>.\n             ">>,
          [],
          {errors,
           [{4,erl_lint,{undefined_function,{binary_part,2}}}],
           []}},
         {clash10,
          <<"-export([x/1]).\n              -compile({no_auto_import,[b"
            "inary_part/2]}).\n              -import(erlang,[binary_par"
            "t/2]).\n              x(X) ->\n                 binary_par"
            "t(X,{1,2}) =:= <<1,2>>.\n             ">>,
          [],
          []},
         {clash11,
          <<"-export([x/1]).\n              -compile({no_auto_import,[b"
            "inary_part/2]}).\n              -import(erlang,[binary_par"
            "t/2]).\n              x(X) when binary_part(X,{0,1}) =:= <"
            "<0>> ->\n                 binary_part(X,{1,2}) =:= <<1,2>>"
            ".\n             ">>,
          [],
          []},
         {clash12,
          <<"-export([x/1]).\n              -compile({no_auto_import,[b"
            "inary_part/2]}).\n              -import(erlang,[binary_par"
            "t/2]).\n              x(X) when binary_part(X,{0,1}) =:= <"
            "<0>> ->\n                 binary_part(X,{1,2}) =:= fun bin"
            "ary_part/2.\n             ">>,
          [],
          {errors,
           [{5,erl_lint,{undefined_function,{binary_part,2}}}],
           []}},
         {clash13,
          <<"-export([x/1]).\n              -compile({no_auto_import,[b"
            "inary_part/2]}).\n              -import(x,[binary_part/2])"
            ".\n              x(X) ->\n                 binary_part(X,{"
            "1,2}) =:= fun binary_part/2.\n             ">>,
          [],
          {errors,
           [{5,erl_lint,{undefined_function,{binary_part,2}}}],
           []}},
         {clash14,
          <<"-export([x/1]).\n              x(X) when binary_part(X,{0,"
            "1}) =:= <<0>> ->\n                 binary_part(X,{1,2}) =:"
            "= fun binary_part/2.\n             ">>,
          [],
          []},
         {clash15,
          <<"-export([x/1]).\n              -import(x,[abs/1]).\n      "
            "        x(X) ->\n                 binary_part(X,{1,2}).\n "
            "            ">>,
          [],
          {errors,[{2,erl_lint,{redefine_old_bif_import,{abs,1}}}],[]}},
         {clash16,
          <<"-export([x/1]).\n              -import(x,[binary_part/3])."
            "\n              x(X) ->\n                 abs(X).\n       "
            "      ">>,
          [],
          {warnings,
           [{2,erl_lint,{redefine_bif_import,{binary_part,3}}}]}},
         {clash17,
          <<"-export([x/1]).\n              -import(x,[binary_port/3])."
            "\n              -import(y,[binary_port/3]).\n             "
            " x(X) ->\n                 abs(X).\n             ">>,
          [],
          {errors,
           [{3,erl_lint,{redefine_import,{{binary_port,3},x}}}],
           []}},
         {clash18,
          <<"-export([x/1]).\n              -import(x,[binary_port/3])."
            "\n              binary_port(A,B,C) ->\n                 bi"
            "nary_part(A,B,C).\n              x(X) ->\n                "
            " abs(X).\n             ">>,
          [],
          {errors,[{3,erl_lint,{define_import,{binary_port,3}}}],[]}},
         {clash19,
          <<"-export([binary_port/3]).\n              -compile({no_auto"
            "_import,[binary_part/3]}).\n              -import(x,[binar"
            "y_part/3]).\n              binary_port(A,B,C) when x:binar"
            "y_part(A,B,C) ->\n                 binary_part(A,B,C+1).\n"
            "             ">>,
          [],
          {errors,[{4,erl_lint,illegal_guard_expr}],[]}},
         {clash20,
          <<"-export([binary_port/3]).\n              -import(x,[binary"
            "_part/3]).\n              binary_port(A,B,C) ->\n         "
            "        binary_part(A,B,C).\n             ">>,
          [warn_unused_import],
          {warnings,
           [{2,erl_lint,{redefine_bif_import,{binary_part,3}}}]}},
         {clash21,
          <<"-export([is_list/1]).\n              -import(x, [is_tuple/"
            "1]).\n              -record(r, {a,b}).\n              x(T)"
            " when is_tuple(T) -> ok;\n              x(T) when is_list("
            "T) -> ok.\n              y(T) when is_tuple(T) =:= true ->"
            " ok;\n              y(T) when is_list(T) =:= true -> ok;\n"
            "              y(T) when is_record(T, r, 3) -> ok;\n       "
            "       y(T) when is_record(T, r, 3) =:= true -> ok;\n     "
            "         y(T) when is_record(T, r) =:= true -> ok.\n      "
            "        is_list(_) ->\n                ok.\n              "
            "is_record(_, _) ->\n                ok.\n              is_"
            "record(_, _, _) ->\n                ok.\n             ">>,
          [{no_auto_import,[{is_tuple,1}]}],
          {errors,
           [{4,erl_lint,{illegal_guard_local_call,{is_tuple,1}}},
            {5,erl_lint,{illegal_guard_local_call,{is_list,1}}},
            {6,erl_lint,{illegal_guard_local_call,{is_tuple,1}}},
            {7,erl_lint,{illegal_guard_local_call,{is_list,1}}},
            {8,erl_lint,{illegal_guard_local_call,{is_record,3}}},
            {9,erl_lint,{illegal_guard_local_call,{is_record,3}}}],
           []}}],
    [] = run(Config, Ts),
    ok.

behaviour_basic(doc) ->
    "Basic tests with one behaviour.";
behaviour_basic(suite) ->
    [];
behaviour_basic(Config) when is_list(Config) ->
    Ts =
        [{behaviour1,
          <<"-behaviour(application).\n             ">>,
          [],
          {warnings,
           [{1,
             erl_lint,
             {undefined_behaviour_func,{start,2},application}},
            {1,erl_lint,{undefined_behaviour_func,{stop,1},application}}]}},
         {behaviour2,
          <<"-behaviour(application).\n              -export([stop/1])."
            "\n              stop(_) -> ok.\n             ">>,
          [],
          {warnings,
           [{1,
             erl_lint,
             {undefined_behaviour_func,{start,2},application}}]}},
         {behaviour3,
          <<"-behavior(application).  %% Test American spelling.\n     "
            "         -export([start/2,stop/1]).\n              start(_"
            ", _) -> ok.\n              stop(_) -> ok.\n             ">>,
          [],
          []}],
    [] = run(Config, Ts),
    ok.

behaviour_multiple(doc) ->
    "Basic tests with multiple behaviours.";
behaviour_multiple(suite) ->
    [];
behaviour_multiple(Config) when is_list(Config) ->
    Ts =
        [{behaviour1,
          <<"-behaviour(application).\n              -behaviour(supervi"
            "sor).\n             ">>,
          [],
          {warnings,
           [{1,
             erl_lint,
             {undefined_behaviour_func,{start,2},application}},
            {1,erl_lint,{undefined_behaviour_func,{stop,1},application}},
            {2,erl_lint,{undefined_behaviour_func,{init,1},supervisor}}]}},
         {behaviour2,
          <<"-behaviour(application).\n              -behaviour(supervi"
            "sor).\n              -export([start/2,stop/1,init/1]).\n  "
            "            start(_, _) -> ok.\n              stop(_) -> o"
            "k.\n              init(_) -> ok.\n             ">>,
          [],
          []},
         {american_behavior2,
          <<"-behavior(application).\n              -behavior(superviso"
            "r).\n              -export([start/2,stop/1,init/1]).\n    "
            "          start(_, _) -> ok.\n              stop(_) -> ok."
            "\n              init(_) -> ok.\n             ">>,
          [],
          []},
         {behaviour3,
          <<"-behaviour(gen_server).\n              -behaviour(supervis"
            "or).\n              -export([handle_call/3,handle_cast/2,h"
            "andle_info/2]).\n              handle_call(_, _, _) -> ok."
            "\n              handle_cast(_, _) -> ok.\n              ha"
            "ndle_info(_, _) -> ok.\n             ">>,
          [],
          {warnings,
           [{1,
             erl_lint,
             {undefined_behaviour_func,{code_change,3},gen_server}},
            {1,erl_lint,{undefined_behaviour_func,{init,1},gen_server}},
            {1,
             erl_lint,
             {undefined_behaviour_func,{terminate,2},gen_server}},
            {2,erl_lint,{undefined_behaviour_func,{init,1},supervisor}},
            {2,
             erl_lint,
             {conflicting_behaviours,{init,1},supervisor,1,gen_server}}]}},
         {american_behavior3,
          <<"-behavior(gen_server).\n              -behavior(supervisor"
            ").\n              -export([handle_call/3,handle_cast/2,han"
            "dle_info/2]).\n              handle_call(_, _, _) -> ok.\n"
            "              handle_cast(_, _) -> ok.\n              hand"
            "le_info(_, _) -> ok.\n             ">>,
          [],
          {warnings,
           [{1,
             erl_lint,
             {undefined_behaviour_func,{code_change,3},gen_server}},
            {1,erl_lint,{undefined_behaviour_func,{init,1},gen_server}},
            {1,
             erl_lint,
             {undefined_behaviour_func,{terminate,2},gen_server}},
            {2,erl_lint,{undefined_behaviour_func,{init,1},supervisor}},
            {2,
             erl_lint,
             {conflicting_behaviours,{init,1},supervisor,1,gen_server}}]}},
         {behaviour4,
          <<"-behaviour(gen_server).\n              -behaviour(gen_fsm)"
            ".\n              -behaviour(supervisor).\n              -e"
            "xport([init/1,handle_call/3,handle_cast/2,\n              "
            "         handle_info/2,handle_info/3,\n                   "
            "    handle_event/3,handle_sync_event/4,\n                 "
            "      code_change/3,code_change/4,\n                      "
            " terminate/2,terminate/3,terminate/4]).\n              ini"
            "t(_) -> ok.\n              handle_call(_, _, _) -> ok.\n  "
            "            handle_event(_, _, _) -> ok.\n              ha"
            "ndle_sync_event(_, _, _, _) -> ok.\n              handle_c"
            "ast(_, _) -> ok.\n              handle_info(_, _) -> ok.\n"
            "              handle_info(_, _, _) -> ok.\n              c"
            "ode_change(_, _, _) -> ok.\n              code_change(_, _"
            ", _, _) -> ok.\n              terminate(_, _) -> ok.\n    "
            "          terminate(_, _, _) -> ok.\n              termina"
            "te(_, _, _, _) -> ok.\n             ">>,
          [],
          {warnings,
           [{2,
             erl_lint,
             {conflicting_behaviours,{init,1},gen_fsm,1,gen_server}},
            {3,
             erl_lint,
             {conflicting_behaviours,{init,1},supervisor,1,gen_server}}]}}],
    [] = run(Config, Ts),
    ok.

otp_7550(doc) ->
    "Test that the new utf8/utf16/utf32 types do not allow size or unit"
    " specifiers.";
otp_7550(Config) when is_list(Config) ->
    Ts =
        [{otp_7550,
          <<"f8(A) ->\n                  <<A:8/utf8>>.\n              g"
            "8(A) ->\n                  <<A:8/utf8-unit:1>>.\n         "
            "     h8(A) ->\n                  <<A/utf8-unit:1>>.\n\n   "
            "           f16(A) ->\n                  <<A:8/utf16>>.\n  "
            "            g16(A) ->\n                  <<A:8/utf16-unit:"
            "1>>.\n              h16(A) ->\n                  <<A/utf16"
            "-unit:1>>.\n\n              f32(A) ->\n                  <"
            "<A:8/utf32>>.\n              g32(A) ->\n                  "
            "<<A:8/utf32-unit:1>>.\n              h32(A) ->\n          "
            "        <<A/utf32-unit:1>>.\n             ">>,
          [],
          {errors,
           [{2,erl_lint,utf_bittype_size_or_unit},
            {4,erl_lint,utf_bittype_size_or_unit},
            {6,erl_lint,utf_bittype_size_or_unit},
            {9,erl_lint,utf_bittype_size_or_unit},
            {11,erl_lint,utf_bittype_size_or_unit},
            {13,erl_lint,utf_bittype_size_or_unit},
            {16,erl_lint,utf_bittype_size_or_unit},
            {18,erl_lint,utf_bittype_size_or_unit},
            {20,erl_lint,utf_bittype_size_or_unit}],
           []}}],
    [] = run(Config, Ts),
    ok.

otp_8051(doc) ->
    "Bugfix: -opaque with invalid type.";
otp_8051(Config) when is_list(Config) ->
    Ts =
        [{otp_8051,
          <<"-opaque foo() :: bar().\n              -export_type([foo/0"
            "]).\n             ">>,
          [],
          {errors,[{1,erl_lint,{undefined_type,{bar,0}}}],[]}}],
    [] = run(Config, Ts),
    ok.

format_warn(doc) ->
    "Check that format warnings are generated.";
format_warn(suite) ->
    [];
format_warn(Config) when is_list(Config) ->
    L1 = 14,
    L2 = 4,
    format_level(1, L1, Config),
    format_level(2, L1 + L2, Config),
    format_level(3, L1 + L2, Config),
    ok.

format_level(Level, Count, Config) ->
    W = get_compilation_warnings(Config,
                                 "format",
                                 [{warn_format,Level}]),
    FW =
        lists:filter(fun({_Line,erl_lint,{format_error,_}}) ->
                            true;
                        (_) ->
                            false
                     end,
                     W),
    case length(FW) of
        Count ->
            ok;
        Other ->
            test_server:format("Expected ~w warning(s); got ~w",
                               [Count,Other]),
            fail()
    end,
    ok.

on_load_successful(Config) when is_list(Config) ->
    Ts =
        [{on_load_1,
          <<"-export([do_on_load/0]).\n             -on_load(do_on_load"
            "/0).\n             do_on_load() -> ok.\n             ">>,
          {[]},
          []},
         {on_load_2,
          <<"-on_load(do_on_load/0).\n             do_on_load() -> ok."
            "\n             ">>,
          {[]},
          []},
         {on_load_3,
          <<"-on_load(do_on_load/0).\n             do_on_load() -> foo("
            ").\n             foo() -> bar(5) + 42.\n             bar(N"
            ") -> 2*N.\n             ">>,
          {[]},
          []}],
    [] = run(Config, Ts),
    ok.

on_load_failing(Config) when is_list(Config) ->
    Ts =
        [{on_load_1,
          <<"-on_load(atom).\n             ">>,
          {[]},
          {errors,[{1,erl_lint,{bad_on_load,atom}}],[]}},
         {on_load_2,
          <<"-on_load({42,0}).\n             ">>,
          {[]},
          {errors,[{1,erl_lint,{bad_on_load,{42,0}}}],[]}},
         {on_load_3,
          <<"-on_load(foo/0).\n              -on_load(bar/0).\n        "
            "      foo() -> ok.\n              bar() -> ok.\n          "
            "   ">>,
          {[]},
          {errors,[{2,erl_lint,multiple_on_loads}],[]}},
         {on_load_4,
          <<"-on_load(foo/1).\n              foo(_) -> ok.\n           "
            "  ">>,
          {[]},
          {errors,[{1,erl_lint,{bad_on_load_arity,{foo,1}}}],[]}},
         {on_load_5,
          <<"-on_load(non_existing/0).\n             ">>,
          {[]},
          {errors,
           [{1,erl_lint,{undefined_on_load,{non_existing,0}}}],
           []}}],
    [] = run(Config, Ts),
    ok.

too_many_arguments(doc) ->
    "Test that too many arguments is not accepted.";
too_many_arguments(suite) ->
    [];
too_many_arguments(Config) when is_list(Config) ->
    Ts =
        [{too_many_1,
          <<"f(_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,"
            "_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,"
            "_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,"
            "_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,"
            "_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,"
            "_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,"
            "_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,"
            "_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,"
            "_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_,_) -> ok.">>,
          [],
          {errors,[{1,erl_lint,{too_many_arguments,256}}],[]}}],
    [] = run(Config, Ts),
    ok.

basic_errors(Config) ->
    Ts =
        [{redefine_module,
          <<"-module(redefine_module).">>,
          [],
          {errors,[{1,erl_lint,redefine_module}],[]}},
         {attr_after_function,
          <<"f() -> ok.\n               -attr(x).">>,
          [],
          {errors,[{2,erl_lint,{attribute,attr}}],[]}},
         {redefine_function,
          <<"f() -> ok.\n              f() -> ok.">>,
          [],
          {errors,[{2,erl_lint,{redefine_function,{f,0}}}],[]}},
         {redefine_record,
          <<"-record(r, {a}).\n              -record(r, {a}).\n\t      "
            "f(#r{}) -> ok.">>,
          [],
          {errors,[{2,erl_lint,{redefine_record,r}}],[]}},
         {illegal_record_info,
          <<"f1() -> record_info(42, record).\n\t      f2() -> record_i"
            "nfo(shoe_size, record).">>,
          [],
          {errors,
           [{1,erl_lint,illegal_record_info},
            {2,erl_lint,illegal_record_info}],
           []}},
         {illegal_expr,
          <<"f() -> a:b.">>,
          [],
          {errors,[{1,erl_lint,illegal_expr}],[]}},
         {illegal_pattern,
          <<"f(A+B) -> ok.">>,
          [],
          {errors,[{1,erl_lint,illegal_pattern}],[]}}],
    [] = run(Config, Ts),
    ok.

bin_syntax_errors(Config) ->
    Ts =
        [{bin_syntax_errors,
          <<"t(<<X:bad_size>>) -> X;\n\t      t(<<_:(x ! y)/integer>>) "
            "-> ok;\n              t(<<X:all/integer>>) -> X;\n        "
            "      t(<<X/bad_type>>) -> X;\n\t      t(<<X/unit:8>>) -> "
            "X;\n\t      t(<<X:7/float>>) -> X;\n\t      t(<< <<_:8>> >"
            ">) -> ok;\n\t      t(<<(x ! y):8/integer>>) -> ok.\n\t    ">>,
          [],
          {error,
           [{1,erl_lint,illegal_bitsize},
            {2,erl_lint,illegal_bitsize},
            {3,erl_lint,illegal_bitsize},
            {4,erl_lint,{undefined_bittype,bad_type}},
            {5,erl_lint,bittype_unit},
            {7,erl_lint,illegal_pattern},
            {8,erl_lint,illegal_pattern}],
           [{6,erl_lint,{bad_bitsize,"float"}}]}}],
    [] = run(Config, Ts),
    ok.

run(Config, Tests) ->
    F = fun({N,P,Ws,E}, BadL) ->
               case catch run_test(Config, P, Ws) of
                   E ->
                       BadL;
                   Bad ->
                       test_server:format("~nTest ~p failed. Expected~n"
                                          "  ~p~nbut got~n  ~p~n",
                                          [N,E,Bad]),
                       fail()
               end
        end,
    lists:foldl(F, [], Tests).

get_compilation_warnings(Conf, Filename, Warnings) ->
    DataDir = test_server:lookup_config(data_dir, Conf),
    File = filename:join(DataDir, Filename),
    {ok,Bin} = file:read_file(File ++ ".erl"),
    FileS = binary_to_list(Bin),
    {match,[{Start,Length}|_]} = re:run(FileS, "-module.*\\n"),
    Test = lists:nthtail(Start + Length, FileS),
    {warnings,Ws} = run_test(Conf, Test, Warnings),
    Ws.

run_test(Conf, Test0, Warnings0) ->
    Test = list_to_binary(["-module(lint_test). ",Test0]),
    run_test2(Conf, Test, Warnings0).

run_test2(Conf, Test, Warnings0) ->
    Filename = "lint_test.erl",
    DataDir = test_server:lookup_config(priv_dir, Conf),
    File = filename:join(DataDir, Filename),
    Opts =
        case Warnings0 of
            {Warnings} ->
                [return|Warnings];
            Warnings ->
                [export_all,return|Warnings]
        end,
    ok = file:write_file(File, Test),
    compile:file(File, [binary,report|Opts]),
    case compile:file(File, [binary|Opts]) of
        {ok,_M,Code,Ws} when is_binary(Code) ->
            warnings(File, Ws);
        {error,[{File,Es}],[]} ->
            {errors,Es,[]};
        {error,[{File,Es}],[{File,Ws}]} ->
            {error,Es,Ws};
        {error,[{File,Es1},{File,Es2}],[]} ->
            {errors2,Es1,Es2}
    end.

warnings(File, Ws) ->
    case
        lists:append([ 
                      W ||
                          {F,W} <- Ws,
                          F =:= File
                     ])
    of
        [] ->
            [];
        L ->
            {warnings,L}
    end.

fail() ->
    io:format("failed~n"),
    test_server:fail().



