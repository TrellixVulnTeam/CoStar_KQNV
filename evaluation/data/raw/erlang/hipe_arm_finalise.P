-file("test/lib/hipe/arm/hipe_arm_finalise.erl", 1).

-module(hipe_arm_finalise).

-export([finalise/1]).

-file("test/lib/hipe/arm/hipe_arm.hrl", 1).

-record(arm_mfa,{m :: undefined | atom(),
                 f :: undefined | atom(),
                 a :: undefined | arity()}).

-record(arm_prim,{prim}).

-record(arm_sdesc,{exnlab,fsize,arity :: undefined | arity(),live}).

-record(arm_temp,{reg,type,allocatable}).

-record(am2,{src,sign,offset}).

-record(am3,{src,sign,offset}).

-record(alu,{aluop,s,dst,src,am1}).

-record(b_fun,{'fun',linkage}).

-record(b_label,{'cond',label}).

-record(bl,{'fun',sdesc,linkage}).

-record(blx,{src,sdesc}).

-record(cmp,{cmpop,src,am1}).

-record(comment,{term}).

-record(label,{label}).

-record(load,{ldop,dst,am2}).

-record(ldrsb,{dst,am3}).

-record(move,{movop,s,dst,am1}).

-record(pseudo_bc,{'cond',true_label,false_label,pred}).

-record(pseudo_blr,{}).

-record(pseudo_bx,{src}).

-record(pseudo_call,{funv,sdesc,contlab,linkage}).

-record(pseudo_call_prepare,{nrstkargs}).

-record(pseudo_li,{dst,imm,label}).

-record(pseudo_move,{dst,src}).

-record(pseudo_switch,{jtab,index,labels}).

-record(pseudo_tailcall,{funv,arity,stkargs,linkage}).

-record(pseudo_tailcall_prepare,{}).

-record(smull,{dstlo,dsthi,src1,src2}).

-record(store,{stop,src,am2}).

-file("test/lib/hipe/arm/../misc/hipe_consttab.hrl", 1).

-type ct_alignment() :: 4 | 8.

-type hipe_constlbl() :: non_neg_integer().

-type hipe_consttab() :: {dict(), [hipe_constlbl()], hipe_constlbl()}.

-file("test/lib/hipe/arm/hipe_arm.hrl", 119).

-file([], 119).

-record(defun,{mfa :: undefined | mfa(),
               formals,
               code,
               data :: undefined | hipe_consttab(),
               isclosure :: undefined | boolean(),
               isleaf :: undefined | boolean(),
               var_range,
               label_range}).

-file("test/lib/hipe/arm/hipe_arm_finalise.erl", 24).

finalise(Defun) ->
    #defun{code = Code0} = Defun,
    Code1 = peep(expand(Code0)),
    Defun#defun{code = Code1}.

expand(Insns) ->
    expand_list(Insns, []).

expand_list([I|Insns], Accum) ->
    expand_list(Insns, expand_insn(I, Accum));
expand_list([], Accum) ->
    lists:reverse(Accum).

expand_insn(I, Accum) ->
    case I of
        #pseudo_bc{'cond' = Cond,
                   true_label = TrueLab,
                   false_label = FalseLab} ->
            [hipe_arm:mk_b_label(FalseLab),
             hipe_arm:mk_b_label(Cond, TrueLab)|
             Accum];
        #pseudo_blr{} ->
            [hipe_arm:mk_move(hipe_arm:mk_pc(), hipe_arm:mk_lr())|Accum];
        #pseudo_bx{src = Src} ->
            [hipe_arm:mk_move(hipe_arm:mk_pc(), Src)|Accum];
        #pseudo_call{funv = FunV,
                     sdesc = SDesc,
                     contlab = ContLab,
                     linkage = Linkage} ->
            [hipe_arm:mk_b_label(ContLab),
             case FunV of
                 #arm_temp{} ->
                     hipe_arm:mk_blx(FunV, SDesc);
                 _ ->
                     hipe_arm:mk_bl(FunV, SDesc, Linkage)
             end|
             Accum];
        #pseudo_switch{jtab = JTab,index = Index} ->
            PC = hipe_arm:mk_pc(),
            Am2 = hipe_arm:mk_am2(JTab, '+', {Index,lsl,2}),
            [hipe_arm:mk_load(ldr, PC, Am2)|Accum];
        #pseudo_tailcall_prepare{} ->
            Accum;
        _ ->
            [I|Accum]
    end.

peep(Insns) ->
    peep_list(Insns, []).

peep_list([#b_label{'cond' = al,label = Label}|
           Insns = [#label{label = Label}|_]],
          Accum) ->
    peep_list(Insns, Accum);
peep_list([I|Insns], Accum) ->
    peep_list(Insns, [I|Accum]);
peep_list([], Accum) ->
    lists:reverse(Accum).



