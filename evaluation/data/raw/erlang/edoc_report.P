-file("test/lib/edoc/src/edoc_report.erl", 1).

-module(edoc_report).

-compile({no_auto_import,[{error,2}]}).

-export([error/1,
         error/2,
         error/3,
         report/2,
         report/3,
         report/4,
         warning/1,
         warning/2,
         warning/3,
         warning/4]).

-file("test/lib/edoc/src/edoc.hrl", 1).

-file("/Users/parrt/Downloads/fenollp-erlang-grammar-c1db83d09307/test/lib/edoc/src/../include/edoc_doclet.hrl",
      1).

-record(context,{dir = "",env,opts = []}).

-record(doclet_gen,{sources = [],
                    app = [],
                    packages = [],
                    modules = [],
                    filemap}).

-record(doclet_toc,{paths,indir}).

-file("test/lib/edoc/src/edoc.hrl", 43).

-file([], 43).

-record(module,{name = [],
                parameters = none,
                functions = [],
                exports = [],
                attributes = [],
                records = [],
                encoding = latin1}).

-record(env,{module = [],
             package = [],
             root = "",
             file_suffix,
             package_summary,
             apps,
             modules,
             packages,
             app_default,
             macros = [],
             includes = []}).

-record(comment,{line = 0,text}).

-record(entry,{name,args = [],line = 0,export,data}).

-record(tag,{name,line = 0,origin = comment,data}).

-file("test/lib/edoc/src/edoc_report.erl", 42).

error(What) ->
    error([], What).

error(Where, What) ->
    error(0, Where, What).

error(Line, Where, S) when is_list(S) ->
    report(Line, Where, S, []);
error(Line, Where, {S,D}) when is_list(S) ->
    report(Line, Where, S, D);
error(Line, Where, {format_error,M,D}) ->
    report(Line, Where, M:format_error(D), []).

warning(S) ->
    warning(S, []).

warning(S, Vs) ->
    warning([], S, Vs).

warning(Where, S, Vs) ->
    warning(0, Where, S, Vs).

warning(L, Where, S, Vs) ->
    report(L, Where, "warning: " ++ S, Vs).

report(S, Vs) ->
    report([], S, Vs).

report(Where, S, Vs) ->
    report(0, Where, S, Vs).

report(L, Where, S, Vs) ->
    io:put_chars(where(Where)),
    if
        is_integer(L), L > 0 ->
            io:fwrite("at line ~w: ", [L]);
        true ->
            ok
    end,
    io:fwrite(S, Vs),
    io:nl().

where({File,module}) ->
    io_lib:fwrite("~ts, in module header: ", [File]);
where({File,footer}) ->
    io_lib:fwrite("~ts, in module footer: ", [File]);
where({File,header}) ->
    io_lib:fwrite("~ts, in header file: ", [File]);
where({File,{F,A}}) ->
    io_lib:fwrite("~ts, function ~s/~w: ", [File,F,A]);
where([]) ->
    io_lib:fwrite("~s: ", [edoc]);
where(File) when is_list(File) ->
    File ++ ": ".



