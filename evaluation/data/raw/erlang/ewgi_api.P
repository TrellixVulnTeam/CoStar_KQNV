-file("test/lib/dialyzer/test/opaque_SUITE_data/src/ewgi2/ewgi_api.erl",
      1).

-module(ewgi_api).

-file("test/lib/dialyzer/test/opaque_SUITE_data/src/ewgi2/ewgi.hrl", 1).

-type ewgi_propval() :: atom() | integer() | string() | binary().

-type ewgi_prop() :: {ewgi_propval(), ewgi_propval()}.

-type ewgi_proplist() :: [ewgi_prop()].

-type bag() :: gb_tree().

-type ewgi_ri_callback() :: fun((eof | {data, binary()}) ->
                                    iolist() | function())
                          | iolist().

-type ewgi_read_input() ::
          fun((ewgi_ri_callback(), integer()) -> ewgi_ri_callback()).

-type ewgi_write_error() :: fun((any()) -> ok).

-type ewgi_version() :: {integer(), integer()}.

-type ewgi_spec() ::
          {ewgi_spec,
           ewgi_read_input(),
           ewgi_write_error(),
           string(),
           ewgi_version(),
           bag()}.

-type ewgi_header_val() :: string() | undefined.

-type ewgi_header_key() :: string().

-type ewgi_http_headers() ::
          {ewgi_http_headers,
           ewgi_header_val(),
           ewgi_header_val(),
           ewgi_header_val(),
           ewgi_header_val(),
           ewgi_header_val(),
           ewgi_header_val(),
           bag()}.

-type ewgi_request_method() :: 'OPTIONS'
                             | 'GET'
                             | 'HEAD'
                             | 'POST'
                             | 'PUT'
                             | 'DELETE'
                             | 'TRACE'
                             | 'CONNECT'
                             | string().

-type ewgi_val() :: string() | undefined.

-type ewgi_request() ::
          {ewgi_request,
           ewgi_val(),
           non_neg_integer(),
           ewgi_val(),
           ewgi_spec(),
           ewgi_val(),
           ewgi_http_headers(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_request_method(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val(),
           ewgi_val()}.

-type stream() :: fun(() -> {} | {any(), function()}).

-type ewgi_status() :: {integer(), string()}.

-type ewgi_message_body() :: binary() | iolist() | stream().

-type ewgi_header_list() :: [{ewgi_header_key(), ewgi_header_val()}].

-type ewgi_response() ::
          {ewgi_response,
           ewgi_status(),
           ewgi_header_list(),
           ewgi_message_body(),
           any()}.

-type ewgi_context() :: {ewgi_context, ewgi_request(), ewgi_response()}.

-type ewgi_app() :: fun((ewgi_context()) -> ewgi_context()).

-file("test/lib/dialyzer/test/opaque_SUITE_data/src/ewgi2/ewgi_api.erl",
      29).

-export([get_all_headers/1,get_all_data/1]).

-spec request(ewgi_context()) -> ewgi_request().

request(Ctx)
    when
        (element(1, Ctx) =:= ewgi_context)
        and
        ((element(1, element(2, Ctx)) =:= ewgi_request)
         and
         (size(element(2, Ctx)) =:= 21))
        and
        ((element(1, element(3, Ctx)) =:= ewgi_response)
         and
         (size(element(3, Ctx)) =:= 5))
        and
        (size(Ctx) =:= 3) ->
    element(2, Ctx).

-spec headers(ewgi_context()) -> ewgi_http_headers().

headers(Ctx)
    when
        (element(1, Ctx) =:= ewgi_context)
        and
        ((element(1, element(2, Ctx)) =:= ewgi_request)
         and
         (size(element(2, Ctx)) =:= 21))
        and
        ((element(1, element(3, Ctx)) =:= ewgi_response)
         and
         (size(element(3, Ctx)) =:= 5))
        and
        (size(Ctx) =:= 3) ->
    element(7, request(Ctx)).

get_header_value(Hdr0, Ctx)
    when
        is_list(Hdr0),
        (element(1, Ctx) =:= ewgi_context)
        and
        ((element(1, element(2, Ctx)) =:= ewgi_request)
         and
         (size(element(2, Ctx)) =:= 21))
        and
        ((element(1, element(3, Ctx)) =:= ewgi_response)
         and
         (size(element(3, Ctx)) =:= 5))
        and
        (size(Ctx) =:= 3) ->
    Hdr = string:to_lower(Hdr0),
    get_header1(Hdr, Ctx).

get_header1("accept", Ctx)
    when
        (element(1, Ctx) =:= ewgi_context)
        and
        ((element(1, element(2, Ctx)) =:= ewgi_request)
         and
         (size(element(2, Ctx)) =:= 21))
        and
        ((element(1, element(3, Ctx)) =:= ewgi_response)
         and
         (size(element(3, Ctx)) =:= 5))
        and
        (size(Ctx) =:= 3) ->
    element(2, headers(Ctx)).

unzip_header_value([{_,_}|_] = V) ->
    {_,V1} = lists:unzip(V),
    string:join(V1, ", ");
unzip_header_value(V) ->
    V.

get_all_headers(Ctx)
    when
        (element(1, Ctx) =:= ewgi_context)
        and
        ((element(1, element(2, Ctx)) =:= ewgi_request)
         and
         (size(element(2, Ctx)) =:= 21))
        and
        ((element(1, element(3, Ctx)) =:= ewgi_response)
         and
         (size(element(3, Ctx)) =:= 5))
        and
        (size(Ctx) =:= 3) ->
    H = headers(Ctx),
    Other = gb_trees:to_list(element(8, H)),
    Acc =
        [ 
         {K,unzip_header_value(V)} ||
             {K,V} <- Other
        ],
    L = [{"accept",get_header_value("accept", Ctx)}|Acc],
    lists:filter(fun({_,undefined}) ->
                        false;
                    (_) ->
                        true
                 end,
                 L).

-spec ewgi_spec(ewgi_context()) -> ewgi_spec().

ewgi_spec(Ctx)
    when
        (element(1, Ctx) =:= ewgi_context)
        and
        ((element(1, element(2, Ctx)) =:= ewgi_request)
         and
         (size(element(2, Ctx)) =:= 21))
        and
        ((element(1, element(3, Ctx)) =:= ewgi_response)
         and
         (size(element(3, Ctx)) =:= 5))
        and
        (size(Ctx) =:= 3) ->
    element(5, request(Ctx)).

get_all_data(Ctx)
    when
        (element(1, Ctx) =:= ewgi_context)
        and
        ((element(1, element(2, Ctx)) =:= ewgi_request)
         and
         (size(element(2, Ctx)) =:= 21))
        and
        ((element(1, element(3, Ctx)) =:= ewgi_response)
         and
         (size(element(3, Ctx)) =:= 5))
        and
        (size(Ctx) =:= 3) ->
    element(6, ewgi_spec(Ctx)).



