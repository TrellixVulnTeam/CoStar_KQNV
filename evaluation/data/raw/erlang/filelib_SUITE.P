-file("test/lib/stdlib/test/filelib_SUITE.erl", 1).

-module(filelib_SUITE).

-export([all/0,
         suite/0,
         groups/0,
         init_per_suite/1,
         end_per_suite/1,
         init_per_group/2,
         end_per_group/2,
         init_per_testcase/2,
         end_per_testcase/2,
         wildcard_one/1,
         wildcard_two/1,
         wildcard_errors/1,
         fold_files/1,
         otp_5960/1,
         ensure_dir_eexist/1]).

-import(lists, [foreach/2]).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/lib/stdlib/test/filelib_SUITE.erl", 31).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/kernel-2.15.3/include/file.hrl",
      1).

-record(file_info,{size :: undefined | non_neg_integer(),
                   type :: undefined
                         | device
                         | directory
                         | other
                         | regular
                         | symlink,
                   access :: undefined
                           | read
                           | write
                           | read_write
                           | none,
                   atime :: undefined | file:date_time() | integer(),
                   mtime :: undefined | file:date_time() | integer(),
                   ctime :: undefined | file:date_time() | integer(),
                   mode :: undefined | integer(),
                   links :: undefined | non_neg_integer(),
                   major_device :: undefined | integer(),
                   minor_device :: undefined | integer(),
                   inode :: undefined | integer(),
                   uid :: undefined | integer(),
                   gid :: undefined | integer()}).

-record(file_descriptor,{module :: undefined | module(),
                         data :: undefined | term()}).

-file("test/lib/stdlib/test/filelib_SUITE.erl", 32).

init_per_testcase(_Case, Config) ->
    Dog = test_server:timetrap(test_server:minutes(5)),
    [{watchdog,Dog}|Config].

end_per_testcase(_Case, Config) ->
    Dog = test_server:lookup_config(watchdog, Config),
    test_server:timetrap_cancel(Dog),
    ok.

suite() ->
    [{ct_hooks,[ts_install_cth]}].

all() ->
    [wildcard_one,
     wildcard_two,
     wildcard_errors,
     fold_files,
     otp_5960,
     ensure_dir_eexist].

groups() ->
    [].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, Config) ->
    Config.

wildcard_one(Config) when is_list(Config) ->
    {ok,OldCwd} = file:get_cwd(),
    Dir =
        filename:join(test_server:lookup_config(priv_dir, Config),
                      "wildcard_one"),
    ok = file:make_dir(Dir),
    do_wildcard_1(Dir,
                  fun(Wc) ->
                         filelib:wildcard(Wc, Dir, erl_prim_loader)
                  end),
    file:set_cwd(Dir),
    do_wildcard_1(Dir,
                  fun(Wc) ->
                         L = filelib:wildcard(Wc),
                         L = filelib:wildcard(Wc, erl_prim_loader),
                         L = filelib:wildcard(Wc, "."),
                         L = filelib:wildcard(Wc, Dir)
                  end),
    file:set_cwd(OldCwd),
    ok = file:del_dir(Dir),
    ok.

wildcard_two(Config) when is_list(Config) ->
    Dir =
        filename:join(test_server:lookup_config(priv_dir, Config),
                      "wildcard_two"),
    ok = file:make_dir(Dir),
    do_wildcard_1(Dir,
                  fun(Wc) ->
                         io:format("~p~n",
                                   [{Wc,
                                     Dir,
                                     X = filelib:wildcard(Wc, Dir)}]),
                         X
                  end),
    do_wildcard_1(Dir,
                  fun(Wc) ->
                         filelib:wildcard(Wc, Dir ++ "/")
                  end),
    case os:type() of
        {win32,_} ->
            ok;
        _ ->
            do_wildcard_1(Dir,
                          fun(Wc) ->
                                 filelib:wildcard(Wc, "//" ++ Dir)
                          end)
    end,
    ok = file:del_dir(Dir),
    ok.

wildcard_errors(Config) when is_list(Config) ->
    wcc("{", missing_delimiter),
    wcc("{a", missing_delimiter),
    wcc("{a,", missing_delimiter),
    wcc("{a,b", missing_delimiter),
    ok.

wcc(Wc, Error) ->
    {'EXIT',{{badpattern,Error},[{filelib,compile_wildcard,1,_}|_]}} =
        (catch filelib:compile_wildcard(Wc)),
    {'EXIT',{{badpattern,Error},[{filelib,wildcard,1,_}|_]}} =
        (catch filelib:wildcard(Wc)),
    {'EXIT',{{badpattern,Error},[{filelib,wildcard,2,_}|_]}} =
        (catch filelib:wildcard(Wc, ".")).

do_wildcard_1(Dir, Wcf0) ->
    do_wildcard_2(Dir, Wcf0),
    Wcf =
        fun(Wc0) ->
               Wc = filename:join(Dir, Wc0),
               L = Wcf0(Wc),
               [ 
                subtract_dir(N, Dir) ||
                    N <- L
               ]
        end,
    do_wildcard_2(Dir, Wcf).

subtract_dir([C|Cs], [C|Dir]) ->
    subtract_dir(Cs, Dir);
subtract_dir("/" ++ Cs, []) ->
    Cs.

do_wildcard_2(Dir, Wcf) ->
    All = ["abc","abcdef","glurf"],
    Files = mkfiles(lists:reverse(All), Dir),
    All = Wcf("*"),
    ["abc","abcdef"] = Wcf("a*"),
    ["abc","abcdef"] = Wcf("abc*"),
    ["abcdef"] = Wcf("abc???"),
    ["abcdef"] = Wcf("abcd*"),
    ["abcdef"] = Wcf("*def"),
    ["abcdef","glurf"] = Wcf("{*def,gl*}"),
    ["abc","abcdef"] = Wcf("a*{def,}"),
    ["abc","abcdef"] = Wcf("a*{,def}"),
    ["abcdef"] = Wcf("abcdef"),
    [] = Wcf("b*"),
    [] = Wcf("bufflig"),
    del(Files),
    do_wildcard_3(Dir, Wcf).

do_wildcard_3(Dir, Wcf) ->
    All = ["a01","a02","a03","b00","c02","d19"],
    Files = mkfiles(lists:reverse(All), Dir),
    All = Wcf("[a-z]*"),
    All = Wcf("[a-d]*"),
    All = Wcf("[adbc]*"),
    All = Wcf("?[0-9][0-9]"),
    All = Wcf("?[0-1][0-39]"),
    All = Wcf("[abcdefgh][10][01239]"),
    ["a01","a02","a03","b00","c02"] = Wcf("[a-z]0[0-3]"),
    [] = Wcf("?[a-z][0-39]"),
    del(Files),
    do_wildcard_4(Dir, Wcf).

do_wildcard_4(Dir, Wcf) ->
    All = ["a-","aA","aB","aC","a[","a]"],
    Files = mkfiles(lists:reverse(All), Dir),
    All = Wcf("a[][A-C-]"),
    ["a-"] = Wcf("a[-]"),
    ["a["] = Wcf("a["),
    del(Files),
    do_wildcard_5(Dir, Wcf).

do_wildcard_5(Dir, Wcf) ->
    Dirs = ["xa","blurf","yyy"],
    foreach(fun(D) ->
                   ok = file:make_dir(filename:join(Dir, D))
            end,
            Dirs),
    All = ["blurf/nisse","xa/arne","xa/kalle","yyy/arne"],
    Files = mkfiles(lists:reverse(All), Dir),
    All = Wcf("*/*"),
    ["blurf/nisse","xa/arne","xa/kalle"] = Wcf("{blurf,xa}/*"),
    ["xa/arne","yyy/arne"] = Wcf("*/arne"),
    ["blurf/nisse"] = Wcf("*/nisse"),
    [] = Wcf("mountain/*"),
    [] = Wcf("xa/gurka"),
    ["blurf/nisse"] = Wcf("blurf/nisse"),
    del(Files),
    foreach(fun(D) ->
                   ok = file:del_dir(filename:join(Dir, D))
            end,
            Dirs),
    do_wildcard_6(Dir, Wcf).

do_wildcard_6(Dir, Wcf) ->
    ok = file:make_dir(filename:join(Dir, "xbin")),
    All = ["xbin/a.x","xbin/b.x","xbin/c.x"],
    Files = mkfiles(All, Dir),
    All = Wcf("xbin/*.x"),
    All = Wcf("xbin/*"),
    ["xbin"] = Wcf("*"),
    All = Wcf("*/*"),
    del(Files),
    ok = file:del_dir(filename:join(Dir, "xbin")),
    do_wildcard_7(Dir, Wcf).

do_wildcard_7(Dir, Wcf) ->
    Dirs = ["blurf","xa","yyy"],
    SubDirs = ["blurf/nisse"],
    foreach(fun(D) ->
                   ok = file:make_dir(filename:join(Dir, D))
            end,
            Dirs ++ SubDirs),
    All = ["blurf/nisse/baz","xa/arne","xa/kalle","yyy/arne"],
    Files = mkfiles(lists:reverse(All), Dir),
    Listing = Wcf("**"),
    ["blurf",
     "blurf/nisse",
     "blurf/nisse/baz",
     "xa",
     "xa/arne",
     "xa/kalle",
     "yyy",
     "yyy/arne"] =
        Listing,
    Listing = Wcf("**/*"),
    ["xa/arne","yyy/arne"] = Wcf("**/arne"),
    ["blurf/nisse"] = Wcf("**/nisse"),
    [] = Wcf("mountain/**"),
    del(Files),
    foreach(fun(D) ->
                   ok = file:del_dir(filename:join(Dir, D))
            end,
            SubDirs ++ Dirs),
    do_wildcard_8(Dir, Wcf).

do_wildcard_8(Dir, Wcf) ->
    Dirs0 = ["blurf"],
    Dirs1 = ["blurf/nisse"],
    Dirs2 = ["blurf/nisse/a","blurf/nisse/b"],
    foreach(fun(D) ->
                   ok = file:make_dir(filename:join(Dir, D))
            end,
            Dirs0 ++ Dirs1 ++ Dirs2),
    All =
        ["blurf/nisse/a/1.txt",
         "blurf/nisse/b/2.txt",
         "blurf/nisse/b/3.txt"],
    Files = mkfiles(lists:reverse(All), Dir),
    All = Wcf("**/blurf/**/*.txt"),
    del(Files),
    foreach(fun(D) ->
                   ok = file:del_dir(filename:join(Dir, D))
            end,
            Dirs2 ++ Dirs1 ++ Dirs0),
    do_wildcard_9(Dir, Wcf).

do_wildcard_9(Dir, Wcf) ->
    Dirs0 = ["lib","lib/app","lib/app/ebin"],
    Dirs =
        [ 
         filename:join(Dir, D) ||
             D <- Dirs0
        ],
    [ 
     ok = file:make_dir(D) ||
         D <- Dirs
    ],
    Files0 =
        [ 
         filename:join("lib/app/ebin", F ++ ".bar") ||
             F <- ["abc","foo","foobar"]
        ],
    Files =
        [ 
         filename:join(Dir, F) ||
             F <- Files0
        ],
    [ 
     ok = file:write_file(F, <<"some content\n">>) ||
         F <- Files
    ],
    Files0 = Wcf("lib/app/ebin/*.bar"),
    del(Files),
    [ 
     ok = file:del_dir(D) ||
         D <- lists:reverse(Dirs)
    ],
    ok.

fold_files(Config) when is_list(Config) ->
    Dir =
        filename:join(test_server:lookup_config(priv_dir, Config),
                      "fold_files"),
    ok = file:make_dir(Dir),
    Dirs =
        [ 
         filename:join(Dir, D) ||
             D <- ["blurf","blurf/blarf"]
        ],
    foreach(fun(D) ->
                   ok = file:make_dir(D)
            end,
            Dirs),
    All =
        ["fb.txt",
         "ko.txt",
         "blurf/nisse.text",
         "blurf/blarf/aaa.txt",
         "blurf/blarf/urfa.txt"],
    Files = mkfiles(lists:reverse(All), Dir),
    Files0 =
        filelib:fold_files(Dir,
                           "^",
                           false,
                           fun(H, T) ->
                                  [H|T]
                           end,
                           []),
    same_lists(["fb.txt","ko.txt"], Files0, Dir),
    Files1 =
        filelib:fold_files(Dir,
                           "^",
                           true,
                           fun(H, T) ->
                                  [H|T]
                           end,
                           []),
    same_lists(All, Files1, Dir),
    Files2 =
        filelib:fold_files(Dir,
                           "[.]text$",
                           true,
                           fun(H, T) ->
                                  [H|T]
                           end,
                           []),
    same_lists(["blurf/nisse.text"], Files2, Dir),
    Files3 =
        filelib:fold_files(Dir,
                           "^..[.]",
                           true,
                           fun(H, T) ->
                                  [H|T]
                           end,
                           []),
    same_lists(["fb.txt","ko.txt"], Files3, Dir),
    Files4 =
        filelib:fold_files(Dir,
                           "^ko[.]txt$",
                           true,
                           fun(H, T) ->
                                  [H|T]
                           end,
                           []),
    same_lists(["ko.txt"], Files4, Dir),
    Files4 =
        filelib:fold_files(Dir,
                           "^ko[.]txt$",
                           false,
                           fun(H, T) ->
                                  [H|T]
                           end,
                           []),
    [] =
        filelib:fold_files(Dir,
                           "^$",
                           true,
                           fun(H, T) ->
                                  [H|T]
                           end,
                           []),
    del(Files),
    foreach(fun(D) ->
                   ok = file:del_dir(D)
            end,
            lists:reverse(Dirs)),
    ok = file:del_dir(Dir).

same_lists(Expected0, Actual0, BaseDir) ->
    Expected =
        [ 
         filename:absname(N, BaseDir) ||
             N <- lists:sort(Expected0)
        ],
    Actual = lists:sort(Actual0),
    Expected = Actual.

mkfiles([H|T], Dir) ->
    Name = filename:join(Dir, H),
    Garbage =
        [ 
         31 + random:uniform(95) ||
             _ <- lists:seq(1, random:uniform(1024))
        ],
    file:write_file(Name, Garbage),
    [Name|mkfiles(T, Dir)];
mkfiles([], _) ->
    [].

del([H|T]) ->
    ok = file:delete(H),
    del(T);
del([]) ->
    ok.

otp_5960(suite) ->
    [];
otp_5960(doc) ->
    ["Test that filelib:ensure_dir/1 returns ok or {error,Reason}"];
otp_5960(Config) when is_list(Config) ->
    PrivDir = test_server:lookup_config(priv_dir, Config),
    Dir = filename:join(PrivDir, "otp_5960_dir"),
    Name1 = filename:join(Dir, name1),
    Name2 = filename:join(Dir, name2),
    ok = filelib:ensure_dir(Name1),
    ok = filelib:ensure_dir(Name1),
    ok = filelib:ensure_dir(Name2),
    ok = filelib:ensure_dir(Name2),
    Name3 = filename:join(Name1, name3),
    {ok,FileInfo} = file:read_file_info(Dir),
    case os:type() of
        {win32,_} ->
            ok;
        _ ->
            Mode = FileInfo#file_info.mode,
            NoWriteMode = Mode - 128 - 16 - 2,
            ok =
                file:write_file_info(Dir,
                                     #file_info{mode = NoWriteMode}),
            {error,_} = filelib:ensure_dir(Name3),
            ok = file:write_file_info(Dir, #file_info{mode = Mode}),
            ok
    end.

ensure_dir_eexist(Config) when is_list(Config) ->
    PrivDir = test_server:lookup_config(priv_dir, Config),
    Dir = filename:join(PrivDir, "ensure_dir_eexist"),
    Name = filename:join(Dir, "same_name_as_file_and_dir"),
    ok = filelib:ensure_dir(Name),
    ok = file:write_file(Name, <<"some string\n">>),
    NeedFile = filename:join(Name, "file"),
    NeedFileB = filename:join(Name, <<"file">>),
    {error,eexist} = filelib:ensure_dir(NeedFile),
    {error,eexist} = filelib:ensure_dir(NeedFileB),
    ok.



