-file("test/erts/emulator/test/erl_drv_thread_SUITE.erl", 1).

-module(erl_drv_thread_SUITE).

-author('rickard.s.green@ericsson.com').

-export([all/0,
         suite/0,
         groups/0,
         init_per_suite/1,
         end_per_suite/1,
         init_per_group/2,
         end_per_group/2]).

-export([basic/1,rwlock/1,tsd/1]).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/erts/emulator/test/erl_drv_thread_SUITE.erl", 28).

suite() ->
    [{ct_hooks,[ts_install_cth]}].

all() ->
    [basic,rwlock,tsd].

groups() ->
    [].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, Config) ->
    Config.

basic(suite) ->
    [];
basic(doc) ->
    [];
basic(Cfg) ->
    drv_case(Cfg, basic).

rwlock(suite) ->
    [];
rwlock(doc) ->
    [];
rwlock(Cfg) ->
    drv_case(Cfg, rwlock).

tsd(suite) ->
    [];
tsd(doc) ->
    [];
tsd(Cfg) ->
    drv_case(Cfg, tsd).

drv_case(Config, CaseName) ->
    drv_case(Config, CaseName, "").

drv_case(Config, CaseName, TimeTrap) when is_integer(TimeTrap) ->
    drv_case(Config, CaseName, "", TimeTrap);
drv_case(Config, CaseName, Command) when is_list(Command) ->
    drv_case(Config, CaseName, Command, 240).

drv_case(Config, CaseName, TimeTrap, Command)
    when is_list(Command), is_integer(TimeTrap) ->
    drv_case(Config, CaseName, Command, TimeTrap);
drv_case(Config, CaseName, Command, TimeTrap)
    when
        is_list(Config),
        is_atom(CaseName),
        is_list(Command),
        is_integer(TimeTrap) ->
    case test_server:os_type() of
        {Family,_} when Family == unix; Family == win32 ->
            run_drv_case(Config, CaseName, Command, TimeTrap);
        SkipOs ->
            {skipped,
             lists:flatten(["Not run on "|io_lib:format("~p", [SkipOs])])}
    end.

run_drv_case(Config, CaseName, Command, TimeTrap) ->
    Dog = test_server:timetrap(test_server:seconds(TimeTrap)),
    DataDir = test_server:lookup_config(data_dir, Config),
    case erl_ddll:load_driver(DataDir, CaseName) of
        ok ->
            ok;
        {error,Error} ->
            io:format("~s\n", [erl_ddll:format_error(Error)]),
            test_server:fail()
    end,
    Port = open_port({spawn,atom_to_list(CaseName)}, []),
    true = is_port(Port),
    Port ! {self(),{command,Command}},
    Result = receive_drv_result(Port, CaseName),
    Port ! {self(),close},
    receive
        {Port,closed} ->
            ok
    end,
    ok = erl_ddll:unload_driver(CaseName),
    test_server:timetrap_cancel(Dog),
    Result.

receive_drv_result(Port, CaseName) ->
    receive
        {print,Port,CaseName,Str} ->
            test_server:format("~s", [Str]),
            receive_drv_result(Port, CaseName);
        {'EXIT',Port,Error} ->
            test_server:fail(Error);
        {'EXIT',error,Error} ->
            test_server:fail(Error);
        {failed,Port,CaseName,Comment} ->
            test_server:fail(Comment);
        {skipped,Port,CaseName,Comment} ->
            {skipped,Comment};
        {succeeded,Port,CaseName,""} ->
            succeeded;
        {succeeded,Port,CaseName,Comment} ->
            {comment,Comment}
    end.



