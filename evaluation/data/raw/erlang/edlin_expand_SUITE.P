-file("test/lib/stdlib/test/edlin_expand_SUITE.erl", 1).

-module(edlin_expand_SUITE).

-export([all/0,
         suite/0,
         groups/0,
         init_per_suite/1,
         end_per_suite/1,
         init_per_group/2,
         end_per_group/2]).

-export([normal/1,quoted_fun/1,quoted_module/1,quoted_both/1]).

-export([init_per_testcase/2,end_per_testcase/2]).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/lib/stdlib/test/edlin_expand_SUITE.erl", 28).

init_per_testcase(_Case, Config) ->
    Dog = test_server:timetrap(test_server:minutes(1)),
    [{watchdog,Dog}|Config].

end_per_testcase(_Case, Config) ->
    Dog = test_server:lookup_config(watchdog, Config),
    test_server:timetrap_cancel(Dog),
    ok.

suite() ->
    [{ct_hooks,[ts_install_cth]}].

all() ->
    [normal,quoted_fun,quoted_module,quoted_both].

groups() ->
    [].

init_per_suite(Config) ->
    catch code:delete(expand_test),
    catch code:delete(expand_test1),
    catch code:delete('ExpandTestCaps'),
    catch code:delete('ExpandTestCaps1'),
    Config.

end_per_suite(_Config) ->
    ok.

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, Config) ->
    Config.

normal(doc) ->
    [""];
normal(suite) ->
    [];
normal(Config) when is_list(Config) ->
    {module,expand_test} = c:l(expand_test),
    {yes,"test:",[]} = edlin_expand:expand(lists:reverse("expand_")),
    {no,[],[]} = edlin_expand:expand(lists:reverse("expandXX_")),
    {no,
     [],
     [{"a_fun_name",1},
      {"a_less_fun_name",1},
      {"b_comes_after_a",1},
      {"module_info",0},
      {"module_info",1}]} =
        edlin_expand:expand(lists:reverse("expand_test:")),
    {yes,[],[{"a_fun_name",1},{"a_less_fun_name",1}]} =
        edlin_expand:expand(lists:reverse("expand_test:a_")),
    ok.

quoted_fun(doc) ->
    ["Normal module name, some function names using quoted atoms"];
quoted_fun(suite) ->
    [];
quoted_fun(Config) when is_list(Config) ->
    {module,expand_test} = c:l(expand_test),
    {module,expand_test1} = c:l(expand_test1),
    {yes,"test",[]} = edlin_expand:expand(lists:reverse("expand_")),
    {no,[],[]} = edlin_expand:expand(lists:reverse("expandXX_")),
    {no,
     [],
     [{"'#weird-fun-name'",0},
      {"'Quoted_fun_name'",0},
      {"'Quoted_fun_too'",0},
      {"a_fun_name",1},
      {"a_less_fun_name",1},
      {"b_comes_after_a",1},
      {"module_info",0},
      {"module_info",1}]} =
        edlin_expand:expand(lists:reverse("expand_test1:")),
    {yes,"_",[]} = edlin_expand:expand(lists:reverse("expand_test1:a")),
    {yes,[],[{"a_fun_name",1},{"a_less_fun_name",1}]} =
        edlin_expand:expand(lists:reverse("expand_test1:a_")),
    {yes,
     [],
     [{"'#weird-fun-name'",0},
      {"'Quoted_fun_name'",0},
      {"'Quoted_fun_too'",0}]} =
        edlin_expand:expand(lists:reverse("expand_test1:'")),
    {yes,"uoted_fun_",[]} =
        edlin_expand:expand(lists:reverse("expand_test1:'Q")),
    {yes,[],[{"'Quoted_fun_name'",0},{"'Quoted_fun_too'",0}]} =
        edlin_expand:expand(lists:reverse("expand_test1:'Quoted_fun_")),
    {yes,"weird-fun-name'(",[]} =
        edlin_expand:expand(lists:reverse("expand_test1:'#")),
    ok.

quoted_module(doc) ->
    [""];
quoted_module(suite) ->
    [];
quoted_module(Config) when is_list(Config) ->
    {module,'ExpandTestCaps'} = c:l('ExpandTestCaps'),
    {yes,"Caps':",[]} =
        edlin_expand:expand(lists:reverse("'ExpandTest")),
    {no,
     [],
     [{"a_fun_name",1},
      {"a_less_fun_name",1},
      {"b_comes_after_a",1},
      {"module_info",0},
      {"module_info",1}]} =
        edlin_expand:expand(lists:reverse("'ExpandTestCaps':")),
    {yes,[],[{"a_fun_name",1},{"a_less_fun_name",1}]} =
        edlin_expand:expand(lists:reverse("'ExpandTestCaps':a_")),
    ok.

quoted_both(suite) ->
    [];
quoted_both(Config) when is_list(Config) ->
    {module,'ExpandTestCaps'} = c:l('ExpandTestCaps'),
    {module,'ExpandTestCaps1'} = c:l('ExpandTestCaps1'),
    {yes,"Caps",[]} = edlin_expand:expand(lists:reverse("'ExpandTest")),
    {no,
     [],
     [{"'#weird-fun-name'",0},
      {"'Quoted_fun_name'",0},
      {"'Quoted_fun_too'",0},
      {"a_fun_name",1},
      {"a_less_fun_name",1},
      {"b_comes_after_a",1},
      {"module_info",0},
      {"module_info",1}]} =
        edlin_expand:expand(lists:reverse("'ExpandTestCaps1':")),
    {yes,"_",[]} =
        edlin_expand:expand(lists:reverse("'ExpandTestCaps1':a")),
    {yes,[],[{"a_fun_name",1},{"a_less_fun_name",1}]} =
        edlin_expand:expand(lists:reverse("'ExpandTestCaps1':a_")),
    {yes,
     [],
     [{"'#weird-fun-name'",0},
      {"'Quoted_fun_name'",0},
      {"'Quoted_fun_too'",0}]} =
        edlin_expand:expand(lists:reverse("'ExpandTestCaps1':'")),
    {yes,"uoted_fun_",[]} =
        edlin_expand:expand(lists:reverse("'ExpandTestCaps1':'Q")),
    {yes,[],[{"'Quoted_fun_name'",0},{"'Quoted_fun_too'",0}]} =
        edlin_expand:expand(lists:reverse("'ExpandTestCaps1':'Quoted_fu"
                                          "n_")),
    {yes,"weird-fun-name'(",[]} =
        edlin_expand:expand(lists:reverse("'ExpandTestCaps1':'#")),
    ok.



