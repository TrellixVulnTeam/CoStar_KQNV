-file("test/lib/wx/src/gen/gl.erl", 1).

-module(gl).

-compile(inline).

-type enum() :: non_neg_integer().

-type clamp() :: float().

-type offset() :: non_neg_integer().

-type matrix() ::
          {float(),
           float(),
           float(),
           float(),
           float(),
           float(),
           float(),
           float(),
           float(),
           float(),
           float(),
           float(),
           float(),
           float(),
           float(),
           float()}.

-type mem() :: binary() | tuple().

-export([clearIndex/1,
         clearColor/4,
         clear/1,
         indexMask/1,
         colorMask/4,
         alphaFunc/2,
         blendFunc/2,
         logicOp/1,
         cullFace/1,
         frontFace/1,
         pointSize/1,
         lineWidth/1,
         lineStipple/2,
         polygonMode/2,
         polygonOffset/2,
         polygonStipple/1,
         getPolygonStipple/0,
         edgeFlag/1,
         edgeFlagv/1,
         scissor/4,
         clipPlane/2,
         getClipPlane/1,
         drawBuffer/1,
         readBuffer/1,
         enable/1,
         disable/1,
         isEnabled/1,
         enableClientState/1,
         disableClientState/1,
         getBooleanv/1,
         getDoublev/1,
         getFloatv/1,
         getIntegerv/1,
         pushAttrib/1,
         popAttrib/0,
         pushClientAttrib/1,
         popClientAttrib/0,
         renderMode/1,
         getError/0,
         getString/1,
         finish/0,
         flush/0,
         hint/2,
         clearDepth/1,
         depthFunc/1,
         depthMask/1,
         depthRange/2,
         clearAccum/4,
         accum/2,
         matrixMode/1,
         ortho/6,
         frustum/6,
         viewport/4,
         pushMatrix/0,
         popMatrix/0,
         loadIdentity/0,
         loadMatrixd/1,
         loadMatrixf/1,
         multMatrixd/1,
         multMatrixf/1,
         rotated/4,
         rotatef/4,
         scaled/3,
         scalef/3,
         translated/3,
         translatef/3,
         isList/1,
         deleteLists/2,
         genLists/1,
         newList/2,
         endList/0,
         callList/1,
         callLists/1,
         listBase/1,
         'begin'/1,
         'end'/0,
         vertex2d/2,
         vertex2f/2,
         vertex2i/2,
         vertex2s/2,
         vertex3d/3,
         vertex3f/3,
         vertex3i/3,
         vertex3s/3,
         vertex4d/4,
         vertex4f/4,
         vertex4i/4,
         vertex4s/4,
         vertex2dv/1,
         vertex2fv/1,
         vertex2iv/1,
         vertex2sv/1,
         vertex3dv/1,
         vertex3fv/1,
         vertex3iv/1,
         vertex3sv/1,
         vertex4dv/1,
         vertex4fv/1,
         vertex4iv/1,
         vertex4sv/1,
         normal3b/3,
         normal3d/3,
         normal3f/3,
         normal3i/3,
         normal3s/3,
         normal3bv/1,
         normal3dv/1,
         normal3fv/1,
         normal3iv/1,
         normal3sv/1,
         indexd/1,
         indexf/1,
         indexi/1,
         indexs/1,
         indexub/1,
         indexdv/1,
         indexfv/1,
         indexiv/1,
         indexsv/1,
         indexubv/1,
         color3b/3,
         color3d/3,
         color3f/3,
         color3i/3,
         color3s/3,
         color3ub/3,
         color3ui/3,
         color3us/3,
         color4b/4,
         color4d/4,
         color4f/4,
         color4i/4,
         color4s/4,
         color4ub/4,
         color4ui/4,
         color4us/4,
         color3bv/1,
         color3dv/1,
         color3fv/1,
         color3iv/1,
         color3sv/1,
         color3ubv/1,
         color3uiv/1,
         color3usv/1,
         color4bv/1,
         color4dv/1,
         color4fv/1,
         color4iv/1,
         color4sv/1,
         color4ubv/1,
         color4uiv/1,
         color4usv/1,
         texCoord1d/1,
         texCoord1f/1,
         texCoord1i/1,
         texCoord1s/1,
         texCoord2d/2,
         texCoord2f/2,
         texCoord2i/2,
         texCoord2s/2,
         texCoord3d/3,
         texCoord3f/3,
         texCoord3i/3,
         texCoord3s/3,
         texCoord4d/4,
         texCoord4f/4,
         texCoord4i/4,
         texCoord4s/4,
         texCoord1dv/1,
         texCoord1fv/1,
         texCoord1iv/1,
         texCoord1sv/1,
         texCoord2dv/1,
         texCoord2fv/1,
         texCoord2iv/1,
         texCoord2sv/1,
         texCoord3dv/1,
         texCoord3fv/1,
         texCoord3iv/1,
         texCoord3sv/1,
         texCoord4dv/1,
         texCoord4fv/1,
         texCoord4iv/1,
         texCoord4sv/1,
         rasterPos2d/2,
         rasterPos2f/2,
         rasterPos2i/2,
         rasterPos2s/2,
         rasterPos3d/3,
         rasterPos3f/3,
         rasterPos3i/3,
         rasterPos3s/3,
         rasterPos4d/4,
         rasterPos4f/4,
         rasterPos4i/4,
         rasterPos4s/4,
         rasterPos2dv/1,
         rasterPos2fv/1,
         rasterPos2iv/1,
         rasterPos2sv/1,
         rasterPos3dv/1,
         rasterPos3fv/1,
         rasterPos3iv/1,
         rasterPos3sv/1,
         rasterPos4dv/1,
         rasterPos4fv/1,
         rasterPos4iv/1,
         rasterPos4sv/1,
         rectd/4,
         rectf/4,
         recti/4,
         rects/4,
         rectdv/2,
         rectfv/2,
         rectiv/2,
         rectsv/2,
         vertexPointer/4,
         normalPointer/3,
         colorPointer/4,
         indexPointer/3,
         texCoordPointer/4,
         edgeFlagPointer/2,
         arrayElement/1,
         drawArrays/3,
         drawElements/4,
         interleavedArrays/3,
         shadeModel/1,
         lightf/3,
         lighti/3,
         lightfv/3,
         lightiv/3,
         getLightfv/2,
         getLightiv/2,
         lightModelf/2,
         lightModeli/2,
         lightModelfv/2,
         lightModeliv/2,
         materialf/3,
         materiali/3,
         materialfv/3,
         materialiv/3,
         getMaterialfv/2,
         getMaterialiv/2,
         colorMaterial/2,
         pixelZoom/2,
         pixelStoref/2,
         pixelStorei/2,
         pixelTransferf/2,
         pixelTransferi/2,
         pixelMapfv/3,
         pixelMapuiv/3,
         pixelMapusv/3,
         getPixelMapfv/2,
         getPixelMapuiv/2,
         getPixelMapusv/2,
         bitmap/7,
         readPixels/7,
         drawPixels/5,
         copyPixels/5,
         stencilFunc/3,
         stencilMask/1,
         stencilOp/3,
         clearStencil/1,
         texGend/3,
         texGenf/3,
         texGeni/3,
         texGendv/3,
         texGenfv/3,
         texGeniv/3,
         getTexGendv/2,
         getTexGenfv/2,
         getTexGeniv/2,
         texEnvf/3,
         texEnvi/3,
         texEnvfv/3,
         texEnviv/3,
         getTexEnvfv/2,
         getTexEnviv/2,
         texParameterf/3,
         texParameteri/3,
         texParameterfv/3,
         texParameteriv/3,
         getTexParameterfv/2,
         getTexParameteriv/2,
         getTexLevelParameterfv/3,
         getTexLevelParameteriv/3,
         texImage1D/8,
         texImage2D/9,
         getTexImage/5,
         genTextures/1,
         deleteTextures/1,
         bindTexture/2,
         prioritizeTextures/2,
         areTexturesResident/1,
         isTexture/1,
         texSubImage1D/7,
         texSubImage2D/9,
         copyTexImage1D/7,
         copyTexImage2D/8,
         copyTexSubImage1D/6,
         copyTexSubImage2D/8,
         map1d/6,
         map1f/6,
         map2d/10,
         map2f/10,
         getMapdv/3,
         getMapfv/3,
         getMapiv/3,
         evalCoord1d/1,
         evalCoord1f/1,
         evalCoord1dv/1,
         evalCoord1fv/1,
         evalCoord2d/2,
         evalCoord2f/2,
         evalCoord2dv/1,
         evalCoord2fv/1,
         mapGrid1d/3,
         mapGrid1f/3,
         mapGrid2d/6,
         mapGrid2f/6,
         evalPoint1/1,
         evalPoint2/2,
         evalMesh1/3,
         evalMesh2/5,
         fogf/2,
         fogi/2,
         fogfv/2,
         fogiv/2,
         feedbackBuffer/3,
         passThrough/1,
         selectBuffer/2,
         initNames/0,
         loadName/1,
         pushName/1,
         popName/0,
         blendColor/4,
         blendEquation/1,
         drawRangeElements/6,
         texImage3D/10,
         texSubImage3D/11,
         copyTexSubImage3D/9,
         colorTable/6,
         colorTableParameterfv/3,
         colorTableParameteriv/3,
         copyColorTable/5,
         getColorTable/4,
         getColorTableParameterfv/2,
         getColorTableParameteriv/2,
         colorSubTable/6,
         copyColorSubTable/5,
         convolutionFilter1D/6,
         convolutionFilter2D/7,
         convolutionParameterf/3,
         convolutionParameterfv/3,
         convolutionParameteri/3,
         convolutionParameteriv/3,
         copyConvolutionFilter1D/5,
         copyConvolutionFilter2D/6,
         getConvolutionFilter/4,
         getConvolutionParameterfv/2,
         getConvolutionParameteriv/2,
         separableFilter2D/8,
         getHistogram/5,
         getHistogramParameterfv/2,
         getHistogramParameteriv/2,
         getMinmax/5,
         getMinmaxParameterfv/2,
         getMinmaxParameteriv/2,
         histogram/4,
         minmax/3,
         resetHistogram/1,
         resetMinmax/1,
         activeTexture/1,
         sampleCoverage/2,
         compressedTexImage3D/9,
         compressedTexImage2D/8,
         compressedTexImage1D/7,
         compressedTexSubImage3D/11,
         compressedTexSubImage2D/9,
         compressedTexSubImage1D/7,
         getCompressedTexImage/3,
         clientActiveTexture/1,
         multiTexCoord1d/2,
         multiTexCoord1dv/2,
         multiTexCoord1f/2,
         multiTexCoord1fv/2,
         multiTexCoord1i/2,
         multiTexCoord1iv/2,
         multiTexCoord1s/2,
         multiTexCoord1sv/2,
         multiTexCoord2d/3,
         multiTexCoord2dv/2,
         multiTexCoord2f/3,
         multiTexCoord2fv/2,
         multiTexCoord2i/3,
         multiTexCoord2iv/2,
         multiTexCoord2s/3,
         multiTexCoord2sv/2,
         multiTexCoord3d/4,
         multiTexCoord3dv/2,
         multiTexCoord3f/4,
         multiTexCoord3fv/2,
         multiTexCoord3i/4,
         multiTexCoord3iv/2,
         multiTexCoord3s/4,
         multiTexCoord3sv/2,
         multiTexCoord4d/5,
         multiTexCoord4dv/2,
         multiTexCoord4f/5,
         multiTexCoord4fv/2,
         multiTexCoord4i/5,
         multiTexCoord4iv/2,
         multiTexCoord4s/5,
         multiTexCoord4sv/2,
         loadTransposeMatrixf/1,
         loadTransposeMatrixd/1,
         multTransposeMatrixf/1,
         multTransposeMatrixd/1,
         blendFuncSeparate/4,
         multiDrawArrays/3,
         pointParameterf/2,
         pointParameterfv/2,
         pointParameteri/2,
         pointParameteriv/2,
         fogCoordf/1,
         fogCoordfv/1,
         fogCoordd/1,
         fogCoorddv/1,
         fogCoordPointer/3,
         secondaryColor3b/3,
         secondaryColor3bv/1,
         secondaryColor3d/3,
         secondaryColor3dv/1,
         secondaryColor3f/3,
         secondaryColor3fv/1,
         secondaryColor3i/3,
         secondaryColor3iv/1,
         secondaryColor3s/3,
         secondaryColor3sv/1,
         secondaryColor3ub/3,
         secondaryColor3ubv/1,
         secondaryColor3ui/3,
         secondaryColor3uiv/1,
         secondaryColor3us/3,
         secondaryColor3usv/1,
         secondaryColorPointer/4,
         windowPos2d/2,
         windowPos2dv/1,
         windowPos2f/2,
         windowPos2fv/1,
         windowPos2i/2,
         windowPos2iv/1,
         windowPos2s/2,
         windowPos2sv/1,
         windowPos3d/3,
         windowPos3dv/1,
         windowPos3f/3,
         windowPos3fv/1,
         windowPos3i/3,
         windowPos3iv/1,
         windowPos3s/3,
         windowPos3sv/1,
         genQueries/1,
         deleteQueries/1,
         isQuery/1,
         beginQuery/2,
         endQuery/1,
         getQueryiv/2,
         getQueryObjectiv/2,
         getQueryObjectuiv/2,
         bindBuffer/2,
         deleteBuffers/1,
         genBuffers/1,
         isBuffer/1,
         bufferData/4,
         bufferSubData/4,
         getBufferSubData/4,
         getBufferParameteriv/2,
         blendEquationSeparate/2,
         drawBuffers/1,
         stencilOpSeparate/4,
         stencilFuncSeparate/4,
         stencilMaskSeparate/2,
         attachShader/2,
         bindAttribLocation/3,
         compileShader/1,
         createProgram/0,
         createShader/1,
         deleteProgram/1,
         deleteShader/1,
         detachShader/2,
         disableVertexAttribArray/1,
         enableVertexAttribArray/1,
         getActiveAttrib/3,
         getActiveUniform/3,
         getAttachedShaders/2,
         getAttribLocation/2,
         getProgramiv/2,
         getProgramInfoLog/2,
         getShaderiv/2,
         getShaderInfoLog/2,
         getShaderSource/2,
         getUniformLocation/2,
         getUniformfv/2,
         getUniformiv/2,
         getVertexAttribdv/2,
         getVertexAttribfv/2,
         getVertexAttribiv/2,
         isProgram/1,
         isShader/1,
         linkProgram/1,
         shaderSource/2,
         useProgram/1,
         uniform1f/2,
         uniform2f/3,
         uniform3f/4,
         uniform4f/5,
         uniform1i/2,
         uniform2i/3,
         uniform3i/4,
         uniform4i/5,
         uniform1fv/2,
         uniform2fv/2,
         uniform3fv/2,
         uniform4fv/2,
         uniform1iv/2,
         uniform2iv/2,
         uniform3iv/2,
         uniform4iv/2,
         uniformMatrix2fv/3,
         uniformMatrix3fv/3,
         uniformMatrix4fv/3,
         validateProgram/1,
         vertexAttrib1d/2,
         vertexAttrib1dv/2,
         vertexAttrib1f/2,
         vertexAttrib1fv/2,
         vertexAttrib1s/2,
         vertexAttrib1sv/2,
         vertexAttrib2d/3,
         vertexAttrib2dv/2,
         vertexAttrib2f/3,
         vertexAttrib2fv/2,
         vertexAttrib2s/3,
         vertexAttrib2sv/2,
         vertexAttrib3d/4,
         vertexAttrib3dv/2,
         vertexAttrib3f/4,
         vertexAttrib3fv/2,
         vertexAttrib3s/4,
         vertexAttrib3sv/2,
         vertexAttrib4Nbv/2,
         vertexAttrib4Niv/2,
         vertexAttrib4Nsv/2,
         vertexAttrib4Nub/5,
         vertexAttrib4Nubv/2,
         vertexAttrib4Nuiv/2,
         vertexAttrib4Nusv/2,
         vertexAttrib4bv/2,
         vertexAttrib4d/5,
         vertexAttrib4dv/2,
         vertexAttrib4f/5,
         vertexAttrib4fv/2,
         vertexAttrib4iv/2,
         vertexAttrib4s/5,
         vertexAttrib4sv/2,
         vertexAttrib4ubv/2,
         vertexAttrib4uiv/2,
         vertexAttrib4usv/2,
         vertexAttribPointer/6,
         uniformMatrix2x3fv/3,
         uniformMatrix3x2fv/3,
         uniformMatrix2x4fv/3,
         uniformMatrix4x2fv/3,
         uniformMatrix3x4fv/3,
         uniformMatrix4x3fv/3,
         colorMaski/5,
         getBooleani_v/2,
         getIntegeri_v/2,
         enablei/2,
         disablei/2,
         isEnabledi/2,
         beginTransformFeedback/1,
         endTransformFeedback/0,
         bindBufferRange/5,
         bindBufferBase/3,
         transformFeedbackVaryings/3,
         getTransformFeedbackVarying/3,
         clampColor/2,
         beginConditionalRender/2,
         endConditionalRender/0,
         vertexAttribIPointer/5,
         getVertexAttribIiv/2,
         getVertexAttribIuiv/2,
         vertexAttribI1i/2,
         vertexAttribI2i/3,
         vertexAttribI3i/4,
         vertexAttribI4i/5,
         vertexAttribI1ui/2,
         vertexAttribI2ui/3,
         vertexAttribI3ui/4,
         vertexAttribI4ui/5,
         vertexAttribI1iv/2,
         vertexAttribI2iv/2,
         vertexAttribI3iv/2,
         vertexAttribI4iv/2,
         vertexAttribI1uiv/2,
         vertexAttribI2uiv/2,
         vertexAttribI3uiv/2,
         vertexAttribI4uiv/2,
         vertexAttribI4bv/2,
         vertexAttribI4sv/2,
         vertexAttribI4ubv/2,
         vertexAttribI4usv/2,
         getUniformuiv/2,
         bindFragDataLocation/3,
         getFragDataLocation/2,
         uniform1ui/2,
         uniform2ui/3,
         uniform3ui/4,
         uniform4ui/5,
         uniform1uiv/2,
         uniform2uiv/2,
         uniform3uiv/2,
         uniform4uiv/2,
         texParameterIiv/3,
         texParameterIuiv/3,
         getTexParameterIiv/2,
         getTexParameterIuiv/2,
         clearBufferiv/3,
         clearBufferuiv/3,
         clearBufferfv/3,
         clearBufferfi/4,
         getStringi/2,
         drawArraysInstanced/4,
         drawElementsInstanced/5,
         texBuffer/3,
         primitiveRestartIndex/1,
         getInteger64i_v/2,
         getBufferParameteri64v/2,
         framebufferTexture/4,
         vertexAttribDivisor/2,
         minSampleShading/1,
         blendEquationi/2,
         blendEquationSeparatei/3,
         blendFunci/3,
         blendFuncSeparatei/5,
         loadTransposeMatrixfARB/1,
         loadTransposeMatrixdARB/1,
         multTransposeMatrixfARB/1,
         multTransposeMatrixdARB/1,
         weightbvARB/1,
         weightsvARB/1,
         weightivARB/1,
         weightfvARB/1,
         weightdvARB/1,
         weightubvARB/1,
         weightusvARB/1,
         weightuivARB/1,
         vertexBlendARB/1,
         currentPaletteMatrixARB/1,
         matrixIndexubvARB/1,
         matrixIndexusvARB/1,
         matrixIndexuivARB/1,
         programStringARB/3,
         bindProgramARB/2,
         deleteProgramsARB/1,
         genProgramsARB/1,
         programEnvParameter4dARB/6,
         programEnvParameter4dvARB/3,
         programEnvParameter4fARB/6,
         programEnvParameter4fvARB/3,
         programLocalParameter4dARB/6,
         programLocalParameter4dvARB/3,
         programLocalParameter4fARB/6,
         programLocalParameter4fvARB/3,
         getProgramEnvParameterdvARB/2,
         getProgramEnvParameterfvARB/2,
         getProgramLocalParameterdvARB/2,
         getProgramLocalParameterfvARB/2,
         getProgramStringARB/3,
         getBufferParameterivARB/2,
         deleteObjectARB/1,
         getHandleARB/1,
         detachObjectARB/2,
         createShaderObjectARB/1,
         shaderSourceARB/2,
         compileShaderARB/1,
         createProgramObjectARB/0,
         attachObjectARB/2,
         linkProgramARB/1,
         useProgramObjectARB/1,
         validateProgramARB/1,
         getObjectParameterfvARB/2,
         getObjectParameterivARB/2,
         getInfoLogARB/2,
         getAttachedObjectsARB/2,
         getUniformLocationARB/2,
         getActiveUniformARB/3,
         getUniformfvARB/2,
         getUniformivARB/2,
         getShaderSourceARB/2,
         bindAttribLocationARB/3,
         getActiveAttribARB/3,
         getAttribLocationARB/2,
         isRenderbuffer/1,
         bindRenderbuffer/2,
         deleteRenderbuffers/1,
         genRenderbuffers/1,
         renderbufferStorage/4,
         getRenderbufferParameteriv/2,
         isFramebuffer/1,
         bindFramebuffer/2,
         deleteFramebuffers/1,
         genFramebuffers/1,
         checkFramebufferStatus/1,
         framebufferTexture1D/5,
         framebufferTexture2D/5,
         framebufferTexture3D/6,
         framebufferRenderbuffer/4,
         getFramebufferAttachmentParameteriv/3,
         generateMipmap/1,
         blitFramebuffer/10,
         renderbufferStorageMultisample/5,
         framebufferTextureLayer/5,
         framebufferTextureFaceARB/5,
         flushMappedBufferRange/3,
         bindVertexArray/1,
         deleteVertexArrays/1,
         genVertexArrays/1,
         isVertexArray/1,
         getUniformIndices/2,
         getActiveUniformsiv/3,
         getActiveUniformName/3,
         getUniformBlockIndex/2,
         getActiveUniformBlockiv/4,
         getActiveUniformBlockName/3,
         uniformBlockBinding/3,
         copyBufferSubData/5,
         drawElementsBaseVertex/5,
         drawRangeElementsBaseVertex/7,
         drawElementsInstancedBaseVertex/6,
         provokingVertex/1,
         fenceSync/2,
         isSync/1,
         deleteSync/1,
         clientWaitSync/3,
         waitSync/3,
         getInteger64v/1,
         getSynciv/3,
         texImage2DMultisample/6,
         texImage3DMultisample/7,
         getMultisamplefv/2,
         sampleMaski/2,
         namedStringARB/3,
         deleteNamedStringARB/1,
         compileShaderIncludeARB/2,
         isNamedStringARB/1,
         getNamedStringARB/2,
         getNamedStringivARB/2,
         bindFragDataLocationIndexed/4,
         getFragDataIndex/2,
         genSamplers/1,
         deleteSamplers/1,
         isSampler/1,
         bindSampler/2,
         samplerParameteri/3,
         samplerParameteriv/3,
         samplerParameterf/3,
         samplerParameterfv/3,
         samplerParameterIiv/3,
         samplerParameterIuiv/3,
         getSamplerParameteriv/2,
         getSamplerParameterIiv/2,
         getSamplerParameterfv/2,
         getSamplerParameterIuiv/2,
         queryCounter/2,
         getQueryObjecti64v/2,
         getQueryObjectui64v/2,
         drawArraysIndirect/2,
         drawElementsIndirect/3,
         uniform1d/2,
         uniform2d/3,
         uniform3d/4,
         uniform4d/5,
         uniform1dv/2,
         uniform2dv/2,
         uniform3dv/2,
         uniform4dv/2,
         uniformMatrix2dv/3,
         uniformMatrix3dv/3,
         uniformMatrix4dv/3,
         uniformMatrix2x3dv/3,
         uniformMatrix2x4dv/3,
         uniformMatrix3x2dv/3,
         uniformMatrix3x4dv/3,
         uniformMatrix4x2dv/3,
         uniformMatrix4x3dv/3,
         getUniformdv/2,
         getSubroutineUniformLocation/3,
         getSubroutineIndex/3,
         getActiveSubroutineUniformName/4,
         getActiveSubroutineName/4,
         uniformSubroutinesuiv/2,
         getUniformSubroutineuiv/2,
         getProgramStageiv/3,
         patchParameteri/2,
         patchParameterfv/2,
         bindTransformFeedback/2,
         deleteTransformFeedbacks/1,
         genTransformFeedbacks/1,
         isTransformFeedback/1,
         pauseTransformFeedback/0,
         resumeTransformFeedback/0,
         drawTransformFeedback/2,
         drawTransformFeedbackStream/3,
         beginQueryIndexed/3,
         endQueryIndexed/2,
         getQueryIndexediv/3,
         releaseShaderCompiler/0,
         shaderBinary/3,
         getShaderPrecisionFormat/2,
         depthRangef/2,
         clearDepthf/1,
         getProgramBinary/2,
         programBinary/3,
         programParameteri/3,
         useProgramStages/3,
         activeShaderProgram/2,
         createShaderProgramv/2,
         bindProgramPipeline/1,
         deleteProgramPipelines/1,
         genProgramPipelines/1,
         isProgramPipeline/1,
         getProgramPipelineiv/2,
         programUniform1i/3,
         programUniform1iv/3,
         programUniform1f/3,
         programUniform1fv/3,
         programUniform1d/3,
         programUniform1dv/3,
         programUniform1ui/3,
         programUniform1uiv/3,
         programUniform2i/4,
         programUniform2iv/3,
         programUniform2f/4,
         programUniform2fv/3,
         programUniform2d/4,
         programUniform2dv/3,
         programUniform2ui/4,
         programUniform2uiv/3,
         programUniform3i/5,
         programUniform3iv/3,
         programUniform3f/5,
         programUniform3fv/3,
         programUniform3d/5,
         programUniform3dv/3,
         programUniform3ui/5,
         programUniform3uiv/3,
         programUniform4i/6,
         programUniform4iv/3,
         programUniform4f/6,
         programUniform4fv/3,
         programUniform4d/6,
         programUniform4dv/3,
         programUniform4ui/6,
         programUniform4uiv/3,
         programUniformMatrix2fv/4,
         programUniformMatrix3fv/4,
         programUniformMatrix4fv/4,
         programUniformMatrix2dv/4,
         programUniformMatrix3dv/4,
         programUniformMatrix4dv/4,
         programUniformMatrix2x3fv/4,
         programUniformMatrix3x2fv/4,
         programUniformMatrix2x4fv/4,
         programUniformMatrix4x2fv/4,
         programUniformMatrix3x4fv/4,
         programUniformMatrix4x3fv/4,
         programUniformMatrix2x3dv/4,
         programUniformMatrix3x2dv/4,
         programUniformMatrix2x4dv/4,
         programUniformMatrix4x2dv/4,
         programUniformMatrix3x4dv/4,
         programUniformMatrix4x3dv/4,
         validateProgramPipeline/1,
         getProgramPipelineInfoLog/2,
         vertexAttribL1d/2,
         vertexAttribL2d/3,
         vertexAttribL3d/4,
         vertexAttribL4d/5,
         vertexAttribL1dv/2,
         vertexAttribL2dv/2,
         vertexAttribL3dv/2,
         vertexAttribL4dv/2,
         vertexAttribLPointer/5,
         getVertexAttribLdv/2,
         viewportArrayv/2,
         viewportIndexedf/5,
         viewportIndexedfv/2,
         scissorArrayv/2,
         scissorIndexed/5,
         scissorIndexedv/2,
         depthRangeArrayv/2,
         depthRangeIndexed/3,
         getFloati_v/2,
         getDoublei_v/2,
         debugMessageControlARB/5,
         debugMessageInsertARB/5,
         getDebugMessageLogARB/2,
         getGraphicsResetStatusARB/0,
         drawArraysInstancedBaseInstance/5,
         drawElementsInstancedBaseInstance/6,
         drawElementsInstancedBaseVertexBaseInstance/7,
         drawTransformFeedbackInstanced/3,
         drawTransformFeedbackStreamInstanced/4,
         getInternalformativ/4,
         bindImageTexture/7,
         memoryBarrier/1,
         texStorage1D/4,
         texStorage2D/5,
         texStorage3D/6,
         depthBoundsEXT/2,
         stencilClearTagEXT/2]).

-export([call/2,cast/2,send_bin/1]).

call(Op, Args) ->
    Port = get(opengl_port),
    _ = port_control(Port, Op, Args),
    rec().

cast(Op, Args) ->
    Port = get(opengl_port),
    _ = port_control(Port, Op, Args),
    ok.

rec() ->
    receive
        {'_egl_result_',Res} ->
            Res;
        {'_egl_error_',Op,Res} ->
            error({error,Res,Op})
    end.

send_bin(Bin) when is_binary(Bin) ->
    Port = get(opengl_port),
    port_command(Port, Bin);
send_bin(Tuple) when is_tuple(Tuple) ->
    Port = get(opengl_port),
    case element(2, Tuple) of
        Bin when is_binary(Bin) ->
            port_command(Port, Bin)
    end.

-spec clearIndex(C) -> ok when is_subtype(C, float()).

clearIndex(C) ->
    cast(5037, <<C:32/native-float>>).

-spec clearColor(Red, Green, Blue, Alpha) -> ok
                    when
                        is_subtype(Red, clamp()),
                        is_subtype(Green, clamp()),
                        is_subtype(Blue, clamp()),
                        is_subtype(Alpha, clamp()).

clearColor(Red, Green, Blue, Alpha) ->
    cast(5038,
         <<Red:32/native-float,
           Green:32/native-float,
           Blue:32/native-float,
           Alpha:32/native-float>>).

-spec clear(Mask) -> ok when is_subtype(Mask, integer()).

clear(Mask) ->
    cast(5039, <<Mask:32/native-unsigned>>).

-spec indexMask(Mask) -> ok when is_subtype(Mask, integer()).

indexMask(Mask) ->
    cast(5040, <<Mask:32/native-unsigned>>).

-spec colorMask(Red, Green, Blue, Alpha) -> ok
                   when
                       is_subtype(Red, 0 | 1),
                       is_subtype(Green, 0 | 1),
                       is_subtype(Blue, 0 | 1),
                       is_subtype(Alpha, 0 | 1).

colorMask(Red, Green, Blue, Alpha) ->
    cast(5041,
         <<Red:8/native-unsigned,
           Green:8/native-unsigned,
           Blue:8/native-unsigned,
           Alpha:8/native-unsigned>>).

-spec alphaFunc(Func, Ref) -> ok
                   when
                       is_subtype(Func, enum()),
                       is_subtype(Ref, clamp()).

alphaFunc(Func, Ref) ->
    cast(5042, <<Func:32/native-unsigned,Ref:32/native-float>>).

-spec blendFunc(Sfactor, Dfactor) -> ok
                   when
                       is_subtype(Sfactor, enum()),
                       is_subtype(Dfactor, enum()).

blendFunc(Sfactor, Dfactor) ->
    cast(5043,
         <<Sfactor:32/native-unsigned,Dfactor:32/native-unsigned>>).

-spec logicOp(Opcode) -> ok when is_subtype(Opcode, enum()).

logicOp(Opcode) ->
    cast(5044, <<Opcode:32/native-unsigned>>).

-spec cullFace(Mode) -> ok when is_subtype(Mode, enum()).

cullFace(Mode) ->
    cast(5045, <<Mode:32/native-unsigned>>).

-spec frontFace(Mode) -> ok when is_subtype(Mode, enum()).

frontFace(Mode) ->
    cast(5046, <<Mode:32/native-unsigned>>).

-spec pointSize(Size) -> ok when is_subtype(Size, float()).

pointSize(Size) ->
    cast(5047, <<Size:32/native-float>>).

-spec lineWidth(Width) -> ok when is_subtype(Width, float()).

lineWidth(Width) ->
    cast(5048, <<Width:32/native-float>>).

-spec lineStipple(Factor, Pattern) -> ok
                     when
                         is_subtype(Factor, integer()),
                         is_subtype(Pattern, integer()).

lineStipple(Factor, Pattern) ->
    cast(5049, <<Factor:32/native-signed,Pattern:16/native-unsigned>>).

-spec polygonMode(Face, Mode) -> ok
                     when
                         is_subtype(Face, enum()),
                         is_subtype(Mode, enum()).

polygonMode(Face, Mode) ->
    cast(5050, <<Face:32/native-unsigned,Mode:32/native-unsigned>>).

-spec polygonOffset(Factor, Units) -> ok
                       when
                           is_subtype(Factor, float()),
                           is_subtype(Units, float()).

polygonOffset(Factor, Units) ->
    cast(5051, <<Factor:32/native-float,Units:32/native-float>>).

-spec polygonStipple(Mask) -> ok when is_subtype(Mask, binary()).

polygonStipple(Mask) ->
    send_bin(Mask),
    cast(5052, <<>>).

-spec getPolygonStipple() -> binary().

getPolygonStipple() ->
    call(5053, <<>>).

-spec edgeFlag(Flag) -> ok when is_subtype(Flag, 0 | 1).

edgeFlag(Flag) ->
    cast(5054, <<Flag:8/native-unsigned>>).

-spec edgeFlagv(Flag) -> ok when is_subtype(Flag, {Flag :: 0 | 1}).

edgeFlagv({Flag}) ->
    edgeFlag(Flag).

-spec scissor(X, Y, Width, Height) -> ok
                 when
                     is_subtype(X, integer()),
                     is_subtype(Y, integer()),
                     is_subtype(Width, integer()),
                     is_subtype(Height, integer()).

scissor(X, Y, Width, Height) ->
    cast(5055,
         <<X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed>>).

-spec clipPlane(Plane, Equation) -> ok
                   when
                       is_subtype(Plane, enum()),
                       is_subtype(Equation,
                                  {float(), float(), float(), float()}).

clipPlane(Plane, {E1,E2,E3,E4}) ->
    cast(5056,
         <<Plane:32/native-unsigned,
           0:32,
           E1:64/native-float,
           E2:64/native-float,
           E3:64/native-float,
           E4:64/native-float>>).

-spec getClipPlane(Plane) -> {float(), float(), float(), float()}
                      when is_subtype(Plane, enum()).

getClipPlane(Plane) ->
    call(5057, <<Plane:32/native-unsigned>>).

-spec drawBuffer(Mode) -> ok when is_subtype(Mode, enum()).

drawBuffer(Mode) ->
    cast(5058, <<Mode:32/native-unsigned>>).

-spec readBuffer(Mode) -> ok when is_subtype(Mode, enum()).

readBuffer(Mode) ->
    cast(5059, <<Mode:32/native-unsigned>>).

-spec enable(Cap) -> ok when is_subtype(Cap, enum()).

enable(Cap) ->
    cast(5060, <<Cap:32/native-unsigned>>).

-spec disable(Cap) -> ok when is_subtype(Cap, enum()).

disable(Cap) ->
    cast(5061, <<Cap:32/native-unsigned>>).

-spec isEnabled(Cap) -> 0 | 1 when is_subtype(Cap, enum()).

isEnabled(Cap) ->
    call(5062, <<Cap:32/native-unsigned>>).

-spec enableClientState(Cap) -> ok when is_subtype(Cap, enum()).

enableClientState(Cap) ->
    cast(5063, <<Cap:32/native-unsigned>>).

-spec disableClientState(Cap) -> ok when is_subtype(Cap, enum()).

disableClientState(Cap) ->
    cast(5064, <<Cap:32/native-unsigned>>).

-spec getBooleanv(Pname) -> [0 | 1] when is_subtype(Pname, enum()).

getBooleanv(Pname) ->
    call(5065, <<Pname:32/native-unsigned>>).

-spec getDoublev(Pname) -> [float()] when is_subtype(Pname, enum()).

getDoublev(Pname) ->
    call(5066, <<Pname:32/native-unsigned>>).

-spec getFloatv(Pname) -> [float()] when is_subtype(Pname, enum()).

getFloatv(Pname) ->
    call(5067, <<Pname:32/native-unsigned>>).

-spec getIntegerv(Pname) -> [integer()] when is_subtype(Pname, enum()).

getIntegerv(Pname) ->
    call(5068, <<Pname:32/native-unsigned>>).

-spec pushAttrib(Mask) -> ok when is_subtype(Mask, integer()).

pushAttrib(Mask) ->
    cast(5069, <<Mask:32/native-unsigned>>).

-spec popAttrib() -> ok.

popAttrib() ->
    cast(5070, <<>>).

-spec pushClientAttrib(Mask) -> ok when is_subtype(Mask, integer()).

pushClientAttrib(Mask) ->
    cast(5071, <<Mask:32/native-unsigned>>).

-spec popClientAttrib() -> ok.

popClientAttrib() ->
    cast(5072, <<>>).

-spec renderMode(Mode) -> integer() when is_subtype(Mode, enum()).

renderMode(Mode) ->
    call(5073, <<Mode:32/native-unsigned>>).

-spec getError() -> enum().

getError() ->
    call(5074, <<>>).

-spec getString(Name) -> string() when is_subtype(Name, enum()).

getString(Name) ->
    call(5075, <<Name:32/native-unsigned>>).

-spec finish() -> ok.

finish() ->
    cast(5076, <<>>).

-spec flush() -> ok.

flush() ->
    cast(5077, <<>>).

-spec hint(Target, Mode) -> ok
              when is_subtype(Target, enum()), is_subtype(Mode, enum()).

hint(Target, Mode) ->
    cast(5078, <<Target:32/native-unsigned,Mode:32/native-unsigned>>).

-spec clearDepth(Depth) -> ok when is_subtype(Depth, clamp()).

clearDepth(Depth) ->
    cast(5079, <<Depth:64/native-float>>).

-spec depthFunc(Func) -> ok when is_subtype(Func, enum()).

depthFunc(Func) ->
    cast(5080, <<Func:32/native-unsigned>>).

-spec depthMask(Flag) -> ok when is_subtype(Flag, 0 | 1).

depthMask(Flag) ->
    cast(5081, <<Flag:8/native-unsigned>>).

-spec depthRange(Near_val, Far_val) -> ok
                    when
                        is_subtype(Near_val, clamp()),
                        is_subtype(Far_val, clamp()).

depthRange(Near_val, Far_val) ->
    cast(5082, <<Near_val:64/native-float,Far_val:64/native-float>>).

-spec clearAccum(Red, Green, Blue, Alpha) -> ok
                    when
                        is_subtype(Red, float()),
                        is_subtype(Green, float()),
                        is_subtype(Blue, float()),
                        is_subtype(Alpha, float()).

clearAccum(Red, Green, Blue, Alpha) ->
    cast(5083,
         <<Red:32/native-float,
           Green:32/native-float,
           Blue:32/native-float,
           Alpha:32/native-float>>).

-spec accum(Op, Value) -> ok
               when is_subtype(Op, enum()), is_subtype(Value, float()).

accum(Op, Value) ->
    cast(5084, <<Op:32/native-unsigned,Value:32/native-float>>).

-spec matrixMode(Mode) -> ok when is_subtype(Mode, enum()).

matrixMode(Mode) ->
    cast(5085, <<Mode:32/native-unsigned>>).

-spec ortho(Left, Right, Bottom, Top, Near_val, Far_val) -> ok
               when
                   is_subtype(Left, float()),
                   is_subtype(Right, float()),
                   is_subtype(Bottom, float()),
                   is_subtype(Top, float()),
                   is_subtype(Near_val, float()),
                   is_subtype(Far_val, float()).

ortho(Left, Right, Bottom, Top, Near_val, Far_val) ->
    cast(5086,
         <<Left:64/native-float,
           Right:64/native-float,
           Bottom:64/native-float,
           Top:64/native-float,
           Near_val:64/native-float,
           Far_val:64/native-float>>).

-spec frustum(Left, Right, Bottom, Top, Near_val, Far_val) -> ok
                 when
                     is_subtype(Left, float()),
                     is_subtype(Right, float()),
                     is_subtype(Bottom, float()),
                     is_subtype(Top, float()),
                     is_subtype(Near_val, float()),
                     is_subtype(Far_val, float()).

frustum(Left, Right, Bottom, Top, Near_val, Far_val) ->
    cast(5087,
         <<Left:64/native-float,
           Right:64/native-float,
           Bottom:64/native-float,
           Top:64/native-float,
           Near_val:64/native-float,
           Far_val:64/native-float>>).

-spec viewport(X, Y, Width, Height) -> ok
                  when
                      is_subtype(X, integer()),
                      is_subtype(Y, integer()),
                      is_subtype(Width, integer()),
                      is_subtype(Height, integer()).

viewport(X, Y, Width, Height) ->
    cast(5088,
         <<X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed>>).

-spec pushMatrix() -> ok.

pushMatrix() ->
    cast(5089, <<>>).

-spec popMatrix() -> ok.

popMatrix() ->
    cast(5090, <<>>).

-spec loadIdentity() -> ok.

loadIdentity() ->
    cast(5091, <<>>).

-spec loadMatrixd(M) -> ok when is_subtype(M, matrix()).

loadMatrixd({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}) ->
    cast(5092,
         <<M1:64/native-float,
           M2:64/native-float,
           M3:64/native-float,
           M4:64/native-float,
           M5:64/native-float,
           M6:64/native-float,
           M7:64/native-float,
           M8:64/native-float,
           M9:64/native-float,
           M10:64/native-float,
           M11:64/native-float,
           M12:64/native-float,
           M13:64/native-float,
           M14:64/native-float,
           M15:64/native-float,
           M16:64/native-float>>);
loadMatrixd({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}) ->
    cast(5092,
         <<M1:64/native-float,
           M2:64/native-float,
           M3:64/native-float,
           0:64/native-float,
           M4:64/native-float,
           M5:64/native-float,
           M6:64/native-float,
           0:64/native-float,
           M7:64/native-float,
           M8:64/native-float,
           M9:64/native-float,
           0:64/native-float,
           M10:64/native-float,
           M11:64/native-float,
           M12:64/native-float,
           1:64/native-float>>).

-spec loadMatrixf(M) -> ok when is_subtype(M, matrix()).

loadMatrixf({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}) ->
    cast(5093,
         <<M1:32/native-float,
           M2:32/native-float,
           M3:32/native-float,
           M4:32/native-float,
           M5:32/native-float,
           M6:32/native-float,
           M7:32/native-float,
           M8:32/native-float,
           M9:32/native-float,
           M10:32/native-float,
           M11:32/native-float,
           M12:32/native-float,
           M13:32/native-float,
           M14:32/native-float,
           M15:32/native-float,
           M16:32/native-float>>);
loadMatrixf({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}) ->
    cast(5093,
         <<M1:32/native-float,
           M2:32/native-float,
           M3:32/native-float,
           0:32/native-float,
           M4:32/native-float,
           M5:32/native-float,
           M6:32/native-float,
           0:32/native-float,
           M7:32/native-float,
           M8:32/native-float,
           M9:32/native-float,
           0:32/native-float,
           M10:32/native-float,
           M11:32/native-float,
           M12:32/native-float,
           1:32/native-float>>).

-spec multMatrixd(M) -> ok when is_subtype(M, matrix()).

multMatrixd({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}) ->
    cast(5094,
         <<M1:64/native-float,
           M2:64/native-float,
           M3:64/native-float,
           M4:64/native-float,
           M5:64/native-float,
           M6:64/native-float,
           M7:64/native-float,
           M8:64/native-float,
           M9:64/native-float,
           M10:64/native-float,
           M11:64/native-float,
           M12:64/native-float,
           M13:64/native-float,
           M14:64/native-float,
           M15:64/native-float,
           M16:64/native-float>>);
multMatrixd({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}) ->
    cast(5094,
         <<M1:64/native-float,
           M2:64/native-float,
           M3:64/native-float,
           0:64/native-float,
           M4:64/native-float,
           M5:64/native-float,
           M6:64/native-float,
           0:64/native-float,
           M7:64/native-float,
           M8:64/native-float,
           M9:64/native-float,
           0:64/native-float,
           M10:64/native-float,
           M11:64/native-float,
           M12:64/native-float,
           1:64/native-float>>).

-spec multMatrixf(M) -> ok when is_subtype(M, matrix()).

multMatrixf({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16}) ->
    cast(5095,
         <<M1:32/native-float,
           M2:32/native-float,
           M3:32/native-float,
           M4:32/native-float,
           M5:32/native-float,
           M6:32/native-float,
           M7:32/native-float,
           M8:32/native-float,
           M9:32/native-float,
           M10:32/native-float,
           M11:32/native-float,
           M12:32/native-float,
           M13:32/native-float,
           M14:32/native-float,
           M15:32/native-float,
           M16:32/native-float>>);
multMatrixf({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}) ->
    cast(5095,
         <<M1:32/native-float,
           M2:32/native-float,
           M3:32/native-float,
           0:32/native-float,
           M4:32/native-float,
           M5:32/native-float,
           M6:32/native-float,
           0:32/native-float,
           M7:32/native-float,
           M8:32/native-float,
           M9:32/native-float,
           0:32/native-float,
           M10:32/native-float,
           M11:32/native-float,
           M12:32/native-float,
           1:32/native-float>>).

-spec rotated(Angle, X, Y, Z) -> ok
                 when
                     is_subtype(Angle, float()),
                     is_subtype(X, float()),
                     is_subtype(Y, float()),
                     is_subtype(Z, float()).

rotated(Angle, X, Y, Z) ->
    cast(5096,
         <<Angle:64/native-float,
           X:64/native-float,
           Y:64/native-float,
           Z:64/native-float>>).

-spec rotatef(Angle, X, Y, Z) -> ok
                 when
                     is_subtype(Angle, float()),
                     is_subtype(X, float()),
                     is_subtype(Y, float()),
                     is_subtype(Z, float()).

rotatef(Angle, X, Y, Z) ->
    cast(5097,
         <<Angle:32/native-float,
           X:32/native-float,
           Y:32/native-float,
           Z:32/native-float>>).

-spec scaled(X, Y, Z) -> ok
                when
                    is_subtype(X, float()),
                    is_subtype(Y, float()),
                    is_subtype(Z, float()).

scaled(X, Y, Z) ->
    cast(5098,
         <<X:64/native-float,Y:64/native-float,Z:64/native-float>>).

-spec scalef(X, Y, Z) -> ok
                when
                    is_subtype(X, float()),
                    is_subtype(Y, float()),
                    is_subtype(Z, float()).

scalef(X, Y, Z) ->
    cast(5099,
         <<X:32/native-float,Y:32/native-float,Z:32/native-float>>).

-spec translated(X, Y, Z) -> ok
                    when
                        is_subtype(X, float()),
                        is_subtype(Y, float()),
                        is_subtype(Z, float()).

translated(X, Y, Z) ->
    cast(5100,
         <<X:64/native-float,Y:64/native-float,Z:64/native-float>>).

-spec translatef(X, Y, Z) -> ok
                    when
                        is_subtype(X, float()),
                        is_subtype(Y, float()),
                        is_subtype(Z, float()).

translatef(X, Y, Z) ->
    cast(5101,
         <<X:32/native-float,Y:32/native-float,Z:32/native-float>>).

-spec isList(List) -> 0 | 1 when is_subtype(List, integer()).

isList(List) ->
    call(5102, <<List:32/native-unsigned>>).

-spec deleteLists(List, Range) -> ok
                     when
                         is_subtype(List, integer()),
                         is_subtype(Range, integer()).

deleteLists(List, Range) ->
    cast(5103, <<List:32/native-unsigned,Range:32/native-signed>>).

-spec genLists(Range) -> integer() when is_subtype(Range, integer()).

genLists(Range) ->
    call(5104, <<Range:32/native-signed>>).

-spec newList(List, Mode) -> ok
                 when
                     is_subtype(List, integer()),
                     is_subtype(Mode, enum()).

newList(List, Mode) ->
    cast(5105, <<List:32/native-unsigned,Mode:32/native-unsigned>>).

-spec endList() -> ok.

endList() ->
    cast(5106, <<>>).

-spec callList(List) -> ok when is_subtype(List, integer()).

callList(List) ->
    cast(5107, <<List:32/native-unsigned>>).

-spec callLists(Lists) -> ok when is_subtype(Lists, [integer()]).

callLists(Lists) ->
    cast(5108,
         <<(length(Lists)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Lists
           >>/binary,
           0:((1 + length(Lists)) rem 2 * 32)>>).

-spec listBase(Base) -> ok when is_subtype(Base, integer()).

listBase(Base) ->
    cast(5109, <<Base:32/native-unsigned>>).

-spec 'begin'(Mode) -> ok when is_subtype(Mode, enum()).

'begin'(Mode) ->
    cast(5110, <<Mode:32/native-unsigned>>).

-spec 'end'() -> ok.

'end'() ->
    cast(5111, <<>>).

-spec vertex2d(X, Y) -> ok
                  when is_subtype(X, float()), is_subtype(Y, float()).

vertex2d(X, Y) ->
    cast(5112, <<X:64/native-float,Y:64/native-float>>).

-spec vertex2f(X, Y) -> ok
                  when is_subtype(X, float()), is_subtype(Y, float()).

vertex2f(X, Y) ->
    cast(5113, <<X:32/native-float,Y:32/native-float>>).

-spec vertex2i(X, Y) -> ok
                  when
                      is_subtype(X, integer()), is_subtype(Y, integer()).

vertex2i(X, Y) ->
    cast(5114, <<X:32/native-signed,Y:32/native-signed>>).

-spec vertex2s(X, Y) -> ok
                  when
                      is_subtype(X, integer()), is_subtype(Y, integer()).

vertex2s(X, Y) ->
    cast(5115, <<X:16/native-signed,Y:16/native-signed>>).

-spec vertex3d(X, Y, Z) -> ok
                  when
                      is_subtype(X, float()),
                      is_subtype(Y, float()),
                      is_subtype(Z, float()).

vertex3d(X, Y, Z) ->
    cast(5116,
         <<X:64/native-float,Y:64/native-float,Z:64/native-float>>).

-spec vertex3f(X, Y, Z) -> ok
                  when
                      is_subtype(X, float()),
                      is_subtype(Y, float()),
                      is_subtype(Z, float()).

vertex3f(X, Y, Z) ->
    cast(5117,
         <<X:32/native-float,Y:32/native-float,Z:32/native-float>>).

-spec vertex3i(X, Y, Z) -> ok
                  when
                      is_subtype(X, integer()),
                      is_subtype(Y, integer()),
                      is_subtype(Z, integer()).

vertex3i(X, Y, Z) ->
    cast(5118,
         <<X:32/native-signed,Y:32/native-signed,Z:32/native-signed>>).

-spec vertex3s(X, Y, Z) -> ok
                  when
                      is_subtype(X, integer()),
                      is_subtype(Y, integer()),
                      is_subtype(Z, integer()).

vertex3s(X, Y, Z) ->
    cast(5119,
         <<X:16/native-signed,Y:16/native-signed,Z:16/native-signed>>).

-spec vertex4d(X, Y, Z, W) -> ok
                  when
                      is_subtype(X, float()),
                      is_subtype(Y, float()),
                      is_subtype(Z, float()),
                      is_subtype(W, float()).

vertex4d(X, Y, Z, W) ->
    cast(5120,
         <<X:64/native-float,
           Y:64/native-float,
           Z:64/native-float,
           W:64/native-float>>).

-spec vertex4f(X, Y, Z, W) -> ok
                  when
                      is_subtype(X, float()),
                      is_subtype(Y, float()),
                      is_subtype(Z, float()),
                      is_subtype(W, float()).

vertex4f(X, Y, Z, W) ->
    cast(5121,
         <<X:32/native-float,
           Y:32/native-float,
           Z:32/native-float,
           W:32/native-float>>).

-spec vertex4i(X, Y, Z, W) -> ok
                  when
                      is_subtype(X, integer()),
                      is_subtype(Y, integer()),
                      is_subtype(Z, integer()),
                      is_subtype(W, integer()).

vertex4i(X, Y, Z, W) ->
    cast(5122,
         <<X:32/native-signed,
           Y:32/native-signed,
           Z:32/native-signed,
           W:32/native-signed>>).

-spec vertex4s(X, Y, Z, W) -> ok
                  when
                      is_subtype(X, integer()),
                      is_subtype(Y, integer()),
                      is_subtype(Z, integer()),
                      is_subtype(W, integer()).

vertex4s(X, Y, Z, W) ->
    cast(5123,
         <<X:16/native-signed,
           Y:16/native-signed,
           Z:16/native-signed,
           W:16/native-signed>>).

-spec vertex2dv(V) -> ok
                   when is_subtype(V, {X :: float(), Y :: float()}).

vertex2dv({X,Y}) ->
    vertex2d(X, Y).

-spec vertex2fv(V) -> ok
                   when is_subtype(V, {X :: float(), Y :: float()}).

vertex2fv({X,Y}) ->
    vertex2f(X, Y).

-spec vertex2iv(V) -> ok
                   when is_subtype(V, {X :: integer(), Y :: integer()}).

vertex2iv({X,Y}) ->
    vertex2i(X, Y).

-spec vertex2sv(V) -> ok
                   when is_subtype(V, {X :: integer(), Y :: integer()}).

vertex2sv({X,Y}) ->
    vertex2s(X, Y).

-spec vertex3dv(V) -> ok
                   when
                       is_subtype(V,
                                  {X :: float(),
                                   Y :: float(),
                                   Z :: float()}).

vertex3dv({X,Y,Z}) ->
    vertex3d(X, Y, Z).

-spec vertex3fv(V) -> ok
                   when
                       is_subtype(V,
                                  {X :: float(),
                                   Y :: float(),
                                   Z :: float()}).

vertex3fv({X,Y,Z}) ->
    vertex3f(X, Y, Z).

-spec vertex3iv(V) -> ok
                   when
                       is_subtype(V,
                                  {X :: integer(),
                                   Y :: integer(),
                                   Z :: integer()}).

vertex3iv({X,Y,Z}) ->
    vertex3i(X, Y, Z).

-spec vertex3sv(V) -> ok
                   when
                       is_subtype(V,
                                  {X :: integer(),
                                   Y :: integer(),
                                   Z :: integer()}).

vertex3sv({X,Y,Z}) ->
    vertex3s(X, Y, Z).

-spec vertex4dv(V) -> ok
                   when
                       is_subtype(V,
                                  {X :: float(),
                                   Y :: float(),
                                   Z :: float(),
                                   W :: float()}).

vertex4dv({X,Y,Z,W}) ->
    vertex4d(X, Y, Z, W).

-spec vertex4fv(V) -> ok
                   when
                       is_subtype(V,
                                  {X :: float(),
                                   Y :: float(),
                                   Z :: float(),
                                   W :: float()}).

vertex4fv({X,Y,Z,W}) ->
    vertex4f(X, Y, Z, W).

-spec vertex4iv(V) -> ok
                   when
                       is_subtype(V,
                                  {X :: integer(),
                                   Y :: integer(),
                                   Z :: integer(),
                                   W :: integer()}).

vertex4iv({X,Y,Z,W}) ->
    vertex4i(X, Y, Z, W).

-spec vertex4sv(V) -> ok
                   when
                       is_subtype(V,
                                  {X :: integer(),
                                   Y :: integer(),
                                   Z :: integer(),
                                   W :: integer()}).

vertex4sv({X,Y,Z,W}) ->
    vertex4s(X, Y, Z, W).

-spec normal3b(Nx, Ny, Nz) -> ok
                  when
                      is_subtype(Nx, integer()),
                      is_subtype(Ny, integer()),
                      is_subtype(Nz, integer()).

normal3b(Nx, Ny, Nz) ->
    cast(5124,
         <<Nx:8/native-signed,Ny:8/native-signed,Nz:8/native-signed>>).

-spec normal3d(Nx, Ny, Nz) -> ok
                  when
                      is_subtype(Nx, float()),
                      is_subtype(Ny, float()),
                      is_subtype(Nz, float()).

normal3d(Nx, Ny, Nz) ->
    cast(5125,
         <<Nx:64/native-float,Ny:64/native-float,Nz:64/native-float>>).

-spec normal3f(Nx, Ny, Nz) -> ok
                  when
                      is_subtype(Nx, float()),
                      is_subtype(Ny, float()),
                      is_subtype(Nz, float()).

normal3f(Nx, Ny, Nz) ->
    cast(5126,
         <<Nx:32/native-float,Ny:32/native-float,Nz:32/native-float>>).

-spec normal3i(Nx, Ny, Nz) -> ok
                  when
                      is_subtype(Nx, integer()),
                      is_subtype(Ny, integer()),
                      is_subtype(Nz, integer()).

normal3i(Nx, Ny, Nz) ->
    cast(5127,
         <<Nx:32/native-signed,Ny:32/native-signed,Nz:32/native-signed>>).

-spec normal3s(Nx, Ny, Nz) -> ok
                  when
                      is_subtype(Nx, integer()),
                      is_subtype(Ny, integer()),
                      is_subtype(Nz, integer()).

normal3s(Nx, Ny, Nz) ->
    cast(5128,
         <<Nx:16/native-signed,Ny:16/native-signed,Nz:16/native-signed>>).

-spec normal3bv(V) -> ok
                   when
                       is_subtype(V,
                                  {Nx :: integer(),
                                   Ny :: integer(),
                                   Nz :: integer()}).

normal3bv({Nx,Ny,Nz}) ->
    normal3b(Nx, Ny, Nz).

-spec normal3dv(V) -> ok
                   when
                       is_subtype(V,
                                  {Nx :: float(),
                                   Ny :: float(),
                                   Nz :: float()}).

normal3dv({Nx,Ny,Nz}) ->
    normal3d(Nx, Ny, Nz).

-spec normal3fv(V) -> ok
                   when
                       is_subtype(V,
                                  {Nx :: float(),
                                   Ny :: float(),
                                   Nz :: float()}).

normal3fv({Nx,Ny,Nz}) ->
    normal3f(Nx, Ny, Nz).

-spec normal3iv(V) -> ok
                   when
                       is_subtype(V,
                                  {Nx :: integer(),
                                   Ny :: integer(),
                                   Nz :: integer()}).

normal3iv({Nx,Ny,Nz}) ->
    normal3i(Nx, Ny, Nz).

-spec normal3sv(V) -> ok
                   when
                       is_subtype(V,
                                  {Nx :: integer(),
                                   Ny :: integer(),
                                   Nz :: integer()}).

normal3sv({Nx,Ny,Nz}) ->
    normal3s(Nx, Ny, Nz).

-spec indexd(C) -> ok when is_subtype(C, float()).

indexd(C) ->
    cast(5129, <<C:64/native-float>>).

-spec indexf(C) -> ok when is_subtype(C, float()).

indexf(C) ->
    cast(5130, <<C:32/native-float>>).

-spec indexi(C) -> ok when is_subtype(C, integer()).

indexi(C) ->
    cast(5131, <<C:32/native-signed>>).

-spec indexs(C) -> ok when is_subtype(C, integer()).

indexs(C) ->
    cast(5132, <<C:16/native-signed>>).

-spec indexub(C) -> ok when is_subtype(C, integer()).

indexub(C) ->
    cast(5133, <<C:8/native-unsigned>>).

-spec indexdv(C) -> ok when is_subtype(C, {C :: float()}).

indexdv({C}) ->
    indexd(C).

-spec indexfv(C) -> ok when is_subtype(C, {C :: float()}).

indexfv({C}) ->
    indexf(C).

-spec indexiv(C) -> ok when is_subtype(C, {C :: integer()}).

indexiv({C}) ->
    indexi(C).

-spec indexsv(C) -> ok when is_subtype(C, {C :: integer()}).

indexsv({C}) ->
    indexs(C).

-spec indexubv(C) -> ok when is_subtype(C, {C :: integer()}).

indexubv({C}) ->
    indexub(C).

-spec color3b(Red, Green, Blue) -> ok
                 when
                     is_subtype(Red, integer()),
                     is_subtype(Green, integer()),
                     is_subtype(Blue, integer()).

color3b(Red, Green, Blue) ->
    cast(5134,
         <<Red:8/native-signed,
           Green:8/native-signed,
           Blue:8/native-signed>>).

-spec color3d(Red, Green, Blue) -> ok
                 when
                     is_subtype(Red, float()),
                     is_subtype(Green, float()),
                     is_subtype(Blue, float()).

color3d(Red, Green, Blue) ->
    cast(5135,
         <<Red:64/native-float,
           Green:64/native-float,
           Blue:64/native-float>>).

-spec color3f(Red, Green, Blue) -> ok
                 when
                     is_subtype(Red, float()),
                     is_subtype(Green, float()),
                     is_subtype(Blue, float()).

color3f(Red, Green, Blue) ->
    cast(5136,
         <<Red:32/native-float,
           Green:32/native-float,
           Blue:32/native-float>>).

-spec color3i(Red, Green, Blue) -> ok
                 when
                     is_subtype(Red, integer()),
                     is_subtype(Green, integer()),
                     is_subtype(Blue, integer()).

color3i(Red, Green, Blue) ->
    cast(5137,
         <<Red:32/native-signed,
           Green:32/native-signed,
           Blue:32/native-signed>>).

-spec color3s(Red, Green, Blue) -> ok
                 when
                     is_subtype(Red, integer()),
                     is_subtype(Green, integer()),
                     is_subtype(Blue, integer()).

color3s(Red, Green, Blue) ->
    cast(5138,
         <<Red:16/native-signed,
           Green:16/native-signed,
           Blue:16/native-signed>>).

-spec color3ub(Red, Green, Blue) -> ok
                  when
                      is_subtype(Red, integer()),
                      is_subtype(Green, integer()),
                      is_subtype(Blue, integer()).

color3ub(Red, Green, Blue) ->
    cast(5139,
         <<Red:8/native-unsigned,
           Green:8/native-unsigned,
           Blue:8/native-unsigned>>).

-spec color3ui(Red, Green, Blue) -> ok
                  when
                      is_subtype(Red, integer()),
                      is_subtype(Green, integer()),
                      is_subtype(Blue, integer()).

color3ui(Red, Green, Blue) ->
    cast(5140,
         <<Red:32/native-unsigned,
           Green:32/native-unsigned,
           Blue:32/native-unsigned>>).

-spec color3us(Red, Green, Blue) -> ok
                  when
                      is_subtype(Red, integer()),
                      is_subtype(Green, integer()),
                      is_subtype(Blue, integer()).

color3us(Red, Green, Blue) ->
    cast(5141,
         <<Red:16/native-unsigned,
           Green:16/native-unsigned,
           Blue:16/native-unsigned>>).

-spec color4b(Red, Green, Blue, Alpha) -> ok
                 when
                     is_subtype(Red, integer()),
                     is_subtype(Green, integer()),
                     is_subtype(Blue, integer()),
                     is_subtype(Alpha, integer()).

color4b(Red, Green, Blue, Alpha) ->
    cast(5142,
         <<Red:8/native-signed,
           Green:8/native-signed,
           Blue:8/native-signed,
           Alpha:8/native-signed>>).

-spec color4d(Red, Green, Blue, Alpha) -> ok
                 when
                     is_subtype(Red, float()),
                     is_subtype(Green, float()),
                     is_subtype(Blue, float()),
                     is_subtype(Alpha, float()).

color4d(Red, Green, Blue, Alpha) ->
    cast(5143,
         <<Red:64/native-float,
           Green:64/native-float,
           Blue:64/native-float,
           Alpha:64/native-float>>).

-spec color4f(Red, Green, Blue, Alpha) -> ok
                 when
                     is_subtype(Red, float()),
                     is_subtype(Green, float()),
                     is_subtype(Blue, float()),
                     is_subtype(Alpha, float()).

color4f(Red, Green, Blue, Alpha) ->
    cast(5144,
         <<Red:32/native-float,
           Green:32/native-float,
           Blue:32/native-float,
           Alpha:32/native-float>>).

-spec color4i(Red, Green, Blue, Alpha) -> ok
                 when
                     is_subtype(Red, integer()),
                     is_subtype(Green, integer()),
                     is_subtype(Blue, integer()),
                     is_subtype(Alpha, integer()).

color4i(Red, Green, Blue, Alpha) ->
    cast(5145,
         <<Red:32/native-signed,
           Green:32/native-signed,
           Blue:32/native-signed,
           Alpha:32/native-signed>>).

-spec color4s(Red, Green, Blue, Alpha) -> ok
                 when
                     is_subtype(Red, integer()),
                     is_subtype(Green, integer()),
                     is_subtype(Blue, integer()),
                     is_subtype(Alpha, integer()).

color4s(Red, Green, Blue, Alpha) ->
    cast(5146,
         <<Red:16/native-signed,
           Green:16/native-signed,
           Blue:16/native-signed,
           Alpha:16/native-signed>>).

-spec color4ub(Red, Green, Blue, Alpha) -> ok
                  when
                      is_subtype(Red, integer()),
                      is_subtype(Green, integer()),
                      is_subtype(Blue, integer()),
                      is_subtype(Alpha, integer()).

color4ub(Red, Green, Blue, Alpha) ->
    cast(5147,
         <<Red:8/native-unsigned,
           Green:8/native-unsigned,
           Blue:8/native-unsigned,
           Alpha:8/native-unsigned>>).

-spec color4ui(Red, Green, Blue, Alpha) -> ok
                  when
                      is_subtype(Red, integer()),
                      is_subtype(Green, integer()),
                      is_subtype(Blue, integer()),
                      is_subtype(Alpha, integer()).

color4ui(Red, Green, Blue, Alpha) ->
    cast(5148,
         <<Red:32/native-unsigned,
           Green:32/native-unsigned,
           Blue:32/native-unsigned,
           Alpha:32/native-unsigned>>).

-spec color4us(Red, Green, Blue, Alpha) -> ok
                  when
                      is_subtype(Red, integer()),
                      is_subtype(Green, integer()),
                      is_subtype(Blue, integer()),
                      is_subtype(Alpha, integer()).

color4us(Red, Green, Blue, Alpha) ->
    cast(5149,
         <<Red:16/native-unsigned,
           Green:16/native-unsigned,
           Blue:16/native-unsigned,
           Alpha:16/native-unsigned>>).

-spec color3bv(V) -> ok
                  when
                      is_subtype(V,
                                 {Red :: integer(),
                                  Green :: integer(),
                                  Blue :: integer()}).

color3bv({Red,Green,Blue}) ->
    color3b(Red, Green, Blue).

-spec color3dv(V) -> ok
                  when
                      is_subtype(V,
                                 {Red :: float(),
                                  Green :: float(),
                                  Blue :: float()}).

color3dv({Red,Green,Blue}) ->
    color3d(Red, Green, Blue).

-spec color3fv(V) -> ok
                  when
                      is_subtype(V,
                                 {Red :: float(),
                                  Green :: float(),
                                  Blue :: float()}).

color3fv({Red,Green,Blue}) ->
    color3f(Red, Green, Blue).

-spec color3iv(V) -> ok
                  when
                      is_subtype(V,
                                 {Red :: integer(),
                                  Green :: integer(),
                                  Blue :: integer()}).

color3iv({Red,Green,Blue}) ->
    color3i(Red, Green, Blue).

-spec color3sv(V) -> ok
                  when
                      is_subtype(V,
                                 {Red :: integer(),
                                  Green :: integer(),
                                  Blue :: integer()}).

color3sv({Red,Green,Blue}) ->
    color3s(Red, Green, Blue).

-spec color3ubv(V) -> ok
                   when
                       is_subtype(V,
                                  {Red :: integer(),
                                   Green :: integer(),
                                   Blue :: integer()}).

color3ubv({Red,Green,Blue}) ->
    color3ub(Red, Green, Blue).

-spec color3uiv(V) -> ok
                   when
                       is_subtype(V,
                                  {Red :: integer(),
                                   Green :: integer(),
                                   Blue :: integer()}).

color3uiv({Red,Green,Blue}) ->
    color3ui(Red, Green, Blue).

-spec color3usv(V) -> ok
                   when
                       is_subtype(V,
                                  {Red :: integer(),
                                   Green :: integer(),
                                   Blue :: integer()}).

color3usv({Red,Green,Blue}) ->
    color3us(Red, Green, Blue).

-spec color4bv(V) -> ok
                  when
                      is_subtype(V,
                                 {Red :: integer(),
                                  Green :: integer(),
                                  Blue :: integer(),
                                  Alpha :: integer()}).

color4bv({Red,Green,Blue,Alpha}) ->
    color4b(Red, Green, Blue, Alpha).

-spec color4dv(V) -> ok
                  when
                      is_subtype(V,
                                 {Red :: float(),
                                  Green :: float(),
                                  Blue :: float(),
                                  Alpha :: float()}).

color4dv({Red,Green,Blue,Alpha}) ->
    color4d(Red, Green, Blue, Alpha).

-spec color4fv(V) -> ok
                  when
                      is_subtype(V,
                                 {Red :: float(),
                                  Green :: float(),
                                  Blue :: float(),
                                  Alpha :: float()}).

color4fv({Red,Green,Blue,Alpha}) ->
    color4f(Red, Green, Blue, Alpha).

-spec color4iv(V) -> ok
                  when
                      is_subtype(V,
                                 {Red :: integer(),
                                  Green :: integer(),
                                  Blue :: integer(),
                                  Alpha :: integer()}).

color4iv({Red,Green,Blue,Alpha}) ->
    color4i(Red, Green, Blue, Alpha).

-spec color4sv(V) -> ok
                  when
                      is_subtype(V,
                                 {Red :: integer(),
                                  Green :: integer(),
                                  Blue :: integer(),
                                  Alpha :: integer()}).

color4sv({Red,Green,Blue,Alpha}) ->
    color4s(Red, Green, Blue, Alpha).

-spec color4ubv(V) -> ok
                   when
                       is_subtype(V,
                                  {Red :: integer(),
                                   Green :: integer(),
                                   Blue :: integer(),
                                   Alpha :: integer()}).

color4ubv({Red,Green,Blue,Alpha}) ->
    color4ub(Red, Green, Blue, Alpha).

-spec color4uiv(V) -> ok
                   when
                       is_subtype(V,
                                  {Red :: integer(),
                                   Green :: integer(),
                                   Blue :: integer(),
                                   Alpha :: integer()}).

color4uiv({Red,Green,Blue,Alpha}) ->
    color4ui(Red, Green, Blue, Alpha).

-spec color4usv(V) -> ok
                   when
                       is_subtype(V,
                                  {Red :: integer(),
                                   Green :: integer(),
                                   Blue :: integer(),
                                   Alpha :: integer()}).

color4usv({Red,Green,Blue,Alpha}) ->
    color4us(Red, Green, Blue, Alpha).

-spec texCoord1d(S) -> ok when is_subtype(S, float()).

texCoord1d(S) ->
    cast(5150, <<S:64/native-float>>).

-spec texCoord1f(S) -> ok when is_subtype(S, float()).

texCoord1f(S) ->
    cast(5151, <<S:32/native-float>>).

-spec texCoord1i(S) -> ok when is_subtype(S, integer()).

texCoord1i(S) ->
    cast(5152, <<S:32/native-signed>>).

-spec texCoord1s(S) -> ok when is_subtype(S, integer()).

texCoord1s(S) ->
    cast(5153, <<S:16/native-signed>>).

-spec texCoord2d(S, T) -> ok
                    when is_subtype(S, float()), is_subtype(T, float()).

texCoord2d(S, T) ->
    cast(5154, <<S:64/native-float,T:64/native-float>>).

-spec texCoord2f(S, T) -> ok
                    when is_subtype(S, float()), is_subtype(T, float()).

texCoord2f(S, T) ->
    cast(5155, <<S:32/native-float,T:32/native-float>>).

-spec texCoord2i(S, T) -> ok
                    when
                        is_subtype(S, integer()),
                        is_subtype(T, integer()).

texCoord2i(S, T) ->
    cast(5156, <<S:32/native-signed,T:32/native-signed>>).

-spec texCoord2s(S, T) -> ok
                    when
                        is_subtype(S, integer()),
                        is_subtype(T, integer()).

texCoord2s(S, T) ->
    cast(5157, <<S:16/native-signed,T:16/native-signed>>).

-spec texCoord3d(S, T, R) -> ok
                    when
                        is_subtype(S, float()),
                        is_subtype(T, float()),
                        is_subtype(R, float()).

texCoord3d(S, T, R) ->
    cast(5158,
         <<S:64/native-float,T:64/native-float,R:64/native-float>>).

-spec texCoord3f(S, T, R) -> ok
                    when
                        is_subtype(S, float()),
                        is_subtype(T, float()),
                        is_subtype(R, float()).

texCoord3f(S, T, R) ->
    cast(5159,
         <<S:32/native-float,T:32/native-float,R:32/native-float>>).

-spec texCoord3i(S, T, R) -> ok
                    when
                        is_subtype(S, integer()),
                        is_subtype(T, integer()),
                        is_subtype(R, integer()).

texCoord3i(S, T, R) ->
    cast(5160,
         <<S:32/native-signed,T:32/native-signed,R:32/native-signed>>).

-spec texCoord3s(S, T, R) -> ok
                    when
                        is_subtype(S, integer()),
                        is_subtype(T, integer()),
                        is_subtype(R, integer()).

texCoord3s(S, T, R) ->
    cast(5161,
         <<S:16/native-signed,T:16/native-signed,R:16/native-signed>>).

-spec texCoord4d(S, T, R, Q) -> ok
                    when
                        is_subtype(S, float()),
                        is_subtype(T, float()),
                        is_subtype(R, float()),
                        is_subtype(Q, float()).

texCoord4d(S, T, R, Q) ->
    cast(5162,
         <<S:64/native-float,
           T:64/native-float,
           R:64/native-float,
           Q:64/native-float>>).

-spec texCoord4f(S, T, R, Q) -> ok
                    when
                        is_subtype(S, float()),
                        is_subtype(T, float()),
                        is_subtype(R, float()),
                        is_subtype(Q, float()).

texCoord4f(S, T, R, Q) ->
    cast(5163,
         <<S:32/native-float,
           T:32/native-float,
           R:32/native-float,
           Q:32/native-float>>).

-spec texCoord4i(S, T, R, Q) -> ok
                    when
                        is_subtype(S, integer()),
                        is_subtype(T, integer()),
                        is_subtype(R, integer()),
                        is_subtype(Q, integer()).

texCoord4i(S, T, R, Q) ->
    cast(5164,
         <<S:32/native-signed,
           T:32/native-signed,
           R:32/native-signed,
           Q:32/native-signed>>).

-spec texCoord4s(S, T, R, Q) -> ok
                    when
                        is_subtype(S, integer()),
                        is_subtype(T, integer()),
                        is_subtype(R, integer()),
                        is_subtype(Q, integer()).

texCoord4s(S, T, R, Q) ->
    cast(5165,
         <<S:16/native-signed,
           T:16/native-signed,
           R:16/native-signed,
           Q:16/native-signed>>).

-spec texCoord1dv(V) -> ok when is_subtype(V, {S :: float()}).

texCoord1dv({S}) ->
    texCoord1d(S).

-spec texCoord1fv(V) -> ok when is_subtype(V, {S :: float()}).

texCoord1fv({S}) ->
    texCoord1f(S).

-spec texCoord1iv(V) -> ok when is_subtype(V, {S :: integer()}).

texCoord1iv({S}) ->
    texCoord1i(S).

-spec texCoord1sv(V) -> ok when is_subtype(V, {S :: integer()}).

texCoord1sv({S}) ->
    texCoord1s(S).

-spec texCoord2dv(V) -> ok
                     when is_subtype(V, {S :: float(), T :: float()}).

texCoord2dv({S,T}) ->
    texCoord2d(S, T).

-spec texCoord2fv(V) -> ok
                     when is_subtype(V, {S :: float(), T :: float()}).

texCoord2fv({S,T}) ->
    texCoord2f(S, T).

-spec texCoord2iv(V) -> ok
                     when
                         is_subtype(V, {S :: integer(), T :: integer()}).

texCoord2iv({S,T}) ->
    texCoord2i(S, T).

-spec texCoord2sv(V) -> ok
                     when
                         is_subtype(V, {S :: integer(), T :: integer()}).

texCoord2sv({S,T}) ->
    texCoord2s(S, T).

-spec texCoord3dv(V) -> ok
                     when
                         is_subtype(V,
                                    {S :: float(),
                                     T :: float(),
                                     R :: float()}).

texCoord3dv({S,T,R}) ->
    texCoord3d(S, T, R).

-spec texCoord3fv(V) -> ok
                     when
                         is_subtype(V,
                                    {S :: float(),
                                     T :: float(),
                                     R :: float()}).

texCoord3fv({S,T,R}) ->
    texCoord3f(S, T, R).

-spec texCoord3iv(V) -> ok
                     when
                         is_subtype(V,
                                    {S :: integer(),
                                     T :: integer(),
                                     R :: integer()}).

texCoord3iv({S,T,R}) ->
    texCoord3i(S, T, R).

-spec texCoord3sv(V) -> ok
                     when
                         is_subtype(V,
                                    {S :: integer(),
                                     T :: integer(),
                                     R :: integer()}).

texCoord3sv({S,T,R}) ->
    texCoord3s(S, T, R).

-spec texCoord4dv(V) -> ok
                     when
                         is_subtype(V,
                                    {S :: float(),
                                     T :: float(),
                                     R :: float(),
                                     Q :: float()}).

texCoord4dv({S,T,R,Q}) ->
    texCoord4d(S, T, R, Q).

-spec texCoord4fv(V) -> ok
                     when
                         is_subtype(V,
                                    {S :: float(),
                                     T :: float(),
                                     R :: float(),
                                     Q :: float()}).

texCoord4fv({S,T,R,Q}) ->
    texCoord4f(S, T, R, Q).

-spec texCoord4iv(V) -> ok
                     when
                         is_subtype(V,
                                    {S :: integer(),
                                     T :: integer(),
                                     R :: integer(),
                                     Q :: integer()}).

texCoord4iv({S,T,R,Q}) ->
    texCoord4i(S, T, R, Q).

-spec texCoord4sv(V) -> ok
                     when
                         is_subtype(V,
                                    {S :: integer(),
                                     T :: integer(),
                                     R :: integer(),
                                     Q :: integer()}).

texCoord4sv({S,T,R,Q}) ->
    texCoord4s(S, T, R, Q).

-spec rasterPos2d(X, Y) -> ok
                     when is_subtype(X, float()), is_subtype(Y, float()).

rasterPos2d(X, Y) ->
    cast(5166, <<X:64/native-float,Y:64/native-float>>).

-spec rasterPos2f(X, Y) -> ok
                     when is_subtype(X, float()), is_subtype(Y, float()).

rasterPos2f(X, Y) ->
    cast(5167, <<X:32/native-float,Y:32/native-float>>).

-spec rasterPos2i(X, Y) -> ok
                     when
                         is_subtype(X, integer()),
                         is_subtype(Y, integer()).

rasterPos2i(X, Y) ->
    cast(5168, <<X:32/native-signed,Y:32/native-signed>>).

-spec rasterPos2s(X, Y) -> ok
                     when
                         is_subtype(X, integer()),
                         is_subtype(Y, integer()).

rasterPos2s(X, Y) ->
    cast(5169, <<X:16/native-signed,Y:16/native-signed>>).

-spec rasterPos3d(X, Y, Z) -> ok
                     when
                         is_subtype(X, float()),
                         is_subtype(Y, float()),
                         is_subtype(Z, float()).

rasterPos3d(X, Y, Z) ->
    cast(5170,
         <<X:64/native-float,Y:64/native-float,Z:64/native-float>>).

-spec rasterPos3f(X, Y, Z) -> ok
                     when
                         is_subtype(X, float()),
                         is_subtype(Y, float()),
                         is_subtype(Z, float()).

rasterPos3f(X, Y, Z) ->
    cast(5171,
         <<X:32/native-float,Y:32/native-float,Z:32/native-float>>).

-spec rasterPos3i(X, Y, Z) -> ok
                     when
                         is_subtype(X, integer()),
                         is_subtype(Y, integer()),
                         is_subtype(Z, integer()).

rasterPos3i(X, Y, Z) ->
    cast(5172,
         <<X:32/native-signed,Y:32/native-signed,Z:32/native-signed>>).

-spec rasterPos3s(X, Y, Z) -> ok
                     when
                         is_subtype(X, integer()),
                         is_subtype(Y, integer()),
                         is_subtype(Z, integer()).

rasterPos3s(X, Y, Z) ->
    cast(5173,
         <<X:16/native-signed,Y:16/native-signed,Z:16/native-signed>>).

-spec rasterPos4d(X, Y, Z, W) -> ok
                     when
                         is_subtype(X, float()),
                         is_subtype(Y, float()),
                         is_subtype(Z, float()),
                         is_subtype(W, float()).

rasterPos4d(X, Y, Z, W) ->
    cast(5174,
         <<X:64/native-float,
           Y:64/native-float,
           Z:64/native-float,
           W:64/native-float>>).

-spec rasterPos4f(X, Y, Z, W) -> ok
                     when
                         is_subtype(X, float()),
                         is_subtype(Y, float()),
                         is_subtype(Z, float()),
                         is_subtype(W, float()).

rasterPos4f(X, Y, Z, W) ->
    cast(5175,
         <<X:32/native-float,
           Y:32/native-float,
           Z:32/native-float,
           W:32/native-float>>).

-spec rasterPos4i(X, Y, Z, W) -> ok
                     when
                         is_subtype(X, integer()),
                         is_subtype(Y, integer()),
                         is_subtype(Z, integer()),
                         is_subtype(W, integer()).

rasterPos4i(X, Y, Z, W) ->
    cast(5176,
         <<X:32/native-signed,
           Y:32/native-signed,
           Z:32/native-signed,
           W:32/native-signed>>).

-spec rasterPos4s(X, Y, Z, W) -> ok
                     when
                         is_subtype(X, integer()),
                         is_subtype(Y, integer()),
                         is_subtype(Z, integer()),
                         is_subtype(W, integer()).

rasterPos4s(X, Y, Z, W) ->
    cast(5177,
         <<X:16/native-signed,
           Y:16/native-signed,
           Z:16/native-signed,
           W:16/native-signed>>).

-spec rasterPos2dv(V) -> ok
                      when is_subtype(V, {X :: float(), Y :: float()}).

rasterPos2dv({X,Y}) ->
    rasterPos2d(X, Y).

-spec rasterPos2fv(V) -> ok
                      when is_subtype(V, {X :: float(), Y :: float()}).

rasterPos2fv({X,Y}) ->
    rasterPos2f(X, Y).

-spec rasterPos2iv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: integer(), Y :: integer()}).

rasterPos2iv({X,Y}) ->
    rasterPos2i(X, Y).

-spec rasterPos2sv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: integer(), Y :: integer()}).

rasterPos2sv({X,Y}) ->
    rasterPos2s(X, Y).

-spec rasterPos3dv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: float(),
                                      Y :: float(),
                                      Z :: float()}).

rasterPos3dv({X,Y,Z}) ->
    rasterPos3d(X, Y, Z).

-spec rasterPos3fv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: float(),
                                      Y :: float(),
                                      Z :: float()}).

rasterPos3fv({X,Y,Z}) ->
    rasterPos3f(X, Y, Z).

-spec rasterPos3iv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: integer(),
                                      Y :: integer(),
                                      Z :: integer()}).

rasterPos3iv({X,Y,Z}) ->
    rasterPos3i(X, Y, Z).

-spec rasterPos3sv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: integer(),
                                      Y :: integer(),
                                      Z :: integer()}).

rasterPos3sv({X,Y,Z}) ->
    rasterPos3s(X, Y, Z).

-spec rasterPos4dv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: float(),
                                      Y :: float(),
                                      Z :: float(),
                                      W :: float()}).

rasterPos4dv({X,Y,Z,W}) ->
    rasterPos4d(X, Y, Z, W).

-spec rasterPos4fv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: float(),
                                      Y :: float(),
                                      Z :: float(),
                                      W :: float()}).

rasterPos4fv({X,Y,Z,W}) ->
    rasterPos4f(X, Y, Z, W).

-spec rasterPos4iv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: integer(),
                                      Y :: integer(),
                                      Z :: integer(),
                                      W :: integer()}).

rasterPos4iv({X,Y,Z,W}) ->
    rasterPos4i(X, Y, Z, W).

-spec rasterPos4sv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: integer(),
                                      Y :: integer(),
                                      Z :: integer(),
                                      W :: integer()}).

rasterPos4sv({X,Y,Z,W}) ->
    rasterPos4s(X, Y, Z, W).

-spec rectd(X1, Y1, X2, Y2) -> ok
               when
                   is_subtype(X1, float()),
                   is_subtype(Y1, float()),
                   is_subtype(X2, float()),
                   is_subtype(Y2, float()).

rectd(X1, Y1, X2, Y2) ->
    cast(5178,
         <<X1:64/native-float,
           Y1:64/native-float,
           X2:64/native-float,
           Y2:64/native-float>>).

-spec rectf(X1, Y1, X2, Y2) -> ok
               when
                   is_subtype(X1, float()),
                   is_subtype(Y1, float()),
                   is_subtype(X2, float()),
                   is_subtype(Y2, float()).

rectf(X1, Y1, X2, Y2) ->
    cast(5179,
         <<X1:32/native-float,
           Y1:32/native-float,
           X2:32/native-float,
           Y2:32/native-float>>).

-spec recti(X1, Y1, X2, Y2) -> ok
               when
                   is_subtype(X1, integer()),
                   is_subtype(Y1, integer()),
                   is_subtype(X2, integer()),
                   is_subtype(Y2, integer()).

recti(X1, Y1, X2, Y2) ->
    cast(5180,
         <<X1:32/native-signed,
           Y1:32/native-signed,
           X2:32/native-signed,
           Y2:32/native-signed>>).

-spec rects(X1, Y1, X2, Y2) -> ok
               when
                   is_subtype(X1, integer()),
                   is_subtype(Y1, integer()),
                   is_subtype(X2, integer()),
                   is_subtype(Y2, integer()).

rects(X1, Y1, X2, Y2) ->
    cast(5181,
         <<X1:16/native-signed,
           Y1:16/native-signed,
           X2:16/native-signed,
           Y2:16/native-signed>>).

-spec rectdv(V1, V2) -> ok
                when
                    is_subtype(V1, {float(), float()}),
                    is_subtype(V2, {float(), float()}).

rectdv({V1,V2}, {V1,V2}) ->
    cast(5182,
         <<V1:64/native-float,
           V2:64/native-float,
           V1:64/native-float,
           V2:64/native-float>>).

-spec rectfv(V1, V2) -> ok
                when
                    is_subtype(V1, {float(), float()}),
                    is_subtype(V2, {float(), float()}).

rectfv({V1,V2}, {V1,V2}) ->
    cast(5183,
         <<V1:32/native-float,
           V2:32/native-float,
           V1:32/native-float,
           V2:32/native-float>>).

-spec rectiv(V1, V2) -> ok
                when
                    is_subtype(V1, {integer(), integer()}),
                    is_subtype(V2, {integer(), integer()}).

rectiv({V1,V2}, {V1,V2}) ->
    cast(5184,
         <<V1:32/native-signed,
           V2:32/native-signed,
           V1:32/native-signed,
           V2:32/native-signed>>).

-spec rectsv(V1, V2) -> ok
                when
                    is_subtype(V1, {integer(), integer()}),
                    is_subtype(V2, {integer(), integer()}).

rectsv({V1,V2}, {V1,V2}) ->
    cast(5185,
         <<V1:16/native-signed,
           V2:16/native-signed,
           V1:16/native-signed,
           V2:16/native-signed>>).

-spec vertexPointer(Size, Type, Stride, Ptr) -> ok
                       when
                           is_subtype(Size, integer()),
                           is_subtype(Type, enum()),
                           is_subtype(Stride, integer()),
                           is_subtype(Ptr, offset() | mem()).

vertexPointer(Size, Type, Stride, Ptr) when is_integer(Ptr) ->
    cast(5186,
         <<Size:32/native-signed,
           Type:32/native-unsigned,
           Stride:32/native-signed,
           Ptr:32/native-unsigned>>);
vertexPointer(Size, Type, Stride, Ptr) ->
    send_bin(Ptr),
    cast(5187,
         <<Size:32/native-signed,
           Type:32/native-unsigned,
           Stride:32/native-signed>>).

-spec normalPointer(Type, Stride, Ptr) -> ok
                       when
                           is_subtype(Type, enum()),
                           is_subtype(Stride, integer()),
                           is_subtype(Ptr, offset() | mem()).

normalPointer(Type, Stride, Ptr) when is_integer(Ptr) ->
    cast(5188,
         <<Type:32/native-unsigned,
           Stride:32/native-signed,
           Ptr:32/native-unsigned>>);
normalPointer(Type, Stride, Ptr) ->
    send_bin(Ptr),
    cast(5189, <<Type:32/native-unsigned,Stride:32/native-signed>>).

-spec colorPointer(Size, Type, Stride, Ptr) -> ok
                      when
                          is_subtype(Size, integer()),
                          is_subtype(Type, enum()),
                          is_subtype(Stride, integer()),
                          is_subtype(Ptr, offset() | mem()).

colorPointer(Size, Type, Stride, Ptr) when is_integer(Ptr) ->
    cast(5190,
         <<Size:32/native-signed,
           Type:32/native-unsigned,
           Stride:32/native-signed,
           Ptr:32/native-unsigned>>);
colorPointer(Size, Type, Stride, Ptr) ->
    send_bin(Ptr),
    cast(5191,
         <<Size:32/native-signed,
           Type:32/native-unsigned,
           Stride:32/native-signed>>).

-spec indexPointer(Type, Stride, Ptr) -> ok
                      when
                          is_subtype(Type, enum()),
                          is_subtype(Stride, integer()),
                          is_subtype(Ptr, offset() | mem()).

indexPointer(Type, Stride, Ptr) when is_integer(Ptr) ->
    cast(5192,
         <<Type:32/native-unsigned,
           Stride:32/native-signed,
           Ptr:32/native-unsigned>>);
indexPointer(Type, Stride, Ptr) ->
    send_bin(Ptr),
    cast(5193, <<Type:32/native-unsigned,Stride:32/native-signed>>).

-spec texCoordPointer(Size, Type, Stride, Ptr) -> ok
                         when
                             is_subtype(Size, integer()),
                             is_subtype(Type, enum()),
                             is_subtype(Stride, integer()),
                             is_subtype(Ptr, offset() | mem()).

texCoordPointer(Size, Type, Stride, Ptr) when is_integer(Ptr) ->
    cast(5194,
         <<Size:32/native-signed,
           Type:32/native-unsigned,
           Stride:32/native-signed,
           Ptr:32/native-unsigned>>);
texCoordPointer(Size, Type, Stride, Ptr) ->
    send_bin(Ptr),
    cast(5195,
         <<Size:32/native-signed,
           Type:32/native-unsigned,
           Stride:32/native-signed>>).

-spec edgeFlagPointer(Stride, Ptr) -> ok
                         when
                             is_subtype(Stride, integer()),
                             is_subtype(Ptr, offset() | mem()).

edgeFlagPointer(Stride, Ptr) when is_integer(Ptr) ->
    cast(5196, <<Stride:32/native-signed,Ptr:32/native-unsigned>>);
edgeFlagPointer(Stride, Ptr) ->
    send_bin(Ptr),
    cast(5197, <<Stride:32/native-signed>>).

-spec arrayElement(I) -> ok when is_subtype(I, integer()).

arrayElement(I) ->
    cast(5198, <<I:32/native-signed>>).

-spec drawArrays(Mode, First, Count) -> ok
                    when
                        is_subtype(Mode, enum()),
                        is_subtype(First, integer()),
                        is_subtype(Count, integer()).

drawArrays(Mode, First, Count) ->
    cast(5199,
         <<Mode:32/native-unsigned,
           First:32/native-signed,
           Count:32/native-signed>>).

-spec drawElements(Mode, Count, Type, Indices) -> ok
                      when
                          is_subtype(Mode, enum()),
                          is_subtype(Count, integer()),
                          is_subtype(Type, enum()),
                          is_subtype(Indices, offset() | mem()).

drawElements(Mode, Count, Type, Indices) when is_integer(Indices) ->
    cast(5200,
         <<Mode:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Indices:32/native-unsigned>>);
drawElements(Mode, Count, Type, Indices) ->
    send_bin(Indices),
    cast(5201,
         <<Mode:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned>>).

-spec interleavedArrays(Format, Stride, Pointer) -> ok
                           when
                               is_subtype(Format, enum()),
                               is_subtype(Stride, integer()),
                               is_subtype(Pointer, offset() | mem()).

interleavedArrays(Format, Stride, Pointer) when is_integer(Pointer) ->
    cast(5202,
         <<Format:32/native-unsigned,
           Stride:32/native-signed,
           Pointer:32/native-unsigned>>);
interleavedArrays(Format, Stride, Pointer) ->
    send_bin(Pointer),
    cast(5203, <<Format:32/native-unsigned,Stride:32/native-signed>>).

-spec shadeModel(Mode) -> ok when is_subtype(Mode, enum()).

shadeModel(Mode) ->
    cast(5204, <<Mode:32/native-unsigned>>).

-spec lightf(Light, Pname, Param) -> ok
                when
                    is_subtype(Light, enum()),
                    is_subtype(Pname, enum()),
                    is_subtype(Param, float()).

lightf(Light, Pname, Param) ->
    cast(5205,
         <<Light:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:32/native-float>>).

-spec lighti(Light, Pname, Param) -> ok
                when
                    is_subtype(Light, enum()),
                    is_subtype(Pname, enum()),
                    is_subtype(Param, integer()).

lighti(Light, Pname, Param) ->
    cast(5206,
         <<Light:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:32/native-signed>>).

-spec lightfv(Light, Pname, Params) -> ok
                 when
                     is_subtype(Light, enum()),
                     is_subtype(Pname, enum()),
                     is_subtype(Params, {float()}).

lightfv(Light, Pname, Params) ->
    cast(5207,
         <<Light:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec lightiv(Light, Pname, Params) -> ok
                 when
                     is_subtype(Light, enum()),
                     is_subtype(Pname, enum()),
                     is_subtype(Params, {integer()}).

lightiv(Light, Pname, Params) ->
    cast(5208,
         <<Light:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec getLightfv(Light, Pname) -> {float(), float(), float(), float()}
                    when
                        is_subtype(Light, enum()),
                        is_subtype(Pname, enum()).

getLightfv(Light, Pname) ->
    call(5209, <<Light:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getLightiv(Light, Pname) ->
                    {integer(), integer(), integer(), integer()}
                    when
                        is_subtype(Light, enum()),
                        is_subtype(Pname, enum()).

getLightiv(Light, Pname) ->
    call(5210, <<Light:32/native-unsigned,Pname:32/native-unsigned>>).

-spec lightModelf(Pname, Param) -> ok
                     when
                         is_subtype(Pname, enum()),
                         is_subtype(Param, float()).

lightModelf(Pname, Param) ->
    cast(5211, <<Pname:32/native-unsigned,Param:32/native-float>>).

-spec lightModeli(Pname, Param) -> ok
                     when
                         is_subtype(Pname, enum()),
                         is_subtype(Param, integer()).

lightModeli(Pname, Param) ->
    cast(5212, <<Pname:32/native-unsigned,Param:32/native-signed>>).

-spec lightModelfv(Pname, Params) -> ok
                      when
                          is_subtype(Pname, enum()),
                          is_subtype(Params, {float()}).

lightModelfv(Pname, Params) ->
    cast(5213,
         <<Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((0 + size(Params)) rem 2 * 32)>>).

-spec lightModeliv(Pname, Params) -> ok
                      when
                          is_subtype(Pname, enum()),
                          is_subtype(Params, {integer()}).

lightModeliv(Pname, Params) ->
    cast(5214,
         <<Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((0 + size(Params)) rem 2 * 32)>>).

-spec materialf(Face, Pname, Param) -> ok
                   when
                       is_subtype(Face, enum()),
                       is_subtype(Pname, enum()),
                       is_subtype(Param, float()).

materialf(Face, Pname, Param) ->
    cast(5215,
         <<Face:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:32/native-float>>).

-spec materiali(Face, Pname, Param) -> ok
                   when
                       is_subtype(Face, enum()),
                       is_subtype(Pname, enum()),
                       is_subtype(Param, integer()).

materiali(Face, Pname, Param) ->
    cast(5216,
         <<Face:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:32/native-signed>>).

-spec materialfv(Face, Pname, Params) -> ok
                    when
                        is_subtype(Face, enum()),
                        is_subtype(Pname, enum()),
                        is_subtype(Params, {float()}).

materialfv(Face, Pname, Params) ->
    cast(5217,
         <<Face:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec materialiv(Face, Pname, Params) -> ok
                    when
                        is_subtype(Face, enum()),
                        is_subtype(Pname, enum()),
                        is_subtype(Params, {integer()}).

materialiv(Face, Pname, Params) ->
    cast(5218,
         <<Face:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec getMaterialfv(Face, Pname) -> {float(), float(), float(), float()}
                       when
                           is_subtype(Face, enum()),
                           is_subtype(Pname, enum()).

getMaterialfv(Face, Pname) ->
    call(5219, <<Face:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getMaterialiv(Face, Pname) ->
                       {integer(), integer(), integer(), integer()}
                       when
                           is_subtype(Face, enum()),
                           is_subtype(Pname, enum()).

getMaterialiv(Face, Pname) ->
    call(5220, <<Face:32/native-unsigned,Pname:32/native-unsigned>>).

-spec colorMaterial(Face, Mode) -> ok
                       when
                           is_subtype(Face, enum()),
                           is_subtype(Mode, enum()).

colorMaterial(Face, Mode) ->
    cast(5221, <<Face:32/native-unsigned,Mode:32/native-unsigned>>).

-spec pixelZoom(Xfactor, Yfactor) -> ok
                   when
                       is_subtype(Xfactor, float()),
                       is_subtype(Yfactor, float()).

pixelZoom(Xfactor, Yfactor) ->
    cast(5222, <<Xfactor:32/native-float,Yfactor:32/native-float>>).

-spec pixelStoref(Pname, Param) -> ok
                     when
                         is_subtype(Pname, enum()),
                         is_subtype(Param, float()).

pixelStoref(Pname, Param) ->
    cast(5223, <<Pname:32/native-unsigned,Param:32/native-float>>).

-spec pixelStorei(Pname, Param) -> ok
                     when
                         is_subtype(Pname, enum()),
                         is_subtype(Param, integer()).

pixelStorei(Pname, Param) ->
    cast(5224, <<Pname:32/native-unsigned,Param:32/native-signed>>).

-spec pixelTransferf(Pname, Param) -> ok
                        when
                            is_subtype(Pname, enum()),
                            is_subtype(Param, float()).

pixelTransferf(Pname, Param) ->
    cast(5225, <<Pname:32/native-unsigned,Param:32/native-float>>).

-spec pixelTransferi(Pname, Param) -> ok
                        when
                            is_subtype(Pname, enum()),
                            is_subtype(Param, integer()).

pixelTransferi(Pname, Param) ->
    cast(5226, <<Pname:32/native-unsigned,Param:32/native-signed>>).

-spec pixelMapfv(Map, Mapsize, Values) -> ok
                    when
                        is_subtype(Map, enum()),
                        is_subtype(Mapsize, integer()),
                        is_subtype(Values, binary()).

pixelMapfv(Map, Mapsize, Values) ->
    send_bin(Values),
    cast(5227, <<Map:32/native-unsigned,Mapsize:32/native-signed>>).

-spec pixelMapuiv(Map, Mapsize, Values) -> ok
                     when
                         is_subtype(Map, enum()),
                         is_subtype(Mapsize, integer()),
                         is_subtype(Values, binary()).

pixelMapuiv(Map, Mapsize, Values) ->
    send_bin(Values),
    cast(5228, <<Map:32/native-unsigned,Mapsize:32/native-signed>>).

-spec pixelMapusv(Map, Mapsize, Values) -> ok
                     when
                         is_subtype(Map, enum()),
                         is_subtype(Mapsize, integer()),
                         is_subtype(Values, binary()).

pixelMapusv(Map, Mapsize, Values) ->
    send_bin(Values),
    cast(5229, <<Map:32/native-unsigned,Mapsize:32/native-signed>>).

-spec getPixelMapfv(Map, Values) -> ok
                       when
                           is_subtype(Map, enum()),
                           is_subtype(Values, mem()).

getPixelMapfv(Map, Values) ->
    send_bin(Values),
    call(5230, <<Map:32/native-unsigned>>).

-spec getPixelMapuiv(Map, Values) -> ok
                        when
                            is_subtype(Map, enum()),
                            is_subtype(Values, mem()).

getPixelMapuiv(Map, Values) ->
    send_bin(Values),
    call(5231, <<Map:32/native-unsigned>>).

-spec getPixelMapusv(Map, Values) -> ok
                        when
                            is_subtype(Map, enum()),
                            is_subtype(Values, mem()).

getPixelMapusv(Map, Values) ->
    send_bin(Values),
    call(5232, <<Map:32/native-unsigned>>).

-spec bitmap(Width, Height, Xorig, Yorig, Xmove, Ymove, Bitmap) -> ok
                when
                    is_subtype(Width, integer()),
                    is_subtype(Height, integer()),
                    is_subtype(Xorig, float()),
                    is_subtype(Yorig, float()),
                    is_subtype(Xmove, float()),
                    is_subtype(Ymove, float()),
                    is_subtype(Bitmap, offset() | mem()).

bitmap(Width, Height, Xorig, Yorig, Xmove, Ymove, Bitmap)
    when is_integer(Bitmap) ->
    cast(5233,
         <<Width:32/native-signed,
           Height:32/native-signed,
           Xorig:32/native-float,
           Yorig:32/native-float,
           Xmove:32/native-float,
           Ymove:32/native-float,
           Bitmap:32/native-unsigned>>);
bitmap(Width, Height, Xorig, Yorig, Xmove, Ymove, Bitmap) ->
    send_bin(Bitmap),
    cast(5234,
         <<Width:32/native-signed,
           Height:32/native-signed,
           Xorig:32/native-float,
           Yorig:32/native-float,
           Xmove:32/native-float,
           Ymove:32/native-float>>).

-spec readPixels(X, Y, Width, Height, Format, Type, Pixels) -> ok
                    when
                        is_subtype(X, integer()),
                        is_subtype(Y, integer()),
                        is_subtype(Width, integer()),
                        is_subtype(Height, integer()),
                        is_subtype(Format, enum()),
                        is_subtype(Type, enum()),
                        is_subtype(Pixels, mem()).

readPixels(X, Y, Width, Height, Format, Type, Pixels) ->
    send_bin(Pixels),
    call(5235,
         <<X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec drawPixels(Width, Height, Format, Type, Pixels) -> ok
                    when
                        is_subtype(Width, integer()),
                        is_subtype(Height, integer()),
                        is_subtype(Format, enum()),
                        is_subtype(Type, enum()),
                        is_subtype(Pixels, offset() | mem()).

drawPixels(Width, Height, Format, Type, Pixels) when is_integer(Pixels) ->
    cast(5236,
         <<Width:32/native-signed,
           Height:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned,
           Pixels:32/native-unsigned>>);
drawPixels(Width, Height, Format, Type, Pixels) ->
    send_bin(Pixels),
    cast(5237,
         <<Width:32/native-signed,
           Height:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec copyPixels(X, Y, Width, Height, Type) -> ok
                    when
                        is_subtype(X, integer()),
                        is_subtype(Y, integer()),
                        is_subtype(Width, integer()),
                        is_subtype(Height, integer()),
                        is_subtype(Type, enum()).

copyPixels(X, Y, Width, Height, Type) ->
    cast(5238,
         <<X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Type:32/native-unsigned>>).

-spec stencilFunc(Func, Ref, Mask) -> ok
                     when
                         is_subtype(Func, enum()),
                         is_subtype(Ref, integer()),
                         is_subtype(Mask, integer()).

stencilFunc(Func, Ref, Mask) ->
    cast(5239,
         <<Func:32/native-unsigned,
           Ref:32/native-signed,
           Mask:32/native-unsigned>>).

-spec stencilMask(Mask) -> ok when is_subtype(Mask, integer()).

stencilMask(Mask) ->
    cast(5240, <<Mask:32/native-unsigned>>).

-spec stencilOp(Fail, Zfail, Zpass) -> ok
                   when
                       is_subtype(Fail, enum()),
                       is_subtype(Zfail, enum()),
                       is_subtype(Zpass, enum()).

stencilOp(Fail, Zfail, Zpass) ->
    cast(5241,
         <<Fail:32/native-unsigned,
           Zfail:32/native-unsigned,
           Zpass:32/native-unsigned>>).

-spec clearStencil(S) -> ok when is_subtype(S, integer()).

clearStencil(S) ->
    cast(5242, <<S:32/native-signed>>).

-spec texGend(Coord, Pname, Param) -> ok
                 when
                     is_subtype(Coord, enum()),
                     is_subtype(Pname, enum()),
                     is_subtype(Param, float()).

texGend(Coord, Pname, Param) ->
    cast(5243,
         <<Coord:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:64/native-float>>).

-spec texGenf(Coord, Pname, Param) -> ok
                 when
                     is_subtype(Coord, enum()),
                     is_subtype(Pname, enum()),
                     is_subtype(Param, float()).

texGenf(Coord, Pname, Param) ->
    cast(5244,
         <<Coord:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:32/native-float>>).

-spec texGeni(Coord, Pname, Param) -> ok
                 when
                     is_subtype(Coord, enum()),
                     is_subtype(Pname, enum()),
                     is_subtype(Param, integer()).

texGeni(Coord, Pname, Param) ->
    cast(5245,
         <<Coord:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:32/native-signed>>).

-spec texGendv(Coord, Pname, Params) -> ok
                  when
                      is_subtype(Coord, enum()),
                      is_subtype(Pname, enum()),
                      is_subtype(Params, {float()}).

texGendv(Coord, Pname, Params) ->
    cast(5246,
         <<Coord:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           0:32,
           << 
             <<C:64/native-float>> ||
                 C <- tuple_to_list(Params)
           >>/binary>>).

-spec texGenfv(Coord, Pname, Params) -> ok
                  when
                      is_subtype(Coord, enum()),
                      is_subtype(Pname, enum()),
                      is_subtype(Params, {float()}).

texGenfv(Coord, Pname, Params) ->
    cast(5247,
         <<Coord:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec texGeniv(Coord, Pname, Params) -> ok
                  when
                      is_subtype(Coord, enum()),
                      is_subtype(Pname, enum()),
                      is_subtype(Params, {integer()}).

texGeniv(Coord, Pname, Params) ->
    cast(5248,
         <<Coord:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec getTexGendv(Coord, Pname) -> {float(), float(), float(), float()}
                     when
                         is_subtype(Coord, enum()),
                         is_subtype(Pname, enum()).

getTexGendv(Coord, Pname) ->
    call(5249, <<Coord:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getTexGenfv(Coord, Pname) -> {float(), float(), float(), float()}
                     when
                         is_subtype(Coord, enum()),
                         is_subtype(Pname, enum()).

getTexGenfv(Coord, Pname) ->
    call(5250, <<Coord:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getTexGeniv(Coord, Pname) ->
                     {integer(), integer(), integer(), integer()}
                     when
                         is_subtype(Coord, enum()),
                         is_subtype(Pname, enum()).

getTexGeniv(Coord, Pname) ->
    call(5251, <<Coord:32/native-unsigned,Pname:32/native-unsigned>>).

-spec texEnvf(Target, Pname, Param) -> ok
                 when
                     is_subtype(Target, enum()),
                     is_subtype(Pname, enum()),
                     is_subtype(Param, float()).

texEnvf(Target, Pname, Param) ->
    cast(5252,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:32/native-float>>).

-spec texEnvi(Target, Pname, Param) -> ok
                 when
                     is_subtype(Target, enum()),
                     is_subtype(Pname, enum()),
                     is_subtype(Param, integer()).

texEnvi(Target, Pname, Param) ->
    cast(5253,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:32/native-signed>>).

-spec texEnvfv(Target, Pname, Params) -> ok
                  when
                      is_subtype(Target, enum()),
                      is_subtype(Pname, enum()),
                      is_subtype(Params, {float()}).

texEnvfv(Target, Pname, Params) ->
    cast(5254,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec texEnviv(Target, Pname, Params) -> ok
                  when
                      is_subtype(Target, enum()),
                      is_subtype(Pname, enum()),
                      is_subtype(Params, {integer()}).

texEnviv(Target, Pname, Params) ->
    cast(5255,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec getTexEnvfv(Target, Pname) -> {float(), float(), float(), float()}
                     when
                         is_subtype(Target, enum()),
                         is_subtype(Pname, enum()).

getTexEnvfv(Target, Pname) ->
    call(5256, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getTexEnviv(Target, Pname) ->
                     {integer(), integer(), integer(), integer()}
                     when
                         is_subtype(Target, enum()),
                         is_subtype(Pname, enum()).

getTexEnviv(Target, Pname) ->
    call(5257, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec texParameterf(Target, Pname, Param) -> ok
                       when
                           is_subtype(Target, enum()),
                           is_subtype(Pname, enum()),
                           is_subtype(Param, float()).

texParameterf(Target, Pname, Param) ->
    cast(5258,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:32/native-float>>).

-spec texParameteri(Target, Pname, Param) -> ok
                       when
                           is_subtype(Target, enum()),
                           is_subtype(Pname, enum()),
                           is_subtype(Param, integer()).

texParameteri(Target, Pname, Param) ->
    cast(5259,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:32/native-signed>>).

-spec texParameterfv(Target, Pname, Params) -> ok
                        when
                            is_subtype(Target, enum()),
                            is_subtype(Pname, enum()),
                            is_subtype(Params, {float()}).

texParameterfv(Target, Pname, Params) ->
    cast(5260,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec texParameteriv(Target, Pname, Params) -> ok
                        when
                            is_subtype(Target, enum()),
                            is_subtype(Pname, enum()),
                            is_subtype(Params, {integer()}).

texParameteriv(Target, Pname, Params) ->
    cast(5261,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec getTexParameterfv(Target, Pname) ->
                           {float(), float(), float(), float()}
                           when
                               is_subtype(Target, enum()),
                               is_subtype(Pname, enum()).

getTexParameterfv(Target, Pname) ->
    call(5262, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getTexParameteriv(Target, Pname) ->
                           {integer(), integer(), integer(), integer()}
                           when
                               is_subtype(Target, enum()),
                               is_subtype(Pname, enum()).

getTexParameteriv(Target, Pname) ->
    call(5263, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getTexLevelParameterfv(Target, Level, Pname) -> {float()}
                                when
                                    is_subtype(Target, enum()),
                                    is_subtype(Level, integer()),
                                    is_subtype(Pname, enum()).

getTexLevelParameterfv(Target, Level, Pname) ->
    call(5264,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Pname:32/native-unsigned>>).

-spec getTexLevelParameteriv(Target, Level, Pname) -> {integer()}
                                when
                                    is_subtype(Target, enum()),
                                    is_subtype(Level, integer()),
                                    is_subtype(Pname, enum()).

getTexLevelParameteriv(Target, Level, Pname) ->
    call(5265,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Pname:32/native-unsigned>>).

-spec texImage1D(Target,
                 Level,
                 InternalFormat,
                 Width,
                 Border,
                 Format,
                 Type,
                 Pixels) ->
                    ok
                    when
                        is_subtype(Target, enum()),
                        is_subtype(Level, integer()),
                        is_subtype(InternalFormat, integer()),
                        is_subtype(Width, integer()),
                        is_subtype(Border, integer()),
                        is_subtype(Format, enum()),
                        is_subtype(Type, enum()),
                        is_subtype(Pixels, offset() | mem()).

texImage1D(Target,
           Level,
           InternalFormat,
           Width,
           Border,
           Format,
           Type,
           Pixels)
    when is_integer(Pixels) ->
    cast(5266,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           InternalFormat:32/native-signed,
           Width:32/native-signed,
           Border:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned,
           Pixels:32/native-unsigned>>);
texImage1D(Target,
           Level,
           InternalFormat,
           Width,
           Border,
           Format,
           Type,
           Pixels) ->
    send_bin(Pixels),
    cast(5267,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           InternalFormat:32/native-signed,
           Width:32/native-signed,
           Border:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec texImage2D(Target,
                 Level,
                 InternalFormat,
                 Width,
                 Height,
                 Border,
                 Format,
                 Type,
                 Pixels) ->
                    ok
                    when
                        is_subtype(Target, enum()),
                        is_subtype(Level, integer()),
                        is_subtype(InternalFormat, integer()),
                        is_subtype(Width, integer()),
                        is_subtype(Height, integer()),
                        is_subtype(Border, integer()),
                        is_subtype(Format, enum()),
                        is_subtype(Type, enum()),
                        is_subtype(Pixels, offset() | mem()).

texImage2D(Target,
           Level,
           InternalFormat,
           Width,
           Height,
           Border,
           Format,
           Type,
           Pixels)
    when is_integer(Pixels) ->
    cast(5268,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           InternalFormat:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Border:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned,
           Pixels:32/native-unsigned>>);
texImage2D(Target,
           Level,
           InternalFormat,
           Width,
           Height,
           Border,
           Format,
           Type,
           Pixels) ->
    send_bin(Pixels),
    cast(5269,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           InternalFormat:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Border:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec getTexImage(Target, Level, Format, Type, Pixels) -> ok
                     when
                         is_subtype(Target, enum()),
                         is_subtype(Level, integer()),
                         is_subtype(Format, enum()),
                         is_subtype(Type, enum()),
                         is_subtype(Pixels, mem()).

getTexImage(Target, Level, Format, Type, Pixels) ->
    send_bin(Pixels),
    call(5270,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec genTextures(N) -> [integer()] when is_subtype(N, integer()).

genTextures(N) ->
    call(5271, <<N:32/native-signed>>).

-spec deleteTextures(Textures) -> ok
                        when is_subtype(Textures, [integer()]).

deleteTextures(Textures) ->
    cast(5272,
         <<(length(Textures)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Textures
           >>/binary,
           0:((1 + length(Textures)) rem 2 * 32)>>).

-spec bindTexture(Target, Texture) -> ok
                     when
                         is_subtype(Target, enum()),
                         is_subtype(Texture, integer()).

bindTexture(Target, Texture) ->
    cast(5273, <<Target:32/native-unsigned,Texture:32/native-unsigned>>).

-spec prioritizeTextures(Textures, Priorities) -> ok
                            when
                                is_subtype(Textures, [integer()]),
                                is_subtype(Priorities, [clamp()]).

prioritizeTextures(Textures, Priorities) ->
    cast(5274,
         <<(length(Textures)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Textures
           >>/binary,
           0:((1 + length(Textures)) rem 2 * 32),
           (length(Priorities)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- Priorities
           >>/binary,
           0:((1 + length(Priorities)) rem 2 * 32)>>).

-spec areTexturesResident(Textures) -> {0 | 1, Residences :: [0 | 1]}
                             when is_subtype(Textures, [integer()]).

areTexturesResident(Textures) ->
    call(5275,
         <<(length(Textures)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Textures
           >>/binary,
           0:((1 + length(Textures)) rem 2 * 32)>>).

-spec isTexture(Texture) -> 0 | 1 when is_subtype(Texture, integer()).

isTexture(Texture) ->
    call(5276, <<Texture:32/native-unsigned>>).

-spec texSubImage1D(Target, Level, Xoffset, Width, Format, Type, Pixels) ->
                       ok
                       when
                           is_subtype(Target, enum()),
                           is_subtype(Level, integer()),
                           is_subtype(Xoffset, integer()),
                           is_subtype(Width, integer()),
                           is_subtype(Format, enum()),
                           is_subtype(Type, enum()),
                           is_subtype(Pixels, offset() | mem()).

texSubImage1D(Target, Level, Xoffset, Width, Format, Type, Pixels)
    when is_integer(Pixels) ->
    cast(5277,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Width:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned,
           Pixels:32/native-unsigned>>);
texSubImage1D(Target, Level, Xoffset, Width, Format, Type, Pixels) ->
    send_bin(Pixels),
    cast(5278,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Width:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec texSubImage2D(Target,
                    Level,
                    Xoffset,
                    Yoffset,
                    Width,
                    Height,
                    Format,
                    Type,
                    Pixels) ->
                       ok
                       when
                           is_subtype(Target, enum()),
                           is_subtype(Level, integer()),
                           is_subtype(Xoffset, integer()),
                           is_subtype(Yoffset, integer()),
                           is_subtype(Width, integer()),
                           is_subtype(Height, integer()),
                           is_subtype(Format, enum()),
                           is_subtype(Type, enum()),
                           is_subtype(Pixels, offset() | mem()).

texSubImage2D(Target,
              Level,
              Xoffset,
              Yoffset,
              Width,
              Height,
              Format,
              Type,
              Pixels)
    when is_integer(Pixels) ->
    cast(5279,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Yoffset:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned,
           Pixels:32/native-unsigned>>);
texSubImage2D(Target,
              Level,
              Xoffset,
              Yoffset,
              Width,
              Height,
              Format,
              Type,
              Pixels) ->
    send_bin(Pixels),
    cast(5280,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Yoffset:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec copyTexImage1D(Target, Level, Internalformat, X, Y, Width, Border) ->
                        ok
                        when
                            is_subtype(Target, enum()),
                            is_subtype(Level, integer()),
                            is_subtype(Internalformat, enum()),
                            is_subtype(X, integer()),
                            is_subtype(Y, integer()),
                            is_subtype(Width, integer()),
                            is_subtype(Border, integer()).

copyTexImage1D(Target, Level, Internalformat, X, Y, Width, Border) ->
    cast(5281,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Internalformat:32/native-unsigned,
           X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed,
           Border:32/native-signed>>).

-spec copyTexImage2D(Target,
                     Level,
                     Internalformat,
                     X,
                     Y,
                     Width,
                     Height,
                     Border) ->
                        ok
                        when
                            is_subtype(Target, enum()),
                            is_subtype(Level, integer()),
                            is_subtype(Internalformat, enum()),
                            is_subtype(X, integer()),
                            is_subtype(Y, integer()),
                            is_subtype(Width, integer()),
                            is_subtype(Height, integer()),
                            is_subtype(Border, integer()).

copyTexImage2D(Target,
               Level,
               Internalformat,
               X,
               Y,
               Width,
               Height,
               Border) ->
    cast(5282,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Internalformat:32/native-unsigned,
           X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Border:32/native-signed>>).

-spec copyTexSubImage1D(Target, Level, Xoffset, X, Y, Width) -> ok
                           when
                               is_subtype(Target, enum()),
                               is_subtype(Level, integer()),
                               is_subtype(Xoffset, integer()),
                               is_subtype(X, integer()),
                               is_subtype(Y, integer()),
                               is_subtype(Width, integer()).

copyTexSubImage1D(Target, Level, Xoffset, X, Y, Width) ->
    cast(5283,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed>>).

-spec copyTexSubImage2D(Target,
                        Level,
                        Xoffset,
                        Yoffset,
                        X,
                        Y,
                        Width,
                        Height) ->
                           ok
                           when
                               is_subtype(Target, enum()),
                               is_subtype(Level, integer()),
                               is_subtype(Xoffset, integer()),
                               is_subtype(Yoffset, integer()),
                               is_subtype(X, integer()),
                               is_subtype(Y, integer()),
                               is_subtype(Width, integer()),
                               is_subtype(Height, integer()).

copyTexSubImage2D(Target, Level, Xoffset, Yoffset, X, Y, Width, Height) ->
    cast(5284,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Yoffset:32/native-signed,
           X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed>>).

-spec map1d(Target, U1, U2, Stride, Order, Points) -> ok
               when
                   is_subtype(Target, enum()),
                   is_subtype(U1, float()),
                   is_subtype(U2, float()),
                   is_subtype(Stride, integer()),
                   is_subtype(Order, integer()),
                   is_subtype(Points, binary()).

map1d(Target, U1, U2, Stride, Order, Points) ->
    send_bin(Points),
    cast(5285,
         <<Target:32/native-unsigned,
           0:32,
           U1:64/native-float,
           U2:64/native-float,
           Stride:32/native-signed,
           Order:32/native-signed>>).

-spec map1f(Target, U1, U2, Stride, Order, Points) -> ok
               when
                   is_subtype(Target, enum()),
                   is_subtype(U1, float()),
                   is_subtype(U2, float()),
                   is_subtype(Stride, integer()),
                   is_subtype(Order, integer()),
                   is_subtype(Points, binary()).

map1f(Target, U1, U2, Stride, Order, Points) ->
    send_bin(Points),
    cast(5286,
         <<Target:32/native-unsigned,
           U1:32/native-float,
           U2:32/native-float,
           Stride:32/native-signed,
           Order:32/native-signed>>).

-spec map2d(Target,
            U1,
            U2,
            Ustride,
            Uorder,
            V1,
            V2,
            Vstride,
            Vorder,
            Points) ->
               ok
               when
                   is_subtype(Target, enum()),
                   is_subtype(U1, float()),
                   is_subtype(U2, float()),
                   is_subtype(Ustride, integer()),
                   is_subtype(Uorder, integer()),
                   is_subtype(V1, float()),
                   is_subtype(V2, float()),
                   is_subtype(Vstride, integer()),
                   is_subtype(Vorder, integer()),
                   is_subtype(Points, binary()).

map2d(Target, U1, U2, Ustride, Uorder, V1, V2, Vstride, Vorder, Points) ->
    send_bin(Points),
    cast(5287,
         <<Target:32/native-unsigned,
           0:32,
           U1:64/native-float,
           U2:64/native-float,
           Ustride:32/native-signed,
           Uorder:32/native-signed,
           V1:64/native-float,
           V2:64/native-float,
           Vstride:32/native-signed,
           Vorder:32/native-signed>>).

-spec map2f(Target,
            U1,
            U2,
            Ustride,
            Uorder,
            V1,
            V2,
            Vstride,
            Vorder,
            Points) ->
               ok
               when
                   is_subtype(Target, enum()),
                   is_subtype(U1, float()),
                   is_subtype(U2, float()),
                   is_subtype(Ustride, integer()),
                   is_subtype(Uorder, integer()),
                   is_subtype(V1, float()),
                   is_subtype(V2, float()),
                   is_subtype(Vstride, integer()),
                   is_subtype(Vorder, integer()),
                   is_subtype(Points, binary()).

map2f(Target, U1, U2, Ustride, Uorder, V1, V2, Vstride, Vorder, Points) ->
    send_bin(Points),
    cast(5288,
         <<Target:32/native-unsigned,
           U1:32/native-float,
           U2:32/native-float,
           Ustride:32/native-signed,
           Uorder:32/native-signed,
           V1:32/native-float,
           V2:32/native-float,
           Vstride:32/native-signed,
           Vorder:32/native-signed>>).

-spec getMapdv(Target, Query, V) -> ok
                  when
                      is_subtype(Target, enum()),
                      is_subtype(Query, enum()),
                      is_subtype(V, mem()).

getMapdv(Target, Query, V) ->
    send_bin(V),
    call(5289, <<Target:32/native-unsigned,Query:32/native-unsigned>>).

-spec getMapfv(Target, Query, V) -> ok
                  when
                      is_subtype(Target, enum()),
                      is_subtype(Query, enum()),
                      is_subtype(V, mem()).

getMapfv(Target, Query, V) ->
    send_bin(V),
    call(5290, <<Target:32/native-unsigned,Query:32/native-unsigned>>).

-spec getMapiv(Target, Query, V) -> ok
                  when
                      is_subtype(Target, enum()),
                      is_subtype(Query, enum()),
                      is_subtype(V, mem()).

getMapiv(Target, Query, V) ->
    send_bin(V),
    call(5291, <<Target:32/native-unsigned,Query:32/native-unsigned>>).

-spec evalCoord1d(U) -> ok when is_subtype(U, float()).

evalCoord1d(U) ->
    cast(5292, <<U:64/native-float>>).

-spec evalCoord1f(U) -> ok when is_subtype(U, float()).

evalCoord1f(U) ->
    cast(5293, <<U:32/native-float>>).

-spec evalCoord1dv(U) -> ok when is_subtype(U, {U :: float()}).

evalCoord1dv({U}) ->
    evalCoord1d(U).

-spec evalCoord1fv(U) -> ok when is_subtype(U, {U :: float()}).

evalCoord1fv({U}) ->
    evalCoord1f(U).

-spec evalCoord2d(U, V) -> ok
                     when is_subtype(U, float()), is_subtype(V, float()).

evalCoord2d(U, V) ->
    cast(5294, <<U:64/native-float,V:64/native-float>>).

-spec evalCoord2f(U, V) -> ok
                     when is_subtype(U, float()), is_subtype(V, float()).

evalCoord2f(U, V) ->
    cast(5295, <<U:32/native-float,V:32/native-float>>).

-spec evalCoord2dv(U) -> ok
                      when is_subtype(U, {U :: float(), V :: float()}).

evalCoord2dv({U,V}) ->
    evalCoord2d(U, V).

-spec evalCoord2fv(U) -> ok
                      when is_subtype(U, {U :: float(), V :: float()}).

evalCoord2fv({U,V}) ->
    evalCoord2f(U, V).

-spec mapGrid1d(Un, U1, U2) -> ok
                   when
                       is_subtype(Un, integer()),
                       is_subtype(U1, float()),
                       is_subtype(U2, float()).

mapGrid1d(Un, U1, U2) ->
    cast(5296,
         <<Un:32/native-signed,
           0:32,
           U1:64/native-float,
           U2:64/native-float>>).

-spec mapGrid1f(Un, U1, U2) -> ok
                   when
                       is_subtype(Un, integer()),
                       is_subtype(U1, float()),
                       is_subtype(U2, float()).

mapGrid1f(Un, U1, U2) ->
    cast(5297,
         <<Un:32/native-signed,U1:32/native-float,U2:32/native-float>>).

-spec mapGrid2d(Un, U1, U2, Vn, V1, V2) -> ok
                   when
                       is_subtype(Un, integer()),
                       is_subtype(U1, float()),
                       is_subtype(U2, float()),
                       is_subtype(Vn, integer()),
                       is_subtype(V1, float()),
                       is_subtype(V2, float()).

mapGrid2d(Un, U1, U2, Vn, V1, V2) ->
    cast(5298,
         <<Un:32/native-signed,
           0:32,
           U1:64/native-float,
           U2:64/native-float,
           Vn:32/native-signed,
           0:32,
           V1:64/native-float,
           V2:64/native-float>>).

-spec mapGrid2f(Un, U1, U2, Vn, V1, V2) -> ok
                   when
                       is_subtype(Un, integer()),
                       is_subtype(U1, float()),
                       is_subtype(U2, float()),
                       is_subtype(Vn, integer()),
                       is_subtype(V1, float()),
                       is_subtype(V2, float()).

mapGrid2f(Un, U1, U2, Vn, V1, V2) ->
    cast(5299,
         <<Un:32/native-signed,
           U1:32/native-float,
           U2:32/native-float,
           Vn:32/native-signed,
           V1:32/native-float,
           V2:32/native-float>>).

-spec evalPoint1(I) -> ok when is_subtype(I, integer()).

evalPoint1(I) ->
    cast(5300, <<I:32/native-signed>>).

-spec evalPoint2(I, J) -> ok
                    when
                        is_subtype(I, integer()),
                        is_subtype(J, integer()).

evalPoint2(I, J) ->
    cast(5301, <<I:32/native-signed,J:32/native-signed>>).

-spec evalMesh1(Mode, I1, I2) -> ok
                   when
                       is_subtype(Mode, enum()),
                       is_subtype(I1, integer()),
                       is_subtype(I2, integer()).

evalMesh1(Mode, I1, I2) ->
    cast(5302,
         <<Mode:32/native-unsigned,
           I1:32/native-signed,
           I2:32/native-signed>>).

-spec evalMesh2(Mode, I1, I2, J1, J2) -> ok
                   when
                       is_subtype(Mode, enum()),
                       is_subtype(I1, integer()),
                       is_subtype(I2, integer()),
                       is_subtype(J1, integer()),
                       is_subtype(J2, integer()).

evalMesh2(Mode, I1, I2, J1, J2) ->
    cast(5303,
         <<Mode:32/native-unsigned,
           I1:32/native-signed,
           I2:32/native-signed,
           J1:32/native-signed,
           J2:32/native-signed>>).

-spec fogf(Pname, Param) -> ok
              when is_subtype(Pname, enum()), is_subtype(Param, float()).

fogf(Pname, Param) ->
    cast(5304, <<Pname:32/native-unsigned,Param:32/native-float>>).

-spec fogi(Pname, Param) -> ok
              when
                  is_subtype(Pname, enum()),
                  is_subtype(Param, integer()).

fogi(Pname, Param) ->
    cast(5305, <<Pname:32/native-unsigned,Param:32/native-signed>>).

-spec fogfv(Pname, Params) -> ok
               when
                   is_subtype(Pname, enum()),
                   is_subtype(Params, {float()}).

fogfv(Pname, Params) ->
    cast(5306,
         <<Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((0 + size(Params)) rem 2 * 32)>>).

-spec fogiv(Pname, Params) -> ok
               when
                   is_subtype(Pname, enum()),
                   is_subtype(Params, {integer()}).

fogiv(Pname, Params) ->
    cast(5307,
         <<Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((0 + size(Params)) rem 2 * 32)>>).

-spec feedbackBuffer(Size, Type, Buffer) -> ok
                        when
                            is_subtype(Size, integer()),
                            is_subtype(Type, enum()),
                            is_subtype(Buffer, mem()).

feedbackBuffer(Size, Type, Buffer) ->
    send_bin(Buffer),
    call(5308, <<Size:32/native-signed,Type:32/native-unsigned>>).

-spec passThrough(Token) -> ok when is_subtype(Token, float()).

passThrough(Token) ->
    cast(5309, <<Token:32/native-float>>).

-spec selectBuffer(Size, Buffer) -> ok
                      when
                          is_subtype(Size, integer()),
                          is_subtype(Buffer, mem()).

selectBuffer(Size, Buffer) ->
    send_bin(Buffer),
    call(5310, <<Size:32/native-signed>>).

-spec initNames() -> ok.

initNames() ->
    cast(5311, <<>>).

-spec loadName(Name) -> ok when is_subtype(Name, integer()).

loadName(Name) ->
    cast(5312, <<Name:32/native-unsigned>>).

-spec pushName(Name) -> ok when is_subtype(Name, integer()).

pushName(Name) ->
    cast(5313, <<Name:32/native-unsigned>>).

-spec popName() -> ok.

popName() ->
    cast(5314, <<>>).

-spec blendColor(Red, Green, Blue, Alpha) -> ok
                    when
                        is_subtype(Red, clamp()),
                        is_subtype(Green, clamp()),
                        is_subtype(Blue, clamp()),
                        is_subtype(Alpha, clamp()).

blendColor(Red, Green, Blue, Alpha) ->
    cast(5315,
         <<Red:32/native-float,
           Green:32/native-float,
           Blue:32/native-float,
           Alpha:32/native-float>>).

-spec blendEquation(Mode) -> ok when is_subtype(Mode, enum()).

blendEquation(Mode) ->
    cast(5316, <<Mode:32/native-unsigned>>).

-spec drawRangeElements(Mode, Start, End, Count, Type, Indices) -> ok
                           when
                               is_subtype(Mode, enum()),
                               is_subtype(Start, integer()),
                               is_subtype(End, integer()),
                               is_subtype(Count, integer()),
                               is_subtype(Type, enum()),
                               is_subtype(Indices, offset() | mem()).

drawRangeElements(Mode, Start, End, Count, Type, Indices)
    when is_integer(Indices) ->
    cast(5317,
         <<Mode:32/native-unsigned,
           Start:32/native-unsigned,
           End:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Indices:32/native-unsigned>>);
drawRangeElements(Mode, Start, End, Count, Type, Indices) ->
    send_bin(Indices),
    cast(5318,
         <<Mode:32/native-unsigned,
           Start:32/native-unsigned,
           End:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned>>).

-spec texImage3D(Target,
                 Level,
                 InternalFormat,
                 Width,
                 Height,
                 Depth,
                 Border,
                 Format,
                 Type,
                 Pixels) ->
                    ok
                    when
                        is_subtype(Target, enum()),
                        is_subtype(Level, integer()),
                        is_subtype(InternalFormat, integer()),
                        is_subtype(Width, integer()),
                        is_subtype(Height, integer()),
                        is_subtype(Depth, integer()),
                        is_subtype(Border, integer()),
                        is_subtype(Format, enum()),
                        is_subtype(Type, enum()),
                        is_subtype(Pixels, offset() | mem()).

texImage3D(Target,
           Level,
           InternalFormat,
           Width,
           Height,
           Depth,
           Border,
           Format,
           Type,
           Pixels)
    when is_integer(Pixels) ->
    cast(5319,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           InternalFormat:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Depth:32/native-signed,
           Border:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned,
           Pixels:32/native-unsigned>>);
texImage3D(Target,
           Level,
           InternalFormat,
           Width,
           Height,
           Depth,
           Border,
           Format,
           Type,
           Pixels) ->
    send_bin(Pixels),
    cast(5320,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           InternalFormat:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Depth:32/native-signed,
           Border:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec texSubImage3D(Target,
                    Level,
                    Xoffset,
                    Yoffset,
                    Zoffset,
                    Width,
                    Height,
                    Depth,
                    Format,
                    Type,
                    Pixels) ->
                       ok
                       when
                           is_subtype(Target, enum()),
                           is_subtype(Level, integer()),
                           is_subtype(Xoffset, integer()),
                           is_subtype(Yoffset, integer()),
                           is_subtype(Zoffset, integer()),
                           is_subtype(Width, integer()),
                           is_subtype(Height, integer()),
                           is_subtype(Depth, integer()),
                           is_subtype(Format, enum()),
                           is_subtype(Type, enum()),
                           is_subtype(Pixels, offset() | mem()).

texSubImage3D(Target,
              Level,
              Xoffset,
              Yoffset,
              Zoffset,
              Width,
              Height,
              Depth,
              Format,
              Type,
              Pixels)
    when is_integer(Pixels) ->
    cast(5321,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Yoffset:32/native-signed,
           Zoffset:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Depth:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned,
           Pixels:32/native-unsigned>>);
texSubImage3D(Target,
              Level,
              Xoffset,
              Yoffset,
              Zoffset,
              Width,
              Height,
              Depth,
              Format,
              Type,
              Pixels) ->
    send_bin(Pixels),
    cast(5322,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Yoffset:32/native-signed,
           Zoffset:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Depth:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec copyTexSubImage3D(Target,
                        Level,
                        Xoffset,
                        Yoffset,
                        Zoffset,
                        X,
                        Y,
                        Width,
                        Height) ->
                           ok
                           when
                               is_subtype(Target, enum()),
                               is_subtype(Level, integer()),
                               is_subtype(Xoffset, integer()),
                               is_subtype(Yoffset, integer()),
                               is_subtype(Zoffset, integer()),
                               is_subtype(X, integer()),
                               is_subtype(Y, integer()),
                               is_subtype(Width, integer()),
                               is_subtype(Height, integer()).

copyTexSubImage3D(Target,
                  Level,
                  Xoffset,
                  Yoffset,
                  Zoffset,
                  X,
                  Y,
                  Width,
                  Height) ->
    cast(5323,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Yoffset:32/native-signed,
           Zoffset:32/native-signed,
           X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed>>).

-spec colorTable(Target, Internalformat, Width, Format, Type, Table) ->
                    ok
                    when
                        is_subtype(Target, enum()),
                        is_subtype(Internalformat, enum()),
                        is_subtype(Width, integer()),
                        is_subtype(Format, enum()),
                        is_subtype(Type, enum()),
                        is_subtype(Table, offset() | mem()).

colorTable(Target, Internalformat, Width, Format, Type, Table)
    when is_integer(Table) ->
    cast(5324,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned,
           Table:32/native-unsigned>>);
colorTable(Target, Internalformat, Width, Format, Type, Table) ->
    send_bin(Table),
    cast(5325,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec colorTableParameterfv(Target, Pname, Params) -> ok
                               when
                                   is_subtype(Target, enum()),
                                   is_subtype(Pname, enum()),
                                   is_subtype(Params,
                                              {float(),
                                               float(),
                                               float(),
                                               float()}).

colorTableParameterfv(Target, Pname, {P1,P2,P3,P4}) ->
    cast(5326,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           P1:32/native-float,
           P2:32/native-float,
           P3:32/native-float,
           P4:32/native-float>>).

-spec colorTableParameteriv(Target, Pname, Params) -> ok
                               when
                                   is_subtype(Target, enum()),
                                   is_subtype(Pname, enum()),
                                   is_subtype(Params,
                                              {integer(),
                                               integer(),
                                               integer(),
                                               integer()}).

colorTableParameteriv(Target, Pname, {P1,P2,P3,P4}) ->
    cast(5327,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           P1:32/native-signed,
           P2:32/native-signed,
           P3:32/native-signed,
           P4:32/native-signed>>).

-spec copyColorTable(Target, Internalformat, X, Y, Width) -> ok
                        when
                            is_subtype(Target, enum()),
                            is_subtype(Internalformat, enum()),
                            is_subtype(X, integer()),
                            is_subtype(Y, integer()),
                            is_subtype(Width, integer()).

copyColorTable(Target, Internalformat, X, Y, Width) ->
    cast(5328,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed>>).

-spec getColorTable(Target, Format, Type, Table) -> ok
                       when
                           is_subtype(Target, enum()),
                           is_subtype(Format, enum()),
                           is_subtype(Type, enum()),
                           is_subtype(Table, mem()).

getColorTable(Target, Format, Type, Table) ->
    send_bin(Table),
    call(5329,
         <<Target:32/native-unsigned,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec getColorTableParameterfv(Target, Pname) ->
                                  {float(), float(), float(), float()}
                                  when
                                      is_subtype(Target, enum()),
                                      is_subtype(Pname, enum()).

getColorTableParameterfv(Target, Pname) ->
    call(5330, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getColorTableParameteriv(Target, Pname) ->
                                  {integer(),
                                   integer(),
                                   integer(),
                                   integer()}
                                  when
                                      is_subtype(Target, enum()),
                                      is_subtype(Pname, enum()).

getColorTableParameteriv(Target, Pname) ->
    call(5331, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec colorSubTable(Target, Start, Count, Format, Type, Data) -> ok
                       when
                           is_subtype(Target, enum()),
                           is_subtype(Start, integer()),
                           is_subtype(Count, integer()),
                           is_subtype(Format, enum()),
                           is_subtype(Type, enum()),
                           is_subtype(Data, offset() | mem()).

colorSubTable(Target, Start, Count, Format, Type, Data)
    when is_integer(Data) ->
    cast(5332,
         <<Target:32/native-unsigned,
           Start:32/native-signed,
           Count:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned,
           Data:32/native-unsigned>>);
colorSubTable(Target, Start, Count, Format, Type, Data) ->
    send_bin(Data),
    cast(5333,
         <<Target:32/native-unsigned,
           Start:32/native-signed,
           Count:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec copyColorSubTable(Target, Start, X, Y, Width) -> ok
                           when
                               is_subtype(Target, enum()),
                               is_subtype(Start, integer()),
                               is_subtype(X, integer()),
                               is_subtype(Y, integer()),
                               is_subtype(Width, integer()).

copyColorSubTable(Target, Start, X, Y, Width) ->
    cast(5334,
         <<Target:32/native-unsigned,
           Start:32/native-signed,
           X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed>>).

-spec convolutionFilter1D(Target,
                          Internalformat,
                          Width,
                          Format,
                          Type,
                          Image) ->
                             ok
                             when
                                 is_subtype(Target, enum()),
                                 is_subtype(Internalformat, enum()),
                                 is_subtype(Width, integer()),
                                 is_subtype(Format, enum()),
                                 is_subtype(Type, enum()),
                                 is_subtype(Image, offset() | mem()).

convolutionFilter1D(Target, Internalformat, Width, Format, Type, Image)
    when is_integer(Image) ->
    cast(5335,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned,
           Image:32/native-unsigned>>);
convolutionFilter1D(Target, Internalformat, Width, Format, Type, Image) ->
    send_bin(Image),
    cast(5336,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec convolutionFilter2D(Target,
                          Internalformat,
                          Width,
                          Height,
                          Format,
                          Type,
                          Image) ->
                             ok
                             when
                                 is_subtype(Target, enum()),
                                 is_subtype(Internalformat, enum()),
                                 is_subtype(Width, integer()),
                                 is_subtype(Height, integer()),
                                 is_subtype(Format, enum()),
                                 is_subtype(Type, enum()),
                                 is_subtype(Image, offset() | mem()).

convolutionFilter2D(Target,
                    Internalformat,
                    Width,
                    Height,
                    Format,
                    Type,
                    Image)
    when is_integer(Image) ->
    cast(5337,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Height:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned,
           Image:32/native-unsigned>>);
convolutionFilter2D(Target,
                    Internalformat,
                    Width,
                    Height,
                    Format,
                    Type,
                    Image) ->
    send_bin(Image),
    cast(5338,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Height:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec convolutionParameterf(Target, Pname, Params) -> ok
                               when
                                   is_subtype(Target, enum()),
                                   is_subtype(Pname, enum()),
                                   is_subtype(Params, {float()}).

convolutionParameterf(Target, Pname, Params) ->
    cast(5339,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec convolutionParameterfv(Target :: enum(), Pname :: enum(), Params) ->
                                ok
                                when
                                    is_subtype(Params,
                                               {Params :: {float()}}).

convolutionParameterfv(Target, Pname, {Params}) ->
    convolutionParameterf(Target, Pname, Params).

-spec convolutionParameteri(Target, Pname, Params) -> ok
                               when
                                   is_subtype(Target, enum()),
                                   is_subtype(Pname, enum()),
                                   is_subtype(Params, {integer()}).

convolutionParameteri(Target, Pname, Params) ->
    cast(5340,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec convolutionParameteriv(Target :: enum(), Pname :: enum(), Params) ->
                                ok
                                when
                                    is_subtype(Params,
                                               {Params :: {integer()}}).

convolutionParameteriv(Target, Pname, {Params}) ->
    convolutionParameteri(Target, Pname, Params).

-spec copyConvolutionFilter1D(Target, Internalformat, X, Y, Width) -> ok
                                 when
                                     is_subtype(Target, enum()),
                                     is_subtype(Internalformat, enum()),
                                     is_subtype(X, integer()),
                                     is_subtype(Y, integer()),
                                     is_subtype(Width, integer()).

copyConvolutionFilter1D(Target, Internalformat, X, Y, Width) ->
    cast(5341,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed>>).

-spec copyConvolutionFilter2D(Target,
                              Internalformat,
                              X,
                              Y,
                              Width,
                              Height) ->
                                 ok
                                 when
                                     is_subtype(Target, enum()),
                                     is_subtype(Internalformat, enum()),
                                     is_subtype(X, integer()),
                                     is_subtype(Y, integer()),
                                     is_subtype(Width, integer()),
                                     is_subtype(Height, integer()).

copyConvolutionFilter2D(Target, Internalformat, X, Y, Width, Height) ->
    cast(5342,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           X:32/native-signed,
           Y:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed>>).

-spec getConvolutionFilter(Target, Format, Type, Image) -> ok
                              when
                                  is_subtype(Target, enum()),
                                  is_subtype(Format, enum()),
                                  is_subtype(Type, enum()),
                                  is_subtype(Image, mem()).

getConvolutionFilter(Target, Format, Type, Image) ->
    send_bin(Image),
    call(5343,
         <<Target:32/native-unsigned,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec getConvolutionParameterfv(Target, Pname) ->
                                   {float(), float(), float(), float()}
                                   when
                                       is_subtype(Target, enum()),
                                       is_subtype(Pname, enum()).

getConvolutionParameterfv(Target, Pname) ->
    call(5344, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getConvolutionParameteriv(Target, Pname) ->
                                   {integer(),
                                    integer(),
                                    integer(),
                                    integer()}
                                   when
                                       is_subtype(Target, enum()),
                                       is_subtype(Pname, enum()).

getConvolutionParameteriv(Target, Pname) ->
    call(5345, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec separableFilter2D(Target,
                        Internalformat,
                        Width,
                        Height,
                        Format,
                        Type,
                        Row,
                        Column) ->
                           ok
                           when
                               is_subtype(Target, enum()),
                               is_subtype(Internalformat, enum()),
                               is_subtype(Width, integer()),
                               is_subtype(Height, integer()),
                               is_subtype(Format, enum()),
                               is_subtype(Type, enum()),
                               is_subtype(Row, offset() | mem()),
                               is_subtype(Column, offset() | mem()).

separableFilter2D(Target,
                  Internalformat,
                  Width,
                  Height,
                  Format,
                  Type,
                  Row,
                  Column)
    when is_integer(Row), is_integer(Column) ->
    cast(5346,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Height:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned,
           Row:32/native-unsigned,
           Column:32/native-unsigned>>);
separableFilter2D(Target,
                  Internalformat,
                  Width,
                  Height,
                  Format,
                  Type,
                  Row,
                  Column) ->
    send_bin(Row),
    send_bin(Column),
    cast(5347,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Height:32/native-signed,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec getHistogram(Target, Reset, Format, Type, Values) -> ok
                      when
                          is_subtype(Target, enum()),
                          is_subtype(Reset, 0 | 1),
                          is_subtype(Format, enum()),
                          is_subtype(Type, enum()),
                          is_subtype(Values, mem()).

getHistogram(Target, Reset, Format, Type, Values) ->
    send_bin(Values),
    call(5348,
         <<Target:32/native-unsigned,
           Reset:8/native-unsigned,
           0:24,
           Format:32/native-unsigned,
           Type:32/native-unsigned>>).

-spec getHistogramParameterfv(Target, Pname) -> {float()}
                                 when
                                     is_subtype(Target, enum()),
                                     is_subtype(Pname, enum()).

getHistogramParameterfv(Target, Pname) ->
    call(5349, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getHistogramParameteriv(Target, Pname) -> {integer()}
                                 when
                                     is_subtype(Target, enum()),
                                     is_subtype(Pname, enum()).

getHistogramParameteriv(Target, Pname) ->
    call(5350, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getMinmax(Target, Reset, Format, Types, Values) -> ok
                   when
                       is_subtype(Target, enum()),
                       is_subtype(Reset, 0 | 1),
                       is_subtype(Format, enum()),
                       is_subtype(Types, enum()),
                       is_subtype(Values, mem()).

getMinmax(Target, Reset, Format, Types, Values) ->
    send_bin(Values),
    call(5351,
         <<Target:32/native-unsigned,
           Reset:8/native-unsigned,
           0:24,
           Format:32/native-unsigned,
           Types:32/native-unsigned>>).

-spec getMinmaxParameterfv(Target, Pname) -> {float()}
                              when
                                  is_subtype(Target, enum()),
                                  is_subtype(Pname, enum()).

getMinmaxParameterfv(Target, Pname) ->
    call(5352, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getMinmaxParameteriv(Target, Pname) -> {integer()}
                              when
                                  is_subtype(Target, enum()),
                                  is_subtype(Pname, enum()).

getMinmaxParameteriv(Target, Pname) ->
    call(5353, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec histogram(Target, Width, Internalformat, Sink) -> ok
                   when
                       is_subtype(Target, enum()),
                       is_subtype(Width, integer()),
                       is_subtype(Internalformat, enum()),
                       is_subtype(Sink, 0 | 1).

histogram(Target, Width, Internalformat, Sink) ->
    cast(5354,
         <<Target:32/native-unsigned,
           Width:32/native-signed,
           Internalformat:32/native-unsigned,
           Sink:8/native-unsigned>>).

-spec minmax(Target, Internalformat, Sink) -> ok
                when
                    is_subtype(Target, enum()),
                    is_subtype(Internalformat, enum()),
                    is_subtype(Sink, 0 | 1).

minmax(Target, Internalformat, Sink) ->
    cast(5355,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           Sink:8/native-unsigned>>).

-spec resetHistogram(Target) -> ok when is_subtype(Target, enum()).

resetHistogram(Target) ->
    cast(5356, <<Target:32/native-unsigned>>).

-spec resetMinmax(Target) -> ok when is_subtype(Target, enum()).

resetMinmax(Target) ->
    cast(5357, <<Target:32/native-unsigned>>).

-spec activeTexture(Texture) -> ok when is_subtype(Texture, enum()).

activeTexture(Texture) ->
    cast(5358, <<Texture:32/native-unsigned>>).

-spec sampleCoverage(Value, Invert) -> ok
                        when
                            is_subtype(Value, clamp()),
                            is_subtype(Invert, 0 | 1).

sampleCoverage(Value, Invert) ->
    cast(5359, <<Value:32/native-float,Invert:8/native-unsigned>>).

-spec compressedTexImage3D(Target,
                           Level,
                           Internalformat,
                           Width,
                           Height,
                           Depth,
                           Border,
                           ImageSize,
                           Data) ->
                              ok
                              when
                                  is_subtype(Target, enum()),
                                  is_subtype(Level, integer()),
                                  is_subtype(Internalformat, enum()),
                                  is_subtype(Width, integer()),
                                  is_subtype(Height, integer()),
                                  is_subtype(Depth, integer()),
                                  is_subtype(Border, integer()),
                                  is_subtype(ImageSize, integer()),
                                  is_subtype(Data, offset() | mem()).

compressedTexImage3D(Target,
                     Level,
                     Internalformat,
                     Width,
                     Height,
                     Depth,
                     Border,
                     ImageSize,
                     Data)
    when is_integer(Data) ->
    cast(5360,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Height:32/native-signed,
           Depth:32/native-signed,
           Border:32/native-signed,
           ImageSize:32/native-signed,
           Data:32/native-unsigned>>);
compressedTexImage3D(Target,
                     Level,
                     Internalformat,
                     Width,
                     Height,
                     Depth,
                     Border,
                     ImageSize,
                     Data) ->
    send_bin(Data),
    cast(5361,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Height:32/native-signed,
           Depth:32/native-signed,
           Border:32/native-signed,
           ImageSize:32/native-signed>>).

-spec compressedTexImage2D(Target,
                           Level,
                           Internalformat,
                           Width,
                           Height,
                           Border,
                           ImageSize,
                           Data) ->
                              ok
                              when
                                  is_subtype(Target, enum()),
                                  is_subtype(Level, integer()),
                                  is_subtype(Internalformat, enum()),
                                  is_subtype(Width, integer()),
                                  is_subtype(Height, integer()),
                                  is_subtype(Border, integer()),
                                  is_subtype(ImageSize, integer()),
                                  is_subtype(Data, offset() | mem()).

compressedTexImage2D(Target,
                     Level,
                     Internalformat,
                     Width,
                     Height,
                     Border,
                     ImageSize,
                     Data)
    when is_integer(Data) ->
    cast(5362,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Height:32/native-signed,
           Border:32/native-signed,
           ImageSize:32/native-signed,
           Data:32/native-unsigned>>);
compressedTexImage2D(Target,
                     Level,
                     Internalformat,
                     Width,
                     Height,
                     Border,
                     ImageSize,
                     Data) ->
    send_bin(Data),
    cast(5363,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Height:32/native-signed,
           Border:32/native-signed,
           ImageSize:32/native-signed>>).

-spec compressedTexImage1D(Target,
                           Level,
                           Internalformat,
                           Width,
                           Border,
                           ImageSize,
                           Data) ->
                              ok
                              when
                                  is_subtype(Target, enum()),
                                  is_subtype(Level, integer()),
                                  is_subtype(Internalformat, enum()),
                                  is_subtype(Width, integer()),
                                  is_subtype(Border, integer()),
                                  is_subtype(ImageSize, integer()),
                                  is_subtype(Data, offset() | mem()).

compressedTexImage1D(Target,
                     Level,
                     Internalformat,
                     Width,
                     Border,
                     ImageSize,
                     Data)
    when is_integer(Data) ->
    cast(5364,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Border:32/native-signed,
           ImageSize:32/native-signed,
           Data:32/native-unsigned>>);
compressedTexImage1D(Target,
                     Level,
                     Internalformat,
                     Width,
                     Border,
                     ImageSize,
                     Data) ->
    send_bin(Data),
    cast(5365,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Border:32/native-signed,
           ImageSize:32/native-signed>>).

-spec compressedTexSubImage3D(Target,
                              Level,
                              Xoffset,
                              Yoffset,
                              Zoffset,
                              Width,
                              Height,
                              Depth,
                              Format,
                              ImageSize,
                              Data) ->
                                 ok
                                 when
                                     is_subtype(Target, enum()),
                                     is_subtype(Level, integer()),
                                     is_subtype(Xoffset, integer()),
                                     is_subtype(Yoffset, integer()),
                                     is_subtype(Zoffset, integer()),
                                     is_subtype(Width, integer()),
                                     is_subtype(Height, integer()),
                                     is_subtype(Depth, integer()),
                                     is_subtype(Format, enum()),
                                     is_subtype(ImageSize, integer()),
                                     is_subtype(Data, offset() | mem()).

compressedTexSubImage3D(Target,
                        Level,
                        Xoffset,
                        Yoffset,
                        Zoffset,
                        Width,
                        Height,
                        Depth,
                        Format,
                        ImageSize,
                        Data)
    when is_integer(Data) ->
    cast(5366,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Yoffset:32/native-signed,
           Zoffset:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Depth:32/native-signed,
           Format:32/native-unsigned,
           ImageSize:32/native-signed,
           Data:32/native-unsigned>>);
compressedTexSubImage3D(Target,
                        Level,
                        Xoffset,
                        Yoffset,
                        Zoffset,
                        Width,
                        Height,
                        Depth,
                        Format,
                        ImageSize,
                        Data) ->
    send_bin(Data),
    cast(5367,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Yoffset:32/native-signed,
           Zoffset:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Depth:32/native-signed,
           Format:32/native-unsigned,
           ImageSize:32/native-signed>>).

-spec compressedTexSubImage2D(Target,
                              Level,
                              Xoffset,
                              Yoffset,
                              Width,
                              Height,
                              Format,
                              ImageSize,
                              Data) ->
                                 ok
                                 when
                                     is_subtype(Target, enum()),
                                     is_subtype(Level, integer()),
                                     is_subtype(Xoffset, integer()),
                                     is_subtype(Yoffset, integer()),
                                     is_subtype(Width, integer()),
                                     is_subtype(Height, integer()),
                                     is_subtype(Format, enum()),
                                     is_subtype(ImageSize, integer()),
                                     is_subtype(Data, offset() | mem()).

compressedTexSubImage2D(Target,
                        Level,
                        Xoffset,
                        Yoffset,
                        Width,
                        Height,
                        Format,
                        ImageSize,
                        Data)
    when is_integer(Data) ->
    cast(5368,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Yoffset:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Format:32/native-unsigned,
           ImageSize:32/native-signed,
           Data:32/native-unsigned>>);
compressedTexSubImage2D(Target,
                        Level,
                        Xoffset,
                        Yoffset,
                        Width,
                        Height,
                        Format,
                        ImageSize,
                        Data) ->
    send_bin(Data),
    cast(5369,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Yoffset:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Format:32/native-unsigned,
           ImageSize:32/native-signed>>).

-spec compressedTexSubImage1D(Target,
                              Level,
                              Xoffset,
                              Width,
                              Format,
                              ImageSize,
                              Data) ->
                                 ok
                                 when
                                     is_subtype(Target, enum()),
                                     is_subtype(Level, integer()),
                                     is_subtype(Xoffset, integer()),
                                     is_subtype(Width, integer()),
                                     is_subtype(Format, enum()),
                                     is_subtype(ImageSize, integer()),
                                     is_subtype(Data, offset() | mem()).

compressedTexSubImage1D(Target,
                        Level,
                        Xoffset,
                        Width,
                        Format,
                        ImageSize,
                        Data)
    when is_integer(Data) ->
    cast(5370,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Width:32/native-signed,
           Format:32/native-unsigned,
           ImageSize:32/native-signed,
           Data:32/native-unsigned>>);
compressedTexSubImage1D(Target,
                        Level,
                        Xoffset,
                        Width,
                        Format,
                        ImageSize,
                        Data) ->
    send_bin(Data),
    cast(5371,
         <<Target:32/native-unsigned,
           Level:32/native-signed,
           Xoffset:32/native-signed,
           Width:32/native-signed,
           Format:32/native-unsigned,
           ImageSize:32/native-signed>>).

-spec getCompressedTexImage(Target, Lod, Img) -> ok
                               when
                                   is_subtype(Target, enum()),
                                   is_subtype(Lod, integer()),
                                   is_subtype(Img, mem()).

getCompressedTexImage(Target, Lod, Img) ->
    send_bin(Img),
    call(5372, <<Target:32/native-unsigned,Lod:32/native-signed>>).

-spec clientActiveTexture(Texture) -> ok
                             when is_subtype(Texture, enum()).

clientActiveTexture(Texture) ->
    cast(5373, <<Texture:32/native-unsigned>>).

-spec multiTexCoord1d(Target, S) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, float()).

multiTexCoord1d(Target, S) ->
    cast(5374, <<Target:32/native-unsigned,0:32,S:64/native-float>>).

-spec multiTexCoord1dv(Target :: enum(), V) -> ok
                          when is_subtype(V, {S :: float()}).

multiTexCoord1dv(Target, {S}) ->
    multiTexCoord1d(Target, S).

-spec multiTexCoord1f(Target, S) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, float()).

multiTexCoord1f(Target, S) ->
    cast(5375, <<Target:32/native-unsigned,S:32/native-float>>).

-spec multiTexCoord1fv(Target :: enum(), V) -> ok
                          when is_subtype(V, {S :: float()}).

multiTexCoord1fv(Target, {S}) ->
    multiTexCoord1f(Target, S).

-spec multiTexCoord1i(Target, S) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, integer()).

multiTexCoord1i(Target, S) ->
    cast(5376, <<Target:32/native-unsigned,S:32/native-signed>>).

-spec multiTexCoord1iv(Target :: enum(), V) -> ok
                          when is_subtype(V, {S :: integer()}).

multiTexCoord1iv(Target, {S}) ->
    multiTexCoord1i(Target, S).

-spec multiTexCoord1s(Target, S) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, integer()).

multiTexCoord1s(Target, S) ->
    cast(5377, <<Target:32/native-unsigned,S:16/native-signed>>).

-spec multiTexCoord1sv(Target :: enum(), V) -> ok
                          when is_subtype(V, {S :: integer()}).

multiTexCoord1sv(Target, {S}) ->
    multiTexCoord1s(Target, S).

-spec multiTexCoord2d(Target, S, T) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, float()),
                             is_subtype(T, float()).

multiTexCoord2d(Target, S, T) ->
    cast(5378,
         <<Target:32/native-unsigned,
           0:32,
           S:64/native-float,
           T:64/native-float>>).

-spec multiTexCoord2dv(Target :: enum(), V) -> ok
                          when
                              is_subtype(V,
                                         {S :: float(), T :: float()}).

multiTexCoord2dv(Target, {S,T}) ->
    multiTexCoord2d(Target, S, T).

-spec multiTexCoord2f(Target, S, T) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, float()),
                             is_subtype(T, float()).

multiTexCoord2f(Target, S, T) ->
    cast(5379,
         <<Target:32/native-unsigned,S:32/native-float,T:32/native-float>>).

-spec multiTexCoord2fv(Target :: enum(), V) -> ok
                          when
                              is_subtype(V,
                                         {S :: float(), T :: float()}).

multiTexCoord2fv(Target, {S,T}) ->
    multiTexCoord2f(Target, S, T).

-spec multiTexCoord2i(Target, S, T) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, integer()),
                             is_subtype(T, integer()).

multiTexCoord2i(Target, S, T) ->
    cast(5380,
         <<Target:32/native-unsigned,
           S:32/native-signed,
           T:32/native-signed>>).

-spec multiTexCoord2iv(Target :: enum(), V) -> ok
                          when
                              is_subtype(V,
                                         {S :: integer(),
                                          T :: integer()}).

multiTexCoord2iv(Target, {S,T}) ->
    multiTexCoord2i(Target, S, T).

-spec multiTexCoord2s(Target, S, T) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, integer()),
                             is_subtype(T, integer()).

multiTexCoord2s(Target, S, T) ->
    cast(5381,
         <<Target:32/native-unsigned,
           S:16/native-signed,
           T:16/native-signed>>).

-spec multiTexCoord2sv(Target :: enum(), V) -> ok
                          when
                              is_subtype(V,
                                         {S :: integer(),
                                          T :: integer()}).

multiTexCoord2sv(Target, {S,T}) ->
    multiTexCoord2s(Target, S, T).

-spec multiTexCoord3d(Target, S, T, R) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, float()),
                             is_subtype(T, float()),
                             is_subtype(R, float()).

multiTexCoord3d(Target, S, T, R) ->
    cast(5382,
         <<Target:32/native-unsigned,
           0:32,
           S:64/native-float,
           T:64/native-float,
           R:64/native-float>>).

-spec multiTexCoord3dv(Target :: enum(), V) -> ok
                          when
                              is_subtype(V,
                                         {S :: float(),
                                          T :: float(),
                                          R :: float()}).

multiTexCoord3dv(Target, {S,T,R}) ->
    multiTexCoord3d(Target, S, T, R).

-spec multiTexCoord3f(Target, S, T, R) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, float()),
                             is_subtype(T, float()),
                             is_subtype(R, float()).

multiTexCoord3f(Target, S, T, R) ->
    cast(5383,
         <<Target:32/native-unsigned,
           S:32/native-float,
           T:32/native-float,
           R:32/native-float>>).

-spec multiTexCoord3fv(Target :: enum(), V) -> ok
                          when
                              is_subtype(V,
                                         {S :: float(),
                                          T :: float(),
                                          R :: float()}).

multiTexCoord3fv(Target, {S,T,R}) ->
    multiTexCoord3f(Target, S, T, R).

-spec multiTexCoord3i(Target, S, T, R) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, integer()),
                             is_subtype(T, integer()),
                             is_subtype(R, integer()).

multiTexCoord3i(Target, S, T, R) ->
    cast(5384,
         <<Target:32/native-unsigned,
           S:32/native-signed,
           T:32/native-signed,
           R:32/native-signed>>).

-spec multiTexCoord3iv(Target :: enum(), V) -> ok
                          when
                              is_subtype(V,
                                         {S :: integer(),
                                          T :: integer(),
                                          R :: integer()}).

multiTexCoord3iv(Target, {S,T,R}) ->
    multiTexCoord3i(Target, S, T, R).

-spec multiTexCoord3s(Target, S, T, R) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, integer()),
                             is_subtype(T, integer()),
                             is_subtype(R, integer()).

multiTexCoord3s(Target, S, T, R) ->
    cast(5385,
         <<Target:32/native-unsigned,
           S:16/native-signed,
           T:16/native-signed,
           R:16/native-signed>>).

-spec multiTexCoord3sv(Target :: enum(), V) -> ok
                          when
                              is_subtype(V,
                                         {S :: integer(),
                                          T :: integer(),
                                          R :: integer()}).

multiTexCoord3sv(Target, {S,T,R}) ->
    multiTexCoord3s(Target, S, T, R).

-spec multiTexCoord4d(Target, S, T, R, Q) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, float()),
                             is_subtype(T, float()),
                             is_subtype(R, float()),
                             is_subtype(Q, float()).

multiTexCoord4d(Target, S, T, R, Q) ->
    cast(5386,
         <<Target:32/native-unsigned,
           0:32,
           S:64/native-float,
           T:64/native-float,
           R:64/native-float,
           Q:64/native-float>>).

-spec multiTexCoord4dv(Target :: enum(), V) -> ok
                          when
                              is_subtype(V,
                                         {S :: float(),
                                          T :: float(),
                                          R :: float(),
                                          Q :: float()}).

multiTexCoord4dv(Target, {S,T,R,Q}) ->
    multiTexCoord4d(Target, S, T, R, Q).

-spec multiTexCoord4f(Target, S, T, R, Q) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, float()),
                             is_subtype(T, float()),
                             is_subtype(R, float()),
                             is_subtype(Q, float()).

multiTexCoord4f(Target, S, T, R, Q) ->
    cast(5387,
         <<Target:32/native-unsigned,
           S:32/native-float,
           T:32/native-float,
           R:32/native-float,
           Q:32/native-float>>).

-spec multiTexCoord4fv(Target :: enum(), V) -> ok
                          when
                              is_subtype(V,
                                         {S :: float(),
                                          T :: float(),
                                          R :: float(),
                                          Q :: float()}).

multiTexCoord4fv(Target, {S,T,R,Q}) ->
    multiTexCoord4f(Target, S, T, R, Q).

-spec multiTexCoord4i(Target, S, T, R, Q) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, integer()),
                             is_subtype(T, integer()),
                             is_subtype(R, integer()),
                             is_subtype(Q, integer()).

multiTexCoord4i(Target, S, T, R, Q) ->
    cast(5388,
         <<Target:32/native-unsigned,
           S:32/native-signed,
           T:32/native-signed,
           R:32/native-signed,
           Q:32/native-signed>>).

-spec multiTexCoord4iv(Target :: enum(), V) -> ok
                          when
                              is_subtype(V,
                                         {S :: integer(),
                                          T :: integer(),
                                          R :: integer(),
                                          Q :: integer()}).

multiTexCoord4iv(Target, {S,T,R,Q}) ->
    multiTexCoord4i(Target, S, T, R, Q).

-spec multiTexCoord4s(Target, S, T, R, Q) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(S, integer()),
                             is_subtype(T, integer()),
                             is_subtype(R, integer()),
                             is_subtype(Q, integer()).

multiTexCoord4s(Target, S, T, R, Q) ->
    cast(5389,
         <<Target:32/native-unsigned,
           S:16/native-signed,
           T:16/native-signed,
           R:16/native-signed,
           Q:16/native-signed>>).

-spec multiTexCoord4sv(Target :: enum(), V) -> ok
                          when
                              is_subtype(V,
                                         {S :: integer(),
                                          T :: integer(),
                                          R :: integer(),
                                          Q :: integer()}).

multiTexCoord4sv(Target, {S,T,R,Q}) ->
    multiTexCoord4s(Target, S, T, R, Q).

-spec loadTransposeMatrixf(M) -> ok when is_subtype(M, matrix()).

loadTransposeMatrixf({M1,
                      M2,
                      M3,
                      M4,
                      M5,
                      M6,
                      M7,
                      M8,
                      M9,
                      M10,
                      M11,
                      M12,
                      M13,
                      M14,
                      M15,
                      M16}) ->
    cast(5390,
         <<M1:32/native-float,
           M2:32/native-float,
           M3:32/native-float,
           M4:32/native-float,
           M5:32/native-float,
           M6:32/native-float,
           M7:32/native-float,
           M8:32/native-float,
           M9:32/native-float,
           M10:32/native-float,
           M11:32/native-float,
           M12:32/native-float,
           M13:32/native-float,
           M14:32/native-float,
           M15:32/native-float,
           M16:32/native-float>>);
loadTransposeMatrixf({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}) ->
    cast(5390,
         <<M1:32/native-float,
           M2:32/native-float,
           M3:32/native-float,
           0:32/native-float,
           M4:32/native-float,
           M5:32/native-float,
           M6:32/native-float,
           0:32/native-float,
           M7:32/native-float,
           M8:32/native-float,
           M9:32/native-float,
           0:32/native-float,
           M10:32/native-float,
           M11:32/native-float,
           M12:32/native-float,
           1:32/native-float>>).

-spec loadTransposeMatrixd(M) -> ok when is_subtype(M, matrix()).

loadTransposeMatrixd({M1,
                      M2,
                      M3,
                      M4,
                      M5,
                      M6,
                      M7,
                      M8,
                      M9,
                      M10,
                      M11,
                      M12,
                      M13,
                      M14,
                      M15,
                      M16}) ->
    cast(5391,
         <<M1:64/native-float,
           M2:64/native-float,
           M3:64/native-float,
           M4:64/native-float,
           M5:64/native-float,
           M6:64/native-float,
           M7:64/native-float,
           M8:64/native-float,
           M9:64/native-float,
           M10:64/native-float,
           M11:64/native-float,
           M12:64/native-float,
           M13:64/native-float,
           M14:64/native-float,
           M15:64/native-float,
           M16:64/native-float>>);
loadTransposeMatrixd({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}) ->
    cast(5391,
         <<M1:64/native-float,
           M2:64/native-float,
           M3:64/native-float,
           0:64/native-float,
           M4:64/native-float,
           M5:64/native-float,
           M6:64/native-float,
           0:64/native-float,
           M7:64/native-float,
           M8:64/native-float,
           M9:64/native-float,
           0:64/native-float,
           M10:64/native-float,
           M11:64/native-float,
           M12:64/native-float,
           1:64/native-float>>).

-spec multTransposeMatrixf(M) -> ok when is_subtype(M, matrix()).

multTransposeMatrixf({M1,
                      M2,
                      M3,
                      M4,
                      M5,
                      M6,
                      M7,
                      M8,
                      M9,
                      M10,
                      M11,
                      M12,
                      M13,
                      M14,
                      M15,
                      M16}) ->
    cast(5392,
         <<M1:32/native-float,
           M2:32/native-float,
           M3:32/native-float,
           M4:32/native-float,
           M5:32/native-float,
           M6:32/native-float,
           M7:32/native-float,
           M8:32/native-float,
           M9:32/native-float,
           M10:32/native-float,
           M11:32/native-float,
           M12:32/native-float,
           M13:32/native-float,
           M14:32/native-float,
           M15:32/native-float,
           M16:32/native-float>>);
multTransposeMatrixf({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}) ->
    cast(5392,
         <<M1:32/native-float,
           M2:32/native-float,
           M3:32/native-float,
           0:32/native-float,
           M4:32/native-float,
           M5:32/native-float,
           M6:32/native-float,
           0:32/native-float,
           M7:32/native-float,
           M8:32/native-float,
           M9:32/native-float,
           0:32/native-float,
           M10:32/native-float,
           M11:32/native-float,
           M12:32/native-float,
           1:32/native-float>>).

-spec multTransposeMatrixd(M) -> ok when is_subtype(M, matrix()).

multTransposeMatrixd({M1,
                      M2,
                      M3,
                      M4,
                      M5,
                      M6,
                      M7,
                      M8,
                      M9,
                      M10,
                      M11,
                      M12,
                      M13,
                      M14,
                      M15,
                      M16}) ->
    cast(5393,
         <<M1:64/native-float,
           M2:64/native-float,
           M3:64/native-float,
           M4:64/native-float,
           M5:64/native-float,
           M6:64/native-float,
           M7:64/native-float,
           M8:64/native-float,
           M9:64/native-float,
           M10:64/native-float,
           M11:64/native-float,
           M12:64/native-float,
           M13:64/native-float,
           M14:64/native-float,
           M15:64/native-float,
           M16:64/native-float>>);
multTransposeMatrixd({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}) ->
    cast(5393,
         <<M1:64/native-float,
           M2:64/native-float,
           M3:64/native-float,
           0:64/native-float,
           M4:64/native-float,
           M5:64/native-float,
           M6:64/native-float,
           0:64/native-float,
           M7:64/native-float,
           M8:64/native-float,
           M9:64/native-float,
           0:64/native-float,
           M10:64/native-float,
           M11:64/native-float,
           M12:64/native-float,
           1:64/native-float>>).

-spec blendFuncSeparate(SfactorRGB,
                        DfactorRGB,
                        SfactorAlpha,
                        DfactorAlpha) ->
                           ok
                           when
                               is_subtype(SfactorRGB, enum()),
                               is_subtype(DfactorRGB, enum()),
                               is_subtype(SfactorAlpha, enum()),
                               is_subtype(DfactorAlpha, enum()).

blendFuncSeparate(SfactorRGB, DfactorRGB, SfactorAlpha, DfactorAlpha) ->
    cast(5394,
         <<SfactorRGB:32/native-unsigned,
           DfactorRGB:32/native-unsigned,
           SfactorAlpha:32/native-unsigned,
           DfactorAlpha:32/native-unsigned>>).

-spec multiDrawArrays(Mode, First, Count) -> ok
                         when
                             is_subtype(Mode, enum()),
                             is_subtype(First, [integer()]),
                             is_subtype(Count, [integer()]).

multiDrawArrays(Mode, First, Count) ->
    cast(5395,
         <<Mode:32/native-unsigned,
           (length(First)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- First
           >>/binary,
           0:(length(First) rem 2 * 32),
           (length(Count)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- Count
           >>/binary,
           0:((1 + length(Count)) rem 2 * 32)>>).

-spec pointParameterf(Pname, Param) -> ok
                         when
                             is_subtype(Pname, enum()),
                             is_subtype(Param, float()).

pointParameterf(Pname, Param) ->
    cast(5396, <<Pname:32/native-unsigned,Param:32/native-float>>).

-spec pointParameterfv(Pname, Params) -> ok
                          when
                              is_subtype(Pname, enum()),
                              is_subtype(Params, {float()}).

pointParameterfv(Pname, Params) ->
    cast(5397,
         <<Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((0 + size(Params)) rem 2 * 32)>>).

-spec pointParameteri(Pname, Param) -> ok
                         when
                             is_subtype(Pname, enum()),
                             is_subtype(Param, integer()).

pointParameteri(Pname, Param) ->
    cast(5398, <<Pname:32/native-unsigned,Param:32/native-signed>>).

-spec pointParameteriv(Pname, Params) -> ok
                          when
                              is_subtype(Pname, enum()),
                              is_subtype(Params, {integer()}).

pointParameteriv(Pname, Params) ->
    cast(5399,
         <<Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((0 + size(Params)) rem 2 * 32)>>).

-spec fogCoordf(Coord) -> ok when is_subtype(Coord, float()).

fogCoordf(Coord) ->
    cast(5400, <<Coord:32/native-float>>).

-spec fogCoordfv(Coord) -> ok when is_subtype(Coord, {Coord :: float()}).

fogCoordfv({Coord}) ->
    fogCoordf(Coord).

-spec fogCoordd(Coord) -> ok when is_subtype(Coord, float()).

fogCoordd(Coord) ->
    cast(5401, <<Coord:64/native-float>>).

-spec fogCoorddv(Coord) -> ok when is_subtype(Coord, {Coord :: float()}).

fogCoorddv({Coord}) ->
    fogCoordd(Coord).

-spec fogCoordPointer(Type, Stride, Pointer) -> ok
                         when
                             is_subtype(Type, enum()),
                             is_subtype(Stride, integer()),
                             is_subtype(Pointer, offset() | mem()).

fogCoordPointer(Type, Stride, Pointer) when is_integer(Pointer) ->
    cast(5402,
         <<Type:32/native-unsigned,
           Stride:32/native-signed,
           Pointer:32/native-unsigned>>);
fogCoordPointer(Type, Stride, Pointer) ->
    send_bin(Pointer),
    cast(5403, <<Type:32/native-unsigned,Stride:32/native-signed>>).

-spec secondaryColor3b(Red, Green, Blue) -> ok
                          when
                              is_subtype(Red, integer()),
                              is_subtype(Green, integer()),
                              is_subtype(Blue, integer()).

secondaryColor3b(Red, Green, Blue) ->
    cast(5404,
         <<Red:8/native-signed,
           Green:8/native-signed,
           Blue:8/native-signed>>).

-spec secondaryColor3bv(V) -> ok
                           when
                               is_subtype(V,
                                          {Red :: integer(),
                                           Green :: integer(),
                                           Blue :: integer()}).

secondaryColor3bv({Red,Green,Blue}) ->
    secondaryColor3b(Red, Green, Blue).

-spec secondaryColor3d(Red, Green, Blue) -> ok
                          when
                              is_subtype(Red, float()),
                              is_subtype(Green, float()),
                              is_subtype(Blue, float()).

secondaryColor3d(Red, Green, Blue) ->
    cast(5405,
         <<Red:64/native-float,
           Green:64/native-float,
           Blue:64/native-float>>).

-spec secondaryColor3dv(V) -> ok
                           when
                               is_subtype(V,
                                          {Red :: float(),
                                           Green :: float(),
                                           Blue :: float()}).

secondaryColor3dv({Red,Green,Blue}) ->
    secondaryColor3d(Red, Green, Blue).

-spec secondaryColor3f(Red, Green, Blue) -> ok
                          when
                              is_subtype(Red, float()),
                              is_subtype(Green, float()),
                              is_subtype(Blue, float()).

secondaryColor3f(Red, Green, Blue) ->
    cast(5406,
         <<Red:32/native-float,
           Green:32/native-float,
           Blue:32/native-float>>).

-spec secondaryColor3fv(V) -> ok
                           when
                               is_subtype(V,
                                          {Red :: float(),
                                           Green :: float(),
                                           Blue :: float()}).

secondaryColor3fv({Red,Green,Blue}) ->
    secondaryColor3f(Red, Green, Blue).

-spec secondaryColor3i(Red, Green, Blue) -> ok
                          when
                              is_subtype(Red, integer()),
                              is_subtype(Green, integer()),
                              is_subtype(Blue, integer()).

secondaryColor3i(Red, Green, Blue) ->
    cast(5407,
         <<Red:32/native-signed,
           Green:32/native-signed,
           Blue:32/native-signed>>).

-spec secondaryColor3iv(V) -> ok
                           when
                               is_subtype(V,
                                          {Red :: integer(),
                                           Green :: integer(),
                                           Blue :: integer()}).

secondaryColor3iv({Red,Green,Blue}) ->
    secondaryColor3i(Red, Green, Blue).

-spec secondaryColor3s(Red, Green, Blue) -> ok
                          when
                              is_subtype(Red, integer()),
                              is_subtype(Green, integer()),
                              is_subtype(Blue, integer()).

secondaryColor3s(Red, Green, Blue) ->
    cast(5408,
         <<Red:16/native-signed,
           Green:16/native-signed,
           Blue:16/native-signed>>).

-spec secondaryColor3sv(V) -> ok
                           when
                               is_subtype(V,
                                          {Red :: integer(),
                                           Green :: integer(),
                                           Blue :: integer()}).

secondaryColor3sv({Red,Green,Blue}) ->
    secondaryColor3s(Red, Green, Blue).

-spec secondaryColor3ub(Red, Green, Blue) -> ok
                           when
                               is_subtype(Red, integer()),
                               is_subtype(Green, integer()),
                               is_subtype(Blue, integer()).

secondaryColor3ub(Red, Green, Blue) ->
    cast(5409,
         <<Red:8/native-unsigned,
           Green:8/native-unsigned,
           Blue:8/native-unsigned>>).

-spec secondaryColor3ubv(V) -> ok
                            when
                                is_subtype(V,
                                           {Red :: integer(),
                                            Green :: integer(),
                                            Blue :: integer()}).

secondaryColor3ubv({Red,Green,Blue}) ->
    secondaryColor3ub(Red, Green, Blue).

-spec secondaryColor3ui(Red, Green, Blue) -> ok
                           when
                               is_subtype(Red, integer()),
                               is_subtype(Green, integer()),
                               is_subtype(Blue, integer()).

secondaryColor3ui(Red, Green, Blue) ->
    cast(5410,
         <<Red:32/native-unsigned,
           Green:32/native-unsigned,
           Blue:32/native-unsigned>>).

-spec secondaryColor3uiv(V) -> ok
                            when
                                is_subtype(V,
                                           {Red :: integer(),
                                            Green :: integer(),
                                            Blue :: integer()}).

secondaryColor3uiv({Red,Green,Blue}) ->
    secondaryColor3ui(Red, Green, Blue).

-spec secondaryColor3us(Red, Green, Blue) -> ok
                           when
                               is_subtype(Red, integer()),
                               is_subtype(Green, integer()),
                               is_subtype(Blue, integer()).

secondaryColor3us(Red, Green, Blue) ->
    cast(5411,
         <<Red:16/native-unsigned,
           Green:16/native-unsigned,
           Blue:16/native-unsigned>>).

-spec secondaryColor3usv(V) -> ok
                            when
                                is_subtype(V,
                                           {Red :: integer(),
                                            Green :: integer(),
                                            Blue :: integer()}).

secondaryColor3usv({Red,Green,Blue}) ->
    secondaryColor3us(Red, Green, Blue).

-spec secondaryColorPointer(Size, Type, Stride, Pointer) -> ok
                               when
                                   is_subtype(Size, integer()),
                                   is_subtype(Type, enum()),
                                   is_subtype(Stride, integer()),
                                   is_subtype(Pointer, offset() | mem()).

secondaryColorPointer(Size, Type, Stride, Pointer)
    when is_integer(Pointer) ->
    cast(5412,
         <<Size:32/native-signed,
           Type:32/native-unsigned,
           Stride:32/native-signed,
           Pointer:32/native-unsigned>>);
secondaryColorPointer(Size, Type, Stride, Pointer) ->
    send_bin(Pointer),
    cast(5413,
         <<Size:32/native-signed,
           Type:32/native-unsigned,
           Stride:32/native-signed>>).

-spec windowPos2d(X, Y) -> ok
                     when is_subtype(X, float()), is_subtype(Y, float()).

windowPos2d(X, Y) ->
    cast(5414, <<X:64/native-float,Y:64/native-float>>).

-spec windowPos2dv(V) -> ok
                      when is_subtype(V, {X :: float(), Y :: float()}).

windowPos2dv({X,Y}) ->
    windowPos2d(X, Y).

-spec windowPos2f(X, Y) -> ok
                     when is_subtype(X, float()), is_subtype(Y, float()).

windowPos2f(X, Y) ->
    cast(5415, <<X:32/native-float,Y:32/native-float>>).

-spec windowPos2fv(V) -> ok
                      when is_subtype(V, {X :: float(), Y :: float()}).

windowPos2fv({X,Y}) ->
    windowPos2f(X, Y).

-spec windowPos2i(X, Y) -> ok
                     when
                         is_subtype(X, integer()),
                         is_subtype(Y, integer()).

windowPos2i(X, Y) ->
    cast(5416, <<X:32/native-signed,Y:32/native-signed>>).

-spec windowPos2iv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: integer(), Y :: integer()}).

windowPos2iv({X,Y}) ->
    windowPos2i(X, Y).

-spec windowPos2s(X, Y) -> ok
                     when
                         is_subtype(X, integer()),
                         is_subtype(Y, integer()).

windowPos2s(X, Y) ->
    cast(5417, <<X:16/native-signed,Y:16/native-signed>>).

-spec windowPos2sv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: integer(), Y :: integer()}).

windowPos2sv({X,Y}) ->
    windowPos2s(X, Y).

-spec windowPos3d(X, Y, Z) -> ok
                     when
                         is_subtype(X, float()),
                         is_subtype(Y, float()),
                         is_subtype(Z, float()).

windowPos3d(X, Y, Z) ->
    cast(5418,
         <<X:64/native-float,Y:64/native-float,Z:64/native-float>>).

-spec windowPos3dv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: float(),
                                      Y :: float(),
                                      Z :: float()}).

windowPos3dv({X,Y,Z}) ->
    windowPos3d(X, Y, Z).

-spec windowPos3f(X, Y, Z) -> ok
                     when
                         is_subtype(X, float()),
                         is_subtype(Y, float()),
                         is_subtype(Z, float()).

windowPos3f(X, Y, Z) ->
    cast(5419,
         <<X:32/native-float,Y:32/native-float,Z:32/native-float>>).

-spec windowPos3fv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: float(),
                                      Y :: float(),
                                      Z :: float()}).

windowPos3fv({X,Y,Z}) ->
    windowPos3f(X, Y, Z).

-spec windowPos3i(X, Y, Z) -> ok
                     when
                         is_subtype(X, integer()),
                         is_subtype(Y, integer()),
                         is_subtype(Z, integer()).

windowPos3i(X, Y, Z) ->
    cast(5420,
         <<X:32/native-signed,Y:32/native-signed,Z:32/native-signed>>).

-spec windowPos3iv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: integer(),
                                      Y :: integer(),
                                      Z :: integer()}).

windowPos3iv({X,Y,Z}) ->
    windowPos3i(X, Y, Z).

-spec windowPos3s(X, Y, Z) -> ok
                     when
                         is_subtype(X, integer()),
                         is_subtype(Y, integer()),
                         is_subtype(Z, integer()).

windowPos3s(X, Y, Z) ->
    cast(5421,
         <<X:16/native-signed,Y:16/native-signed,Z:16/native-signed>>).

-spec windowPos3sv(V) -> ok
                      when
                          is_subtype(V,
                                     {X :: integer(),
                                      Y :: integer(),
                                      Z :: integer()}).

windowPos3sv({X,Y,Z}) ->
    windowPos3s(X, Y, Z).

-spec genQueries(N) -> [integer()] when is_subtype(N, integer()).

genQueries(N) ->
    call(5422, <<N:32/native-signed>>).

-spec deleteQueries(Ids) -> ok when is_subtype(Ids, [integer()]).

deleteQueries(Ids) ->
    cast(5423,
         <<(length(Ids)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Ids
           >>/binary,
           0:((1 + length(Ids)) rem 2 * 32)>>).

-spec isQuery(Id) -> 0 | 1 when is_subtype(Id, integer()).

isQuery(Id) ->
    call(5424, <<Id:32/native-unsigned>>).

-spec beginQuery(Target, Id) -> ok
                    when
                        is_subtype(Target, enum()),
                        is_subtype(Id, integer()).

beginQuery(Target, Id) ->
    cast(5425, <<Target:32/native-unsigned,Id:32/native-unsigned>>).

-spec endQuery(Target) -> ok when is_subtype(Target, enum()).

endQuery(Target) ->
    cast(5426, <<Target:32/native-unsigned>>).

-spec getQueryiv(Target, Pname) -> integer()
                    when
                        is_subtype(Target, enum()),
                        is_subtype(Pname, enum()).

getQueryiv(Target, Pname) ->
    call(5427, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getQueryObjectiv(Id, Pname) -> integer()
                          when
                              is_subtype(Id, integer()),
                              is_subtype(Pname, enum()).

getQueryObjectiv(Id, Pname) ->
    call(5428, <<Id:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getQueryObjectuiv(Id, Pname) -> integer()
                           when
                               is_subtype(Id, integer()),
                               is_subtype(Pname, enum()).

getQueryObjectuiv(Id, Pname) ->
    call(5429, <<Id:32/native-unsigned,Pname:32/native-unsigned>>).

-spec bindBuffer(Target, Buffer) -> ok
                    when
                        is_subtype(Target, enum()),
                        is_subtype(Buffer, integer()).

bindBuffer(Target, Buffer) ->
    cast(5430, <<Target:32/native-unsigned,Buffer:32/native-unsigned>>).

-spec deleteBuffers(Buffers) -> ok when is_subtype(Buffers, [integer()]).

deleteBuffers(Buffers) ->
    cast(5431,
         <<(length(Buffers)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Buffers
           >>/binary,
           0:((1 + length(Buffers)) rem 2 * 32)>>).

-spec genBuffers(N) -> [integer()] when is_subtype(N, integer()).

genBuffers(N) ->
    call(5432, <<N:32/native-signed>>).

-spec isBuffer(Buffer) -> 0 | 1 when is_subtype(Buffer, integer()).

isBuffer(Buffer) ->
    call(5433, <<Buffer:32/native-unsigned>>).

-spec bufferData(Target, Size, Data, Usage) -> ok
                    when
                        is_subtype(Target, enum()),
                        is_subtype(Size, integer()),
                        is_subtype(Data, offset() | mem()),
                        is_subtype(Usage, enum()).

bufferData(Target, Size, Data, Usage) when is_integer(Data) ->
    cast(5434,
         <<Target:32/native-unsigned,
           0:32,
           Size:64/native-unsigned,
           Data:32/native-unsigned,
           Usage:32/native-unsigned>>);
bufferData(Target, Size, Data, Usage) ->
    send_bin(Data),
    cast(5435,
         <<Target:32/native-unsigned,
           0:32,
           Size:64/native-unsigned,
           Usage:32/native-unsigned>>).

-spec bufferSubData(Target, Offset, Size, Data) -> ok
                       when
                           is_subtype(Target, enum()),
                           is_subtype(Offset, integer()),
                           is_subtype(Size, integer()),
                           is_subtype(Data, offset() | mem()).

bufferSubData(Target, Offset, Size, Data) when is_integer(Data) ->
    cast(5436,
         <<Target:32/native-unsigned,
           0:32,
           Offset:64/native-unsigned,
           Size:64/native-unsigned,
           Data:32/native-unsigned>>);
bufferSubData(Target, Offset, Size, Data) ->
    send_bin(Data),
    cast(5437,
         <<Target:32/native-unsigned,
           0:32,
           Offset:64/native-unsigned,
           Size:64/native-unsigned>>).

-spec getBufferSubData(Target, Offset, Size, Data) -> ok
                          when
                              is_subtype(Target, enum()),
                              is_subtype(Offset, integer()),
                              is_subtype(Size, integer()),
                              is_subtype(Data, mem()).

getBufferSubData(Target, Offset, Size, Data) ->
    send_bin(Data),
    call(5438,
         <<Target:32/native-unsigned,
           0:32,
           Offset:64/native-unsigned,
           Size:64/native-unsigned>>).

-spec getBufferParameteriv(Target, Pname) -> integer()
                              when
                                  is_subtype(Target, enum()),
                                  is_subtype(Pname, enum()).

getBufferParameteriv(Target, Pname) ->
    call(5439, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec blendEquationSeparate(ModeRGB, ModeAlpha) -> ok
                               when
                                   is_subtype(ModeRGB, enum()),
                                   is_subtype(ModeAlpha, enum()).

blendEquationSeparate(ModeRGB, ModeAlpha) ->
    cast(5440,
         <<ModeRGB:32/native-unsigned,ModeAlpha:32/native-unsigned>>).

-spec drawBuffers(Bufs) -> ok when is_subtype(Bufs, [enum()]).

drawBuffers(Bufs) ->
    cast(5441,
         <<(length(Bufs)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Bufs
           >>/binary,
           0:((1 + length(Bufs)) rem 2 * 32)>>).

-spec stencilOpSeparate(Face, Sfail, Dpfail, Dppass) -> ok
                           when
                               is_subtype(Face, enum()),
                               is_subtype(Sfail, enum()),
                               is_subtype(Dpfail, enum()),
                               is_subtype(Dppass, enum()).

stencilOpSeparate(Face, Sfail, Dpfail, Dppass) ->
    cast(5442,
         <<Face:32/native-unsigned,
           Sfail:32/native-unsigned,
           Dpfail:32/native-unsigned,
           Dppass:32/native-unsigned>>).

-spec stencilFuncSeparate(Face, Func, Ref, Mask) -> ok
                             when
                                 is_subtype(Face, enum()),
                                 is_subtype(Func, enum()),
                                 is_subtype(Ref, integer()),
                                 is_subtype(Mask, integer()).

stencilFuncSeparate(Face, Func, Ref, Mask) ->
    cast(5443,
         <<Face:32/native-unsigned,
           Func:32/native-unsigned,
           Ref:32/native-signed,
           Mask:32/native-unsigned>>).

-spec stencilMaskSeparate(Face, Mask) -> ok
                             when
                                 is_subtype(Face, enum()),
                                 is_subtype(Mask, integer()).

stencilMaskSeparate(Face, Mask) ->
    cast(5444, <<Face:32/native-unsigned,Mask:32/native-unsigned>>).

-spec attachShader(Program, Shader) -> ok
                      when
                          is_subtype(Program, integer()),
                          is_subtype(Shader, integer()).

attachShader(Program, Shader) ->
    cast(5445, <<Program:32/native-unsigned,Shader:32/native-unsigned>>).

-spec bindAttribLocation(Program, Index, Name) -> ok
                            when
                                is_subtype(Program, integer()),
                                is_subtype(Index, integer()),
                                is_subtype(Name, string()).

bindAttribLocation(Program, Index, Name) ->
    cast(5446,
         <<Program:32/native-unsigned,
           Index:32/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 1) rem 8) rem 8)>>).

-spec compileShader(Shader) -> ok when is_subtype(Shader, integer()).

compileShader(Shader) ->
    cast(5447, <<Shader:32/native-unsigned>>).

-spec createProgram() -> integer().

createProgram() ->
    call(5448, <<>>).

-spec createShader(Type) -> integer() when is_subtype(Type, enum()).

createShader(Type) ->
    call(5449, <<Type:32/native-unsigned>>).

-spec deleteProgram(Program) -> ok when is_subtype(Program, integer()).

deleteProgram(Program) ->
    cast(5450, <<Program:32/native-unsigned>>).

-spec deleteShader(Shader) -> ok when is_subtype(Shader, integer()).

deleteShader(Shader) ->
    cast(5451, <<Shader:32/native-unsigned>>).

-spec detachShader(Program, Shader) -> ok
                      when
                          is_subtype(Program, integer()),
                          is_subtype(Shader, integer()).

detachShader(Program, Shader) ->
    cast(5452, <<Program:32/native-unsigned,Shader:32/native-unsigned>>).

-spec disableVertexAttribArray(Index) -> ok
                                  when is_subtype(Index, integer()).

disableVertexAttribArray(Index) ->
    cast(5453, <<Index:32/native-unsigned>>).

-spec enableVertexAttribArray(Index) -> ok
                                 when is_subtype(Index, integer()).

enableVertexAttribArray(Index) ->
    cast(5454, <<Index:32/native-unsigned>>).

-spec getActiveAttrib(Program, Index, BufSize) ->
                         {Size :: integer(),
                          Type :: enum(),
                          Name :: string()}
                         when
                             is_subtype(Program, integer()),
                             is_subtype(Index, integer()),
                             is_subtype(BufSize, integer()).

getActiveAttrib(Program, Index, BufSize) ->
    call(5455,
         <<Program:32/native-unsigned,
           Index:32/native-unsigned,
           BufSize:32/native-signed>>).

-spec getActiveUniform(Program, Index, BufSize) ->
                          {Size :: integer(),
                           Type :: enum(),
                           Name :: string()}
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Index, integer()),
                              is_subtype(BufSize, integer()).

getActiveUniform(Program, Index, BufSize) ->
    call(5456,
         <<Program:32/native-unsigned,
           Index:32/native-unsigned,
           BufSize:32/native-signed>>).

-spec getAttachedShaders(Program, MaxCount) -> [integer()]
                            when
                                is_subtype(Program, integer()),
                                is_subtype(MaxCount, integer()).

getAttachedShaders(Program, MaxCount) ->
    call(5457, <<Program:32/native-unsigned,MaxCount:32/native-signed>>).

-spec getAttribLocation(Program, Name) -> integer()
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Name, string()).

getAttribLocation(Program, Name) ->
    call(5458,
         <<Program:32/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 5) rem 8) rem 8)>>).

-spec getProgramiv(Program, Pname) -> integer()
                      when
                          is_subtype(Program, integer()),
                          is_subtype(Pname, enum()).

getProgramiv(Program, Pname) ->
    call(5459, <<Program:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getProgramInfoLog(Program, BufSize) -> string()
                           when
                               is_subtype(Program, integer()),
                               is_subtype(BufSize, integer()).

getProgramInfoLog(Program, BufSize) ->
    call(5460, <<Program:32/native-unsigned,BufSize:32/native-signed>>).

-spec getShaderiv(Shader, Pname) -> integer()
                     when
                         is_subtype(Shader, integer()),
                         is_subtype(Pname, enum()).

getShaderiv(Shader, Pname) ->
    call(5461, <<Shader:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getShaderInfoLog(Shader, BufSize) -> string()
                          when
                              is_subtype(Shader, integer()),
                              is_subtype(BufSize, integer()).

getShaderInfoLog(Shader, BufSize) ->
    call(5462, <<Shader:32/native-unsigned,BufSize:32/native-signed>>).

-spec getShaderSource(Shader, BufSize) -> string()
                         when
                             is_subtype(Shader, integer()),
                             is_subtype(BufSize, integer()).

getShaderSource(Shader, BufSize) ->
    call(5463, <<Shader:32/native-unsigned,BufSize:32/native-signed>>).

-spec getUniformLocation(Program, Name) -> integer()
                            when
                                is_subtype(Program, integer()),
                                is_subtype(Name, string()).

getUniformLocation(Program, Name) ->
    call(5464,
         <<Program:32/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 5) rem 8) rem 8)>>).

-spec getUniformfv(Program, Location) -> matrix()
                      when
                          is_subtype(Program, integer()),
                          is_subtype(Location, integer()).

getUniformfv(Program, Location) ->
    call(5465, <<Program:32/native-unsigned,Location:32/native-signed>>).

-spec getUniformiv(Program, Location) ->
                      {integer(),
                       integer(),
                       integer(),
                       integer(),
                       integer(),
                       integer(),
                       integer(),
                       integer(),
                       integer(),
                       integer(),
                       integer(),
                       integer(),
                       integer(),
                       integer(),
                       integer(),
                       integer()}
                      when
                          is_subtype(Program, integer()),
                          is_subtype(Location, integer()).

getUniformiv(Program, Location) ->
    call(5466, <<Program:32/native-unsigned,Location:32/native-signed>>).

-spec getVertexAttribdv(Index, Pname) ->
                           {float(), float(), float(), float()}
                           when
                               is_subtype(Index, integer()),
                               is_subtype(Pname, enum()).

getVertexAttribdv(Index, Pname) ->
    call(5467, <<Index:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getVertexAttribfv(Index, Pname) ->
                           {float(), float(), float(), float()}
                           when
                               is_subtype(Index, integer()),
                               is_subtype(Pname, enum()).

getVertexAttribfv(Index, Pname) ->
    call(5468, <<Index:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getVertexAttribiv(Index, Pname) ->
                           {integer(), integer(), integer(), integer()}
                           when
                               is_subtype(Index, integer()),
                               is_subtype(Pname, enum()).

getVertexAttribiv(Index, Pname) ->
    call(5469, <<Index:32/native-unsigned,Pname:32/native-unsigned>>).

-spec isProgram(Program) -> 0 | 1 when is_subtype(Program, integer()).

isProgram(Program) ->
    call(5470, <<Program:32/native-unsigned>>).

-spec isShader(Shader) -> 0 | 1 when is_subtype(Shader, integer()).

isShader(Shader) ->
    call(5471, <<Shader:32/native-unsigned>>).

-spec linkProgram(Program) -> ok when is_subtype(Program, integer()).

linkProgram(Program) ->
    cast(5472, <<Program:32/native-unsigned>>).

-spec shaderSource(Shader, String) -> ok
                      when
                          is_subtype(Shader, integer()),
                          is_subtype(String, [string()]).

shaderSource(Shader, String) ->
    StringTemp =
        list_to_binary([ 
                        [Str,0] ||
                            Str <- String
                       ]),
    cast(5473,
         <<Shader:32/native-unsigned,
           (length(String)):32/native-unsigned,
           (size(StringTemp)):32/native-unsigned,
           StringTemp/binary,
           0:((8 - (size(StringTemp) + 0) rem 8) rem 8)>>).

-spec useProgram(Program) -> ok when is_subtype(Program, integer()).

useProgram(Program) ->
    cast(5474, <<Program:32/native-unsigned>>).

-spec uniform1f(Location, V0) -> ok
                   when
                       is_subtype(Location, integer()),
                       is_subtype(V0, float()).

uniform1f(Location, V0) ->
    cast(5475, <<Location:32/native-signed,V0:32/native-float>>).

-spec uniform2f(Location, V0, V1) -> ok
                   when
                       is_subtype(Location, integer()),
                       is_subtype(V0, float()),
                       is_subtype(V1, float()).

uniform2f(Location, V0, V1) ->
    cast(5476,
         <<Location:32/native-signed,
           V0:32/native-float,
           V1:32/native-float>>).

-spec uniform3f(Location, V0, V1, V2) -> ok
                   when
                       is_subtype(Location, integer()),
                       is_subtype(V0, float()),
                       is_subtype(V1, float()),
                       is_subtype(V2, float()).

uniform3f(Location, V0, V1, V2) ->
    cast(5477,
         <<Location:32/native-signed,
           V0:32/native-float,
           V1:32/native-float,
           V2:32/native-float>>).

-spec uniform4f(Location, V0, V1, V2, V3) -> ok
                   when
                       is_subtype(Location, integer()),
                       is_subtype(V0, float()),
                       is_subtype(V1, float()),
                       is_subtype(V2, float()),
                       is_subtype(V3, float()).

uniform4f(Location, V0, V1, V2, V3) ->
    cast(5478,
         <<Location:32/native-signed,
           V0:32/native-float,
           V1:32/native-float,
           V2:32/native-float,
           V3:32/native-float>>).

-spec uniform1i(Location, V0) -> ok
                   when
                       is_subtype(Location, integer()),
                       is_subtype(V0, integer()).

uniform1i(Location, V0) ->
    cast(5479, <<Location:32/native-signed,V0:32/native-signed>>).

-spec uniform2i(Location, V0, V1) -> ok
                   when
                       is_subtype(Location, integer()),
                       is_subtype(V0, integer()),
                       is_subtype(V1, integer()).

uniform2i(Location, V0, V1) ->
    cast(5480,
         <<Location:32/native-signed,
           V0:32/native-signed,
           V1:32/native-signed>>).

-spec uniform3i(Location, V0, V1, V2) -> ok
                   when
                       is_subtype(Location, integer()),
                       is_subtype(V0, integer()),
                       is_subtype(V1, integer()),
                       is_subtype(V2, integer()).

uniform3i(Location, V0, V1, V2) ->
    cast(5481,
         <<Location:32/native-signed,
           V0:32/native-signed,
           V1:32/native-signed,
           V2:32/native-signed>>).

-spec uniform4i(Location, V0, V1, V2, V3) -> ok
                   when
                       is_subtype(Location, integer()),
                       is_subtype(V0, integer()),
                       is_subtype(V1, integer()),
                       is_subtype(V2, integer()),
                       is_subtype(V3, integer()).

uniform4i(Location, V0, V1, V2, V3) ->
    cast(5482,
         <<Location:32/native-signed,
           V0:32/native-signed,
           V1:32/native-signed,
           V2:32/native-signed,
           V3:32/native-signed>>).

-spec uniform1fv(Location, Value) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(Value, [float()]).

uniform1fv(Location, Value) ->
    cast(5483,
         <<Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- Value
           >>/binary,
           0:(length(Value) rem 2 * 32)>>).

-spec uniform2fv(Location, Value) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(Value, [{float(), float()}]).

uniform2fv(Location, Value) ->
    cast(5484,
         <<Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,V2:32/native-float>> ||
                 {V1,V2} <- Value
           >>/binary>>).

-spec uniform3fv(Location, Value) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(Value, [{float(), float(), float()}]).

uniform3fv(Location, Value) ->
    cast(5485,
         <<Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,V2:32/native-float,V3:32/native-float>> ||
                 {V1,V2,V3} <- Value
           >>/binary>>).

-spec uniform4fv(Location, Value) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(Value,
                                   [{float(), float(), float(), float()}]).

uniform4fv(Location, Value) ->
    cast(5486,
         <<Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float>> ||
                 {V1,V2,V3,V4} <- Value
           >>/binary>>).

-spec uniform1iv(Location, Value) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(Value, [integer()]).

uniform1iv(Location, Value) ->
    cast(5487,
         <<Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- Value
           >>/binary,
           0:(length(Value) rem 2 * 32)>>).

-spec uniform2iv(Location, Value) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(Value, [{integer(), integer()}]).

uniform2iv(Location, Value) ->
    cast(5488,
         <<Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-signed,V2:32/native-signed>> ||
                 {V1,V2} <- Value
           >>/binary>>).

-spec uniform3iv(Location, Value) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(Value,
                                   [{integer(), integer(), integer()}]).

uniform3iv(Location, Value) ->
    cast(5489,
         <<Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-signed,
               V2:32/native-signed,
               V3:32/native-signed>> ||
                 {V1,V2,V3} <- Value
           >>/binary>>).

-spec uniform4iv(Location, Value) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(Value,
                                   [{integer(),
                                     integer(),
                                     integer(),
                                     integer()}]).

uniform4iv(Location, Value) ->
    cast(5490,
         <<Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-signed,
               V2:32/native-signed,
               V3:32/native-signed,
               V4:32/native-signed>> ||
                 {V1,V2,V3,V4} <- Value
           >>/binary>>).

-spec uniformMatrix2fv(Location, Transpose, Value) -> ok
                          when
                              is_subtype(Location, integer()),
                              is_subtype(Transpose, 0 | 1),
                              is_subtype(Value,
                                         [{float(),
                                           float(),
                                           float(),
                                           float()}]).

uniformMatrix2fv(Location, Transpose, Value) ->
    cast(5491,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float>> ||
                 {V1,V2,V3,V4} <- Value
           >>/binary>>).

-spec uniformMatrix3fv(Location, Transpose, Value) -> ok
                          when
                              is_subtype(Location, integer()),
                              is_subtype(Transpose, 0 | 1),
                              is_subtype(Value,
                                         [{float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float()}]).

uniformMatrix3fv(Location, Transpose, Value) ->
    cast(5492,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float,
               V7:32/native-float,
               V8:32/native-float,
               V9:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8,V9} <- Value
           >>/binary>>).

-spec uniformMatrix4fv(Location, Transpose, Value) -> ok
                          when
                              is_subtype(Location, integer()),
                              is_subtype(Transpose, 0 | 1),
                              is_subtype(Value,
                                         [{float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float()}]).

uniformMatrix4fv(Location, Transpose, Value) ->
    cast(5493,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float,
               V7:32/native-float,
               V8:32/native-float,
               V9:32/native-float,
               V10:32/native-float,
               V11:32/native-float,
               V12:32/native-float,
               V13:32/native-float,
               V14:32/native-float,
               V15:32/native-float,
               V16:32/native-float>> ||
                 {V1,
                  V2,
                  V3,
                  V4,
                  V5,
                  V6,
                  V7,
                  V8,
                  V9,
                  V10,
                  V11,
                  V12,
                  V13,
                  V14,
                  V15,
                  V16} <-
                     Value
           >>/binary>>).

-spec validateProgram(Program) -> ok when is_subtype(Program, integer()).

validateProgram(Program) ->
    cast(5494, <<Program:32/native-unsigned>>).

-spec vertexAttrib1d(Index, X) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(X, float()).

vertexAttrib1d(Index, X) ->
    cast(5495, <<Index:32/native-unsigned,0:32,X:64/native-float>>).

-spec vertexAttrib1dv(Index :: integer(), V) -> ok
                         when is_subtype(V, {X :: float()}).

vertexAttrib1dv(Index, {X}) ->
    vertexAttrib1d(Index, X).

-spec vertexAttrib1f(Index, X) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(X, float()).

vertexAttrib1f(Index, X) ->
    cast(5496, <<Index:32/native-unsigned,X:32/native-float>>).

-spec vertexAttrib1fv(Index :: integer(), V) -> ok
                         when is_subtype(V, {X :: float()}).

vertexAttrib1fv(Index, {X}) ->
    vertexAttrib1f(Index, X).

-spec vertexAttrib1s(Index, X) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(X, integer()).

vertexAttrib1s(Index, X) ->
    cast(5497, <<Index:32/native-unsigned,X:16/native-signed>>).

-spec vertexAttrib1sv(Index :: integer(), V) -> ok
                         when is_subtype(V, {X :: integer()}).

vertexAttrib1sv(Index, {X}) ->
    vertexAttrib1s(Index, X).

-spec vertexAttrib2d(Index, X, Y) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(X, float()),
                            is_subtype(Y, float()).

vertexAttrib2d(Index, X, Y) ->
    cast(5498,
         <<Index:32/native-unsigned,
           0:32,
           X:64/native-float,
           Y:64/native-float>>).

-spec vertexAttrib2dv(Index :: integer(), V) -> ok
                         when
                             is_subtype(V, {X :: float(), Y :: float()}).

vertexAttrib2dv(Index, {X,Y}) ->
    vertexAttrib2d(Index, X, Y).

-spec vertexAttrib2f(Index, X, Y) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(X, float()),
                            is_subtype(Y, float()).

vertexAttrib2f(Index, X, Y) ->
    cast(5499,
         <<Index:32/native-unsigned,X:32/native-float,Y:32/native-float>>).

-spec vertexAttrib2fv(Index :: integer(), V) -> ok
                         when
                             is_subtype(V, {X :: float(), Y :: float()}).

vertexAttrib2fv(Index, {X,Y}) ->
    vertexAttrib2f(Index, X, Y).

-spec vertexAttrib2s(Index, X, Y) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(X, integer()),
                            is_subtype(Y, integer()).

vertexAttrib2s(Index, X, Y) ->
    cast(5500,
         <<Index:32/native-unsigned,
           X:16/native-signed,
           Y:16/native-signed>>).

-spec vertexAttrib2sv(Index :: integer(), V) -> ok
                         when
                             is_subtype(V,
                                        {X :: integer(), Y :: integer()}).

vertexAttrib2sv(Index, {X,Y}) ->
    vertexAttrib2s(Index, X, Y).

-spec vertexAttrib3d(Index, X, Y, Z) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(X, float()),
                            is_subtype(Y, float()),
                            is_subtype(Z, float()).

vertexAttrib3d(Index, X, Y, Z) ->
    cast(5501,
         <<Index:32/native-unsigned,
           0:32,
           X:64/native-float,
           Y:64/native-float,
           Z:64/native-float>>).

-spec vertexAttrib3dv(Index :: integer(), V) -> ok
                         when
                             is_subtype(V,
                                        {X :: float(),
                                         Y :: float(),
                                         Z :: float()}).

vertexAttrib3dv(Index, {X,Y,Z}) ->
    vertexAttrib3d(Index, X, Y, Z).

-spec vertexAttrib3f(Index, X, Y, Z) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(X, float()),
                            is_subtype(Y, float()),
                            is_subtype(Z, float()).

vertexAttrib3f(Index, X, Y, Z) ->
    cast(5502,
         <<Index:32/native-unsigned,
           X:32/native-float,
           Y:32/native-float,
           Z:32/native-float>>).

-spec vertexAttrib3fv(Index :: integer(), V) -> ok
                         when
                             is_subtype(V,
                                        {X :: float(),
                                         Y :: float(),
                                         Z :: float()}).

vertexAttrib3fv(Index, {X,Y,Z}) ->
    vertexAttrib3f(Index, X, Y, Z).

-spec vertexAttrib3s(Index, X, Y, Z) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(X, integer()),
                            is_subtype(Y, integer()),
                            is_subtype(Z, integer()).

vertexAttrib3s(Index, X, Y, Z) ->
    cast(5503,
         <<Index:32/native-unsigned,
           X:16/native-signed,
           Y:16/native-signed,
           Z:16/native-signed>>).

-spec vertexAttrib3sv(Index :: integer(), V) -> ok
                         when
                             is_subtype(V,
                                        {X :: integer(),
                                         Y :: integer(),
                                         Z :: integer()}).

vertexAttrib3sv(Index, {X,Y,Z}) ->
    vertexAttrib3s(Index, X, Y, Z).

-spec vertexAttrib4Nbv(Index, V) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(V,
                                         {integer(),
                                          integer(),
                                          integer(),
                                          integer()}).

vertexAttrib4Nbv(Index, {V1,V2,V3,V4}) ->
    cast(5504,
         <<Index:32/native-unsigned,
           V1:8/native-signed,
           V2:8/native-signed,
           V3:8/native-signed,
           V4:8/native-signed>>).

-spec vertexAttrib4Niv(Index, V) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(V,
                                         {integer(),
                                          integer(),
                                          integer(),
                                          integer()}).

vertexAttrib4Niv(Index, {V1,V2,V3,V4}) ->
    cast(5505,
         <<Index:32/native-unsigned,
           V1:32/native-signed,
           V2:32/native-signed,
           V3:32/native-signed,
           V4:32/native-signed>>).

-spec vertexAttrib4Nsv(Index, V) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(V,
                                         {integer(),
                                          integer(),
                                          integer(),
                                          integer()}).

vertexAttrib4Nsv(Index, {V1,V2,V3,V4}) ->
    cast(5506,
         <<Index:32/native-unsigned,
           V1:16/native-signed,
           V2:16/native-signed,
           V3:16/native-signed,
           V4:16/native-signed>>).

-spec vertexAttrib4Nub(Index, X, Y, Z, W) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(X, integer()),
                              is_subtype(Y, integer()),
                              is_subtype(Z, integer()),
                              is_subtype(W, integer()).

vertexAttrib4Nub(Index, X, Y, Z, W) ->
    cast(5507,
         <<Index:32/native-unsigned,
           X:8/native-unsigned,
           Y:8/native-unsigned,
           Z:8/native-unsigned,
           W:8/native-unsigned>>).

-spec vertexAttrib4Nubv(Index :: integer(), V) -> ok
                           when
                               is_subtype(V,
                                          {X :: integer(),
                                           Y :: integer(),
                                           Z :: integer(),
                                           W :: integer()}).

vertexAttrib4Nubv(Index, {X,Y,Z,W}) ->
    vertexAttrib4Nub(Index, X, Y, Z, W).

-spec vertexAttrib4Nuiv(Index, V) -> ok
                           when
                               is_subtype(Index, integer()),
                               is_subtype(V,
                                          {integer(),
                                           integer(),
                                           integer(),
                                           integer()}).

vertexAttrib4Nuiv(Index, {V1,V2,V3,V4}) ->
    cast(5508,
         <<Index:32/native-unsigned,
           V1:32/native-unsigned,
           V2:32/native-unsigned,
           V3:32/native-unsigned,
           V4:32/native-unsigned>>).

-spec vertexAttrib4Nusv(Index, V) -> ok
                           when
                               is_subtype(Index, integer()),
                               is_subtype(V,
                                          {integer(),
                                           integer(),
                                           integer(),
                                           integer()}).

vertexAttrib4Nusv(Index, {V1,V2,V3,V4}) ->
    cast(5509,
         <<Index:32/native-unsigned,
           V1:16/native-unsigned,
           V2:16/native-unsigned,
           V3:16/native-unsigned,
           V4:16/native-unsigned>>).

-spec vertexAttrib4bv(Index, V) -> ok
                         when
                             is_subtype(Index, integer()),
                             is_subtype(V,
                                        {integer(),
                                         integer(),
                                         integer(),
                                         integer()}).

vertexAttrib4bv(Index, {V1,V2,V3,V4}) ->
    cast(5510,
         <<Index:32/native-unsigned,
           V1:8/native-signed,
           V2:8/native-signed,
           V3:8/native-signed,
           V4:8/native-signed>>).

-spec vertexAttrib4d(Index, X, Y, Z, W) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(X, float()),
                            is_subtype(Y, float()),
                            is_subtype(Z, float()),
                            is_subtype(W, float()).

vertexAttrib4d(Index, X, Y, Z, W) ->
    cast(5511,
         <<Index:32/native-unsigned,
           0:32,
           X:64/native-float,
           Y:64/native-float,
           Z:64/native-float,
           W:64/native-float>>).

-spec vertexAttrib4dv(Index :: integer(), V) -> ok
                         when
                             is_subtype(V,
                                        {X :: float(),
                                         Y :: float(),
                                         Z :: float(),
                                         W :: float()}).

vertexAttrib4dv(Index, {X,Y,Z,W}) ->
    vertexAttrib4d(Index, X, Y, Z, W).

-spec vertexAttrib4f(Index, X, Y, Z, W) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(X, float()),
                            is_subtype(Y, float()),
                            is_subtype(Z, float()),
                            is_subtype(W, float()).

vertexAttrib4f(Index, X, Y, Z, W) ->
    cast(5512,
         <<Index:32/native-unsigned,
           X:32/native-float,
           Y:32/native-float,
           Z:32/native-float,
           W:32/native-float>>).

-spec vertexAttrib4fv(Index :: integer(), V) -> ok
                         when
                             is_subtype(V,
                                        {X :: float(),
                                         Y :: float(),
                                         Z :: float(),
                                         W :: float()}).

vertexAttrib4fv(Index, {X,Y,Z,W}) ->
    vertexAttrib4f(Index, X, Y, Z, W).

-spec vertexAttrib4iv(Index, V) -> ok
                         when
                             is_subtype(Index, integer()),
                             is_subtype(V,
                                        {integer(),
                                         integer(),
                                         integer(),
                                         integer()}).

vertexAttrib4iv(Index, {V1,V2,V3,V4}) ->
    cast(5513,
         <<Index:32/native-unsigned,
           V1:32/native-signed,
           V2:32/native-signed,
           V3:32/native-signed,
           V4:32/native-signed>>).

-spec vertexAttrib4s(Index, X, Y, Z, W) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(X, integer()),
                            is_subtype(Y, integer()),
                            is_subtype(Z, integer()),
                            is_subtype(W, integer()).

vertexAttrib4s(Index, X, Y, Z, W) ->
    cast(5514,
         <<Index:32/native-unsigned,
           X:16/native-signed,
           Y:16/native-signed,
           Z:16/native-signed,
           W:16/native-signed>>).

-spec vertexAttrib4sv(Index :: integer(), V) -> ok
                         when
                             is_subtype(V,
                                        {X :: integer(),
                                         Y :: integer(),
                                         Z :: integer(),
                                         W :: integer()}).

vertexAttrib4sv(Index, {X,Y,Z,W}) ->
    vertexAttrib4s(Index, X, Y, Z, W).

-spec vertexAttrib4ubv(Index, V) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(V,
                                         {integer(),
                                          integer(),
                                          integer(),
                                          integer()}).

vertexAttrib4ubv(Index, {V1,V2,V3,V4}) ->
    cast(5515,
         <<Index:32/native-unsigned,
           V1:8/native-unsigned,
           V2:8/native-unsigned,
           V3:8/native-unsigned,
           V4:8/native-unsigned>>).

-spec vertexAttrib4uiv(Index, V) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(V,
                                         {integer(),
                                          integer(),
                                          integer(),
                                          integer()}).

vertexAttrib4uiv(Index, {V1,V2,V3,V4}) ->
    cast(5516,
         <<Index:32/native-unsigned,
           V1:32/native-unsigned,
           V2:32/native-unsigned,
           V3:32/native-unsigned,
           V4:32/native-unsigned>>).

-spec vertexAttrib4usv(Index, V) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(V,
                                         {integer(),
                                          integer(),
                                          integer(),
                                          integer()}).

vertexAttrib4usv(Index, {V1,V2,V3,V4}) ->
    cast(5517,
         <<Index:32/native-unsigned,
           V1:16/native-unsigned,
           V2:16/native-unsigned,
           V3:16/native-unsigned,
           V4:16/native-unsigned>>).

-spec vertexAttribPointer(Index,
                          Size,
                          Type,
                          Normalized,
                          Stride,
                          Pointer) ->
                             ok
                             when
                                 is_subtype(Index, integer()),
                                 is_subtype(Size, integer()),
                                 is_subtype(Type, enum()),
                                 is_subtype(Normalized, 0 | 1),
                                 is_subtype(Stride, integer()),
                                 is_subtype(Pointer, offset() | mem()).

vertexAttribPointer(Index, Size, Type, Normalized, Stride, Pointer)
    when is_integer(Pointer) ->
    cast(5518,
         <<Index:32/native-unsigned,
           Size:32/native-signed,
           Type:32/native-unsigned,
           Normalized:8/native-unsigned,
           0:24,
           Stride:32/native-signed,
           Pointer:32/native-unsigned>>);
vertexAttribPointer(Index, Size, Type, Normalized, Stride, Pointer) ->
    send_bin(Pointer),
    cast(5519,
         <<Index:32/native-unsigned,
           Size:32/native-signed,
           Type:32/native-unsigned,
           Normalized:8/native-unsigned,
           0:24,
           Stride:32/native-signed>>).

-spec uniformMatrix2x3fv(Location, Transpose, Value) -> ok
                            when
                                is_subtype(Location, integer()),
                                is_subtype(Transpose, 0 | 1),
                                is_subtype(Value,
                                           [{float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float()}]).

uniformMatrix2x3fv(Location, Transpose, Value) ->
    cast(5520,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6} <- Value
           >>/binary>>).

-spec uniformMatrix3x2fv(Location, Transpose, Value) -> ok
                            when
                                is_subtype(Location, integer()),
                                is_subtype(Transpose, 0 | 1),
                                is_subtype(Value,
                                           [{float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float()}]).

uniformMatrix3x2fv(Location, Transpose, Value) ->
    cast(5521,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6} <- Value
           >>/binary>>).

-spec uniformMatrix2x4fv(Location, Transpose, Value) -> ok
                            when
                                is_subtype(Location, integer()),
                                is_subtype(Transpose, 0 | 1),
                                is_subtype(Value,
                                           [{float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float()}]).

uniformMatrix2x4fv(Location, Transpose, Value) ->
    cast(5522,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float,
               V7:32/native-float,
               V8:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8} <- Value
           >>/binary>>).

-spec uniformMatrix4x2fv(Location, Transpose, Value) -> ok
                            when
                                is_subtype(Location, integer()),
                                is_subtype(Transpose, 0 | 1),
                                is_subtype(Value,
                                           [{float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float()}]).

uniformMatrix4x2fv(Location, Transpose, Value) ->
    cast(5523,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float,
               V7:32/native-float,
               V8:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8} <- Value
           >>/binary>>).

-spec uniformMatrix3x4fv(Location, Transpose, Value) -> ok
                            when
                                is_subtype(Location, integer()),
                                is_subtype(Transpose, 0 | 1),
                                is_subtype(Value,
                                           [{float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float()}]).

uniformMatrix3x4fv(Location, Transpose, Value) ->
    cast(5524,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float,
               V7:32/native-float,
               V8:32/native-float,
               V9:32/native-float,
               V10:32/native-float,
               V11:32/native-float,
               V12:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12} <- Value
           >>/binary>>).

-spec uniformMatrix4x3fv(Location, Transpose, Value) -> ok
                            when
                                is_subtype(Location, integer()),
                                is_subtype(Transpose, 0 | 1),
                                is_subtype(Value,
                                           [{float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float()}]).

uniformMatrix4x3fv(Location, Transpose, Value) ->
    cast(5525,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float,
               V7:32/native-float,
               V8:32/native-float,
               V9:32/native-float,
               V10:32/native-float,
               V11:32/native-float,
               V12:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12} <- Value
           >>/binary>>).

-spec colorMaski(Index, R, G, B, A) -> ok
                    when
                        is_subtype(Index, integer()),
                        is_subtype(R, 0 | 1),
                        is_subtype(G, 0 | 1),
                        is_subtype(B, 0 | 1),
                        is_subtype(A, 0 | 1).

colorMaski(Index, R, G, B, A) ->
    cast(5526,
         <<Index:32/native-unsigned,
           R:8/native-unsigned,
           G:8/native-unsigned,
           B:8/native-unsigned,
           A:8/native-unsigned>>).

-spec getBooleani_v(Target, Index) -> [0 | 1]
                       when
                           is_subtype(Target, enum()),
                           is_subtype(Index, integer()).

getBooleani_v(Target, Index) ->
    call(5527, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec getIntegeri_v(Target, Index) -> [integer()]
                       when
                           is_subtype(Target, enum()),
                           is_subtype(Index, integer()).

getIntegeri_v(Target, Index) ->
    call(5528, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec enablei(Target, Index) -> ok
                 when
                     is_subtype(Target, enum()),
                     is_subtype(Index, integer()).

enablei(Target, Index) ->
    cast(5529, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec disablei(Target, Index) -> ok
                  when
                      is_subtype(Target, enum()),
                      is_subtype(Index, integer()).

disablei(Target, Index) ->
    cast(5530, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec isEnabledi(Target, Index) -> 0 | 1
                    when
                        is_subtype(Target, enum()),
                        is_subtype(Index, integer()).

isEnabledi(Target, Index) ->
    call(5531, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec beginTransformFeedback(PrimitiveMode) -> ok
                                when is_subtype(PrimitiveMode, enum()).

beginTransformFeedback(PrimitiveMode) ->
    cast(5532, <<PrimitiveMode:32/native-unsigned>>).

-spec endTransformFeedback() -> ok.

endTransformFeedback() ->
    cast(5533, <<>>).

-spec bindBufferRange(Target, Index, Buffer, Offset, Size) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(Index, integer()),
                             is_subtype(Buffer, integer()),
                             is_subtype(Offset, integer()),
                             is_subtype(Size, integer()).

bindBufferRange(Target, Index, Buffer, Offset, Size) ->
    cast(5534,
         <<Target:32/native-unsigned,
           Index:32/native-unsigned,
           Buffer:32/native-unsigned,
           0:32,
           Offset:64/native-unsigned,
           Size:64/native-unsigned>>).

-spec bindBufferBase(Target, Index, Buffer) -> ok
                        when
                            is_subtype(Target, enum()),
                            is_subtype(Index, integer()),
                            is_subtype(Buffer, integer()).

bindBufferBase(Target, Index, Buffer) ->
    cast(5535,
         <<Target:32/native-unsigned,
           Index:32/native-unsigned,
           Buffer:32/native-unsigned>>).

-spec transformFeedbackVaryings(Program, Varyings, BufferMode) -> ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Varyings, [string()]),
                                       is_subtype(BufferMode, enum()).

transformFeedbackVaryings(Program, Varyings, BufferMode) ->
    VaryingsTemp =
        list_to_binary([ 
                        [Str,0] ||
                            Str <- Varyings
                       ]),
    cast(5536,
         <<Program:32/native-unsigned,
           (length(Varyings)):32/native-unsigned,
           (size(VaryingsTemp)):32/native-unsigned,
           VaryingsTemp/binary,
           0:((8 - (size(VaryingsTemp) + 0) rem 8) rem 8),
           BufferMode:32/native-unsigned>>).

-spec getTransformFeedbackVarying(Program, Index, BufSize) ->
                                     {Size :: integer(),
                                      Type :: enum(),
                                      Name :: string()}
                                     when
                                         is_subtype(Program, integer()),
                                         is_subtype(Index, integer()),
                                         is_subtype(BufSize, integer()).

getTransformFeedbackVarying(Program, Index, BufSize) ->
    call(5537,
         <<Program:32/native-unsigned,
           Index:32/native-unsigned,
           BufSize:32/native-signed>>).

-spec clampColor(Target, Clamp) -> ok
                    when
                        is_subtype(Target, enum()),
                        is_subtype(Clamp, enum()).

clampColor(Target, Clamp) ->
    cast(5538, <<Target:32/native-unsigned,Clamp:32/native-unsigned>>).

-spec beginConditionalRender(Id, Mode) -> ok
                                when
                                    is_subtype(Id, integer()),
                                    is_subtype(Mode, enum()).

beginConditionalRender(Id, Mode) ->
    cast(5539, <<Id:32/native-unsigned,Mode:32/native-unsigned>>).

-spec endConditionalRender() -> ok.

endConditionalRender() ->
    cast(5540, <<>>).

-spec vertexAttribIPointer(Index, Size, Type, Stride, Pointer) -> ok
                              when
                                  is_subtype(Index, integer()),
                                  is_subtype(Size, integer()),
                                  is_subtype(Type, enum()),
                                  is_subtype(Stride, integer()),
                                  is_subtype(Pointer, offset() | mem()).

vertexAttribIPointer(Index, Size, Type, Stride, Pointer)
    when is_integer(Pointer) ->
    cast(5541,
         <<Index:32/native-unsigned,
           Size:32/native-signed,
           Type:32/native-unsigned,
           Stride:32/native-signed,
           Pointer:32/native-unsigned>>);
vertexAttribIPointer(Index, Size, Type, Stride, Pointer) ->
    send_bin(Pointer),
    cast(5542,
         <<Index:32/native-unsigned,
           Size:32/native-signed,
           Type:32/native-unsigned,
           Stride:32/native-signed>>).

-spec getVertexAttribIiv(Index, Pname) ->
                            {integer(), integer(), integer(), integer()}
                            when
                                is_subtype(Index, integer()),
                                is_subtype(Pname, enum()).

getVertexAttribIiv(Index, Pname) ->
    call(5543, <<Index:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getVertexAttribIuiv(Index, Pname) ->
                             {integer(),
                              integer(),
                              integer(),
                              integer()}
                             when
                                 is_subtype(Index, integer()),
                                 is_subtype(Pname, enum()).

getVertexAttribIuiv(Index, Pname) ->
    call(5544, <<Index:32/native-unsigned,Pname:32/native-unsigned>>).

-spec vertexAttribI1i(Index, X) -> ok
                         when
                             is_subtype(Index, integer()),
                             is_subtype(X, integer()).

vertexAttribI1i(Index, X) ->
    cast(5545, <<Index:32/native-unsigned,X:32/native-signed>>).

-spec vertexAttribI2i(Index, X, Y) -> ok
                         when
                             is_subtype(Index, integer()),
                             is_subtype(X, integer()),
                             is_subtype(Y, integer()).

vertexAttribI2i(Index, X, Y) ->
    cast(5546,
         <<Index:32/native-unsigned,
           X:32/native-signed,
           Y:32/native-signed>>).

-spec vertexAttribI3i(Index, X, Y, Z) -> ok
                         when
                             is_subtype(Index, integer()),
                             is_subtype(X, integer()),
                             is_subtype(Y, integer()),
                             is_subtype(Z, integer()).

vertexAttribI3i(Index, X, Y, Z) ->
    cast(5547,
         <<Index:32/native-unsigned,
           X:32/native-signed,
           Y:32/native-signed,
           Z:32/native-signed>>).

-spec vertexAttribI4i(Index, X, Y, Z, W) -> ok
                         when
                             is_subtype(Index, integer()),
                             is_subtype(X, integer()),
                             is_subtype(Y, integer()),
                             is_subtype(Z, integer()),
                             is_subtype(W, integer()).

vertexAttribI4i(Index, X, Y, Z, W) ->
    cast(5548,
         <<Index:32/native-unsigned,
           X:32/native-signed,
           Y:32/native-signed,
           Z:32/native-signed,
           W:32/native-signed>>).

-spec vertexAttribI1ui(Index, X) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(X, integer()).

vertexAttribI1ui(Index, X) ->
    cast(5549, <<Index:32/native-unsigned,X:32/native-unsigned>>).

-spec vertexAttribI2ui(Index, X, Y) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(X, integer()),
                              is_subtype(Y, integer()).

vertexAttribI2ui(Index, X, Y) ->
    cast(5550,
         <<Index:32/native-unsigned,
           X:32/native-unsigned,
           Y:32/native-unsigned>>).

-spec vertexAttribI3ui(Index, X, Y, Z) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(X, integer()),
                              is_subtype(Y, integer()),
                              is_subtype(Z, integer()).

vertexAttribI3ui(Index, X, Y, Z) ->
    cast(5551,
         <<Index:32/native-unsigned,
           X:32/native-unsigned,
           Y:32/native-unsigned,
           Z:32/native-unsigned>>).

-spec vertexAttribI4ui(Index, X, Y, Z, W) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(X, integer()),
                              is_subtype(Y, integer()),
                              is_subtype(Z, integer()),
                              is_subtype(W, integer()).

vertexAttribI4ui(Index, X, Y, Z, W) ->
    cast(5552,
         <<Index:32/native-unsigned,
           X:32/native-unsigned,
           Y:32/native-unsigned,
           Z:32/native-unsigned,
           W:32/native-unsigned>>).

-spec vertexAttribI1iv(Index :: integer(), V) -> ok
                          when is_subtype(V, {X :: integer()}).

vertexAttribI1iv(Index, {X}) ->
    vertexAttribI1i(Index, X).

-spec vertexAttribI2iv(Index :: integer(), V) -> ok
                          when
                              is_subtype(V,
                                         {X :: integer(),
                                          Y :: integer()}).

vertexAttribI2iv(Index, {X,Y}) ->
    vertexAttribI2i(Index, X, Y).

-spec vertexAttribI3iv(Index :: integer(), V) -> ok
                          when
                              is_subtype(V,
                                         {X :: integer(),
                                          Y :: integer(),
                                          Z :: integer()}).

vertexAttribI3iv(Index, {X,Y,Z}) ->
    vertexAttribI3i(Index, X, Y, Z).

-spec vertexAttribI4iv(Index :: integer(), V) -> ok
                          when
                              is_subtype(V,
                                         {X :: integer(),
                                          Y :: integer(),
                                          Z :: integer(),
                                          W :: integer()}).

vertexAttribI4iv(Index, {X,Y,Z,W}) ->
    vertexAttribI4i(Index, X, Y, Z, W).

-spec vertexAttribI1uiv(Index :: integer(), V) -> ok
                           when is_subtype(V, {X :: integer()}).

vertexAttribI1uiv(Index, {X}) ->
    vertexAttribI1ui(Index, X).

-spec vertexAttribI2uiv(Index :: integer(), V) -> ok
                           when
                               is_subtype(V,
                                          {X :: integer(),
                                           Y :: integer()}).

vertexAttribI2uiv(Index, {X,Y}) ->
    vertexAttribI2ui(Index, X, Y).

-spec vertexAttribI3uiv(Index :: integer(), V) -> ok
                           when
                               is_subtype(V,
                                          {X :: integer(),
                                           Y :: integer(),
                                           Z :: integer()}).

vertexAttribI3uiv(Index, {X,Y,Z}) ->
    vertexAttribI3ui(Index, X, Y, Z).

-spec vertexAttribI4uiv(Index :: integer(), V) -> ok
                           when
                               is_subtype(V,
                                          {X :: integer(),
                                           Y :: integer(),
                                           Z :: integer(),
                                           W :: integer()}).

vertexAttribI4uiv(Index, {X,Y,Z,W}) ->
    vertexAttribI4ui(Index, X, Y, Z, W).

-spec vertexAttribI4bv(Index, V) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(V,
                                         {integer(),
                                          integer(),
                                          integer(),
                                          integer()}).

vertexAttribI4bv(Index, {V1,V2,V3,V4}) ->
    cast(5553,
         <<Index:32/native-unsigned,
           V1:8/native-signed,
           V2:8/native-signed,
           V3:8/native-signed,
           V4:8/native-signed>>).

-spec vertexAttribI4sv(Index, V) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(V,
                                         {integer(),
                                          integer(),
                                          integer(),
                                          integer()}).

vertexAttribI4sv(Index, {V1,V2,V3,V4}) ->
    cast(5554,
         <<Index:32/native-unsigned,
           V1:16/native-signed,
           V2:16/native-signed,
           V3:16/native-signed,
           V4:16/native-signed>>).

-spec vertexAttribI4ubv(Index, V) -> ok
                           when
                               is_subtype(Index, integer()),
                               is_subtype(V,
                                          {integer(),
                                           integer(),
                                           integer(),
                                           integer()}).

vertexAttribI4ubv(Index, {V1,V2,V3,V4}) ->
    cast(5555,
         <<Index:32/native-unsigned,
           V1:8/native-unsigned,
           V2:8/native-unsigned,
           V3:8/native-unsigned,
           V4:8/native-unsigned>>).

-spec vertexAttribI4usv(Index, V) -> ok
                           when
                               is_subtype(Index, integer()),
                               is_subtype(V,
                                          {integer(),
                                           integer(),
                                           integer(),
                                           integer()}).

vertexAttribI4usv(Index, {V1,V2,V3,V4}) ->
    cast(5556,
         <<Index:32/native-unsigned,
           V1:16/native-unsigned,
           V2:16/native-unsigned,
           V3:16/native-unsigned,
           V4:16/native-unsigned>>).

-spec getUniformuiv(Program, Location) ->
                       {integer(),
                        integer(),
                        integer(),
                        integer(),
                        integer(),
                        integer(),
                        integer(),
                        integer(),
                        integer(),
                        integer(),
                        integer(),
                        integer(),
                        integer(),
                        integer(),
                        integer(),
                        integer()}
                       when
                           is_subtype(Program, integer()),
                           is_subtype(Location, integer()).

getUniformuiv(Program, Location) ->
    call(5557, <<Program:32/native-unsigned,Location:32/native-signed>>).

-spec bindFragDataLocation(Program, Color, Name) -> ok
                              when
                                  is_subtype(Program, integer()),
                                  is_subtype(Color, integer()),
                                  is_subtype(Name, string()).

bindFragDataLocation(Program, Color, Name) ->
    cast(5558,
         <<Program:32/native-unsigned,
           Color:32/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 1) rem 8) rem 8)>>).

-spec getFragDataLocation(Program, Name) -> integer()
                             when
                                 is_subtype(Program, integer()),
                                 is_subtype(Name, string()).

getFragDataLocation(Program, Name) ->
    call(5559,
         <<Program:32/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 5) rem 8) rem 8)>>).

-spec uniform1ui(Location, V0) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(V0, integer()).

uniform1ui(Location, V0) ->
    cast(5560, <<Location:32/native-signed,V0:32/native-unsigned>>).

-spec uniform2ui(Location, V0, V1) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(V0, integer()),
                        is_subtype(V1, integer()).

uniform2ui(Location, V0, V1) ->
    cast(5561,
         <<Location:32/native-signed,
           V0:32/native-unsigned,
           V1:32/native-unsigned>>).

-spec uniform3ui(Location, V0, V1, V2) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(V0, integer()),
                        is_subtype(V1, integer()),
                        is_subtype(V2, integer()).

uniform3ui(Location, V0, V1, V2) ->
    cast(5562,
         <<Location:32/native-signed,
           V0:32/native-unsigned,
           V1:32/native-unsigned,
           V2:32/native-unsigned>>).

-spec uniform4ui(Location, V0, V1, V2, V3) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(V0, integer()),
                        is_subtype(V1, integer()),
                        is_subtype(V2, integer()),
                        is_subtype(V3, integer()).

uniform4ui(Location, V0, V1, V2, V3) ->
    cast(5563,
         <<Location:32/native-signed,
           V0:32/native-unsigned,
           V1:32/native-unsigned,
           V2:32/native-unsigned,
           V3:32/native-unsigned>>).

-spec uniform1uiv(Location, Value) -> ok
                     when
                         is_subtype(Location, integer()),
                         is_subtype(Value, [integer()]).

uniform1uiv(Location, Value) ->
    cast(5564,
         <<Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Value
           >>/binary,
           0:(length(Value) rem 2 * 32)>>).

-spec uniform2uiv(Location, Value) -> ok
                     when
                         is_subtype(Location, integer()),
                         is_subtype(Value, [{integer(), integer()}]).

uniform2uiv(Location, Value) ->
    cast(5565,
         <<Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-unsigned,V2:32/native-unsigned>> ||
                 {V1,V2} <- Value
           >>/binary>>).

-spec uniform3uiv(Location, Value) -> ok
                     when
                         is_subtype(Location, integer()),
                         is_subtype(Value,
                                    [{integer(), integer(), integer()}]).

uniform3uiv(Location, Value) ->
    cast(5566,
         <<Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-unsigned,
               V2:32/native-unsigned,
               V3:32/native-unsigned>> ||
                 {V1,V2,V3} <- Value
           >>/binary>>).

-spec uniform4uiv(Location, Value) -> ok
                     when
                         is_subtype(Location, integer()),
                         is_subtype(Value,
                                    [{integer(),
                                      integer(),
                                      integer(),
                                      integer()}]).

uniform4uiv(Location, Value) ->
    cast(5567,
         <<Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-unsigned,
               V2:32/native-unsigned,
               V3:32/native-unsigned,
               V4:32/native-unsigned>> ||
                 {V1,V2,V3,V4} <- Value
           >>/binary>>).

-spec texParameterIiv(Target, Pname, Params) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(Pname, enum()),
                             is_subtype(Params, {integer()}).

texParameterIiv(Target, Pname, Params) ->
    cast(5568,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec texParameterIuiv(Target, Pname, Params) -> ok
                          when
                              is_subtype(Target, enum()),
                              is_subtype(Pname, enum()),
                              is_subtype(Params, {integer()}).

texParameterIuiv(Target, Pname, Params) ->
    cast(5569,
         <<Target:32/native-unsigned,
           Pname:32/native-unsigned,
           (size(Params)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- tuple_to_list(Params)
           >>/binary,
           0:((1 + size(Params)) rem 2 * 32)>>).

-spec getTexParameterIiv(Target, Pname) ->
                            {integer(), integer(), integer(), integer()}
                            when
                                is_subtype(Target, enum()),
                                is_subtype(Pname, enum()).

getTexParameterIiv(Target, Pname) ->
    call(5570, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getTexParameterIuiv(Target, Pname) ->
                             {integer(),
                              integer(),
                              integer(),
                              integer()}
                             when
                                 is_subtype(Target, enum()),
                                 is_subtype(Pname, enum()).

getTexParameterIuiv(Target, Pname) ->
    call(5571, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec clearBufferiv(Buffer, Drawbuffer, Value) -> ok
                       when
                           is_subtype(Buffer, enum()),
                           is_subtype(Drawbuffer, integer()),
                           is_subtype(Value, {integer()}).

clearBufferiv(Buffer, Drawbuffer, Value) ->
    cast(5572,
         <<Buffer:32/native-unsigned,
           Drawbuffer:32/native-signed,
           (size(Value)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- tuple_to_list(Value)
           >>/binary,
           0:((1 + size(Value)) rem 2 * 32)>>).

-spec clearBufferuiv(Buffer, Drawbuffer, Value) -> ok
                        when
                            is_subtype(Buffer, enum()),
                            is_subtype(Drawbuffer, integer()),
                            is_subtype(Value, {integer()}).

clearBufferuiv(Buffer, Drawbuffer, Value) ->
    cast(5573,
         <<Buffer:32/native-unsigned,
           Drawbuffer:32/native-signed,
           (size(Value)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- tuple_to_list(Value)
           >>/binary,
           0:((1 + size(Value)) rem 2 * 32)>>).

-spec clearBufferfv(Buffer, Drawbuffer, Value) -> ok
                       when
                           is_subtype(Buffer, enum()),
                           is_subtype(Drawbuffer, integer()),
                           is_subtype(Value, {float()}).

clearBufferfv(Buffer, Drawbuffer, Value) ->
    cast(5574,
         <<Buffer:32/native-unsigned,
           Drawbuffer:32/native-signed,
           (size(Value)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- tuple_to_list(Value)
           >>/binary,
           0:((1 + size(Value)) rem 2 * 32)>>).

-spec clearBufferfi(Buffer, Drawbuffer, Depth, Stencil) -> ok
                       when
                           is_subtype(Buffer, enum()),
                           is_subtype(Drawbuffer, integer()),
                           is_subtype(Depth, float()),
                           is_subtype(Stencil, integer()).

clearBufferfi(Buffer, Drawbuffer, Depth, Stencil) ->
    cast(5575,
         <<Buffer:32/native-unsigned,
           Drawbuffer:32/native-signed,
           Depth:32/native-float,
           Stencil:32/native-signed>>).

-spec getStringi(Name, Index) -> string()
                    when
                        is_subtype(Name, enum()),
                        is_subtype(Index, integer()).

getStringi(Name, Index) ->
    call(5576, <<Name:32/native-unsigned,Index:32/native-unsigned>>).

-spec drawArraysInstanced(Mode, First, Count, Primcount) -> ok
                             when
                                 is_subtype(Mode, enum()),
                                 is_subtype(First, integer()),
                                 is_subtype(Count, integer()),
                                 is_subtype(Primcount, integer()).

drawArraysInstanced(Mode, First, Count, Primcount) ->
    cast(5577,
         <<Mode:32/native-unsigned,
           First:32/native-signed,
           Count:32/native-signed,
           Primcount:32/native-signed>>).

-spec drawElementsInstanced(Mode, Count, Type, Indices, Primcount) -> ok
                               when
                                   is_subtype(Mode, enum()),
                                   is_subtype(Count, integer()),
                                   is_subtype(Type, enum()),
                                   is_subtype(Indices, offset() | mem()),
                                   is_subtype(Primcount, integer()).

drawElementsInstanced(Mode, Count, Type, Indices, Primcount)
    when is_integer(Indices) ->
    cast(5578,
         <<Mode:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Indices:32/native-unsigned,
           Primcount:32/native-signed>>);
drawElementsInstanced(Mode, Count, Type, Indices, Primcount) ->
    send_bin(Indices),
    cast(5579,
         <<Mode:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Primcount:32/native-signed>>).

-spec texBuffer(Target, Internalformat, Buffer) -> ok
                   when
                       is_subtype(Target, enum()),
                       is_subtype(Internalformat, enum()),
                       is_subtype(Buffer, integer()).

texBuffer(Target, Internalformat, Buffer) ->
    cast(5580,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           Buffer:32/native-unsigned>>).

-spec primitiveRestartIndex(Index) -> ok
                               when is_subtype(Index, integer()).

primitiveRestartIndex(Index) ->
    cast(5581, <<Index:32/native-unsigned>>).

-spec getInteger64i_v(Target, Index) -> [integer()]
                         when
                             is_subtype(Target, enum()),
                             is_subtype(Index, integer()).

getInteger64i_v(Target, Index) ->
    call(5582, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec getBufferParameteri64v(Target, Pname) -> [integer()]
                                when
                                    is_subtype(Target, enum()),
                                    is_subtype(Pname, enum()).

getBufferParameteri64v(Target, Pname) ->
    call(5583, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec framebufferTexture(Target, Attachment, Texture, Level) -> ok
                            when
                                is_subtype(Target, enum()),
                                is_subtype(Attachment, enum()),
                                is_subtype(Texture, integer()),
                                is_subtype(Level, integer()).

framebufferTexture(Target, Attachment, Texture, Level) ->
    cast(5584,
         <<Target:32/native-unsigned,
           Attachment:32/native-unsigned,
           Texture:32/native-unsigned,
           Level:32/native-signed>>).

-spec vertexAttribDivisor(Index, Divisor) -> ok
                             when
                                 is_subtype(Index, integer()),
                                 is_subtype(Divisor, integer()).

vertexAttribDivisor(Index, Divisor) ->
    cast(5585, <<Index:32/native-unsigned,Divisor:32/native-unsigned>>).

-spec minSampleShading(Value) -> ok when is_subtype(Value, clamp()).

minSampleShading(Value) ->
    cast(5586, <<Value:32/native-float>>).

-spec blendEquationi(Buf, Mode) -> ok
                        when
                            is_subtype(Buf, integer()),
                            is_subtype(Mode, enum()).

blendEquationi(Buf, Mode) ->
    cast(5587, <<Buf:32/native-unsigned,Mode:32/native-unsigned>>).

-spec blendEquationSeparatei(Buf, ModeRGB, ModeAlpha) -> ok
                                when
                                    is_subtype(Buf, integer()),
                                    is_subtype(ModeRGB, enum()),
                                    is_subtype(ModeAlpha, enum()).

blendEquationSeparatei(Buf, ModeRGB, ModeAlpha) ->
    cast(5588,
         <<Buf:32/native-unsigned,
           ModeRGB:32/native-unsigned,
           ModeAlpha:32/native-unsigned>>).

-spec blendFunci(Buf, Src, Dst) -> ok
                    when
                        is_subtype(Buf, integer()),
                        is_subtype(Src, enum()),
                        is_subtype(Dst, enum()).

blendFunci(Buf, Src, Dst) ->
    cast(5589,
         <<Buf:32/native-unsigned,
           Src:32/native-unsigned,
           Dst:32/native-unsigned>>).

-spec blendFuncSeparatei(Buf, SrcRGB, DstRGB, SrcAlpha, DstAlpha) -> ok
                            when
                                is_subtype(Buf, integer()),
                                is_subtype(SrcRGB, enum()),
                                is_subtype(DstRGB, enum()),
                                is_subtype(SrcAlpha, enum()),
                                is_subtype(DstAlpha, enum()).

blendFuncSeparatei(Buf, SrcRGB, DstRGB, SrcAlpha, DstAlpha) ->
    cast(5590,
         <<Buf:32/native-unsigned,
           SrcRGB:32/native-unsigned,
           DstRGB:32/native-unsigned,
           SrcAlpha:32/native-unsigned,
           DstAlpha:32/native-unsigned>>).

-spec loadTransposeMatrixfARB(M) -> ok when is_subtype(M, matrix()).

loadTransposeMatrixfARB({M1,
                         M2,
                         M3,
                         M4,
                         M5,
                         M6,
                         M7,
                         M8,
                         M9,
                         M10,
                         M11,
                         M12,
                         M13,
                         M14,
                         M15,
                         M16}) ->
    cast(5591,
         <<M1:32/native-float,
           M2:32/native-float,
           M3:32/native-float,
           M4:32/native-float,
           M5:32/native-float,
           M6:32/native-float,
           M7:32/native-float,
           M8:32/native-float,
           M9:32/native-float,
           M10:32/native-float,
           M11:32/native-float,
           M12:32/native-float,
           M13:32/native-float,
           M14:32/native-float,
           M15:32/native-float,
           M16:32/native-float>>);
loadTransposeMatrixfARB({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}) ->
    cast(5591,
         <<M1:32/native-float,
           M2:32/native-float,
           M3:32/native-float,
           0:32/native-float,
           M4:32/native-float,
           M5:32/native-float,
           M6:32/native-float,
           0:32/native-float,
           M7:32/native-float,
           M8:32/native-float,
           M9:32/native-float,
           0:32/native-float,
           M10:32/native-float,
           M11:32/native-float,
           M12:32/native-float,
           1:32/native-float>>).

-spec loadTransposeMatrixdARB(M) -> ok when is_subtype(M, matrix()).

loadTransposeMatrixdARB({M1,
                         M2,
                         M3,
                         M4,
                         M5,
                         M6,
                         M7,
                         M8,
                         M9,
                         M10,
                         M11,
                         M12,
                         M13,
                         M14,
                         M15,
                         M16}) ->
    cast(5592,
         <<M1:64/native-float,
           M2:64/native-float,
           M3:64/native-float,
           M4:64/native-float,
           M5:64/native-float,
           M6:64/native-float,
           M7:64/native-float,
           M8:64/native-float,
           M9:64/native-float,
           M10:64/native-float,
           M11:64/native-float,
           M12:64/native-float,
           M13:64/native-float,
           M14:64/native-float,
           M15:64/native-float,
           M16:64/native-float>>);
loadTransposeMatrixdARB({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}) ->
    cast(5592,
         <<M1:64/native-float,
           M2:64/native-float,
           M3:64/native-float,
           0:64/native-float,
           M4:64/native-float,
           M5:64/native-float,
           M6:64/native-float,
           0:64/native-float,
           M7:64/native-float,
           M8:64/native-float,
           M9:64/native-float,
           0:64/native-float,
           M10:64/native-float,
           M11:64/native-float,
           M12:64/native-float,
           1:64/native-float>>).

-spec multTransposeMatrixfARB(M) -> ok when is_subtype(M, matrix()).

multTransposeMatrixfARB({M1,
                         M2,
                         M3,
                         M4,
                         M5,
                         M6,
                         M7,
                         M8,
                         M9,
                         M10,
                         M11,
                         M12,
                         M13,
                         M14,
                         M15,
                         M16}) ->
    cast(5593,
         <<M1:32/native-float,
           M2:32/native-float,
           M3:32/native-float,
           M4:32/native-float,
           M5:32/native-float,
           M6:32/native-float,
           M7:32/native-float,
           M8:32/native-float,
           M9:32/native-float,
           M10:32/native-float,
           M11:32/native-float,
           M12:32/native-float,
           M13:32/native-float,
           M14:32/native-float,
           M15:32/native-float,
           M16:32/native-float>>);
multTransposeMatrixfARB({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}) ->
    cast(5593,
         <<M1:32/native-float,
           M2:32/native-float,
           M3:32/native-float,
           0:32/native-float,
           M4:32/native-float,
           M5:32/native-float,
           M6:32/native-float,
           0:32/native-float,
           M7:32/native-float,
           M8:32/native-float,
           M9:32/native-float,
           0:32/native-float,
           M10:32/native-float,
           M11:32/native-float,
           M12:32/native-float,
           1:32/native-float>>).

-spec multTransposeMatrixdARB(M) -> ok when is_subtype(M, matrix()).

multTransposeMatrixdARB({M1,
                         M2,
                         M3,
                         M4,
                         M5,
                         M6,
                         M7,
                         M8,
                         M9,
                         M10,
                         M11,
                         M12,
                         M13,
                         M14,
                         M15,
                         M16}) ->
    cast(5594,
         <<M1:64/native-float,
           M2:64/native-float,
           M3:64/native-float,
           M4:64/native-float,
           M5:64/native-float,
           M6:64/native-float,
           M7:64/native-float,
           M8:64/native-float,
           M9:64/native-float,
           M10:64/native-float,
           M11:64/native-float,
           M12:64/native-float,
           M13:64/native-float,
           M14:64/native-float,
           M15:64/native-float,
           M16:64/native-float>>);
multTransposeMatrixdARB({M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12}) ->
    cast(5594,
         <<M1:64/native-float,
           M2:64/native-float,
           M3:64/native-float,
           0:64/native-float,
           M4:64/native-float,
           M5:64/native-float,
           M6:64/native-float,
           0:64/native-float,
           M7:64/native-float,
           M8:64/native-float,
           M9:64/native-float,
           0:64/native-float,
           M10:64/native-float,
           M11:64/native-float,
           M12:64/native-float,
           1:64/native-float>>).

-spec weightbvARB(Weights) -> ok when is_subtype(Weights, [integer()]).

weightbvARB(Weights) ->
    cast(5595,
         <<(length(Weights)):32/native-unsigned,
           << 
             <<C:8/native-signed>> ||
                 C <- Weights
           >>/binary,
           0:((8 - (length(Weights) + 4) rem 8) rem 8)>>).

-spec weightsvARB(Weights) -> ok when is_subtype(Weights, [integer()]).

weightsvARB(Weights) ->
    cast(5596,
         <<(length(Weights)):32/native-unsigned,
           << 
             <<C:16/native-signed>> ||
                 C <- Weights
           >>/binary,
           0:((8 - (length(Weights) * 2 + 4) rem 8) rem 8)>>).

-spec weightivARB(Weights) -> ok when is_subtype(Weights, [integer()]).

weightivARB(Weights) ->
    cast(5597,
         <<(length(Weights)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- Weights
           >>/binary,
           0:((1 + length(Weights)) rem 2 * 32)>>).

-spec weightfvARB(Weights) -> ok when is_subtype(Weights, [float()]).

weightfvARB(Weights) ->
    cast(5598,
         <<(length(Weights)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- Weights
           >>/binary,
           0:((1 + length(Weights)) rem 2 * 32)>>).

-spec weightdvARB(Weights) -> ok when is_subtype(Weights, [float()]).

weightdvARB(Weights) ->
    cast(5599,
         <<(length(Weights)):32/native-unsigned,
           0:32,
           << 
             <<C:64/native-float>> ||
                 C <- Weights
           >>/binary>>).

-spec weightubvARB(Weights) -> ok when is_subtype(Weights, [integer()]).

weightubvARB(Weights) ->
    cast(5600,
         <<(length(Weights)):32/native-unsigned,
           << 
             <<C:8/native-unsigned>> ||
                 C <- Weights
           >>/binary,
           0:((8 - (length(Weights) + 4) rem 8) rem 8)>>).

-spec weightusvARB(Weights) -> ok when is_subtype(Weights, [integer()]).

weightusvARB(Weights) ->
    cast(5601,
         <<(length(Weights)):32/native-unsigned,
           << 
             <<C:16/native-unsigned>> ||
                 C <- Weights
           >>/binary,
           0:((8 - (length(Weights) * 2 + 4) rem 8) rem 8)>>).

-spec weightuivARB(Weights) -> ok when is_subtype(Weights, [integer()]).

weightuivARB(Weights) ->
    cast(5602,
         <<(length(Weights)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Weights
           >>/binary,
           0:((1 + length(Weights)) rem 2 * 32)>>).

-spec vertexBlendARB(Count) -> ok when is_subtype(Count, integer()).

vertexBlendARB(Count) ->
    cast(5603, <<Count:32/native-signed>>).

-spec currentPaletteMatrixARB(Index) -> ok
                                 when is_subtype(Index, integer()).

currentPaletteMatrixARB(Index) ->
    cast(5604, <<Index:32/native-signed>>).

-spec matrixIndexubvARB(Indices) -> ok
                           when is_subtype(Indices, [integer()]).

matrixIndexubvARB(Indices) ->
    cast(5605,
         <<(length(Indices)):32/native-unsigned,
           << 
             <<C:8/native-unsigned>> ||
                 C <- Indices
           >>/binary,
           0:((8 - (length(Indices) + 4) rem 8) rem 8)>>).

-spec matrixIndexusvARB(Indices) -> ok
                           when is_subtype(Indices, [integer()]).

matrixIndexusvARB(Indices) ->
    cast(5606,
         <<(length(Indices)):32/native-unsigned,
           << 
             <<C:16/native-unsigned>> ||
                 C <- Indices
           >>/binary,
           0:((8 - (length(Indices) * 2 + 4) rem 8) rem 8)>>).

-spec matrixIndexuivARB(Indices) -> ok
                           when is_subtype(Indices, [integer()]).

matrixIndexuivARB(Indices) ->
    cast(5607,
         <<(length(Indices)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Indices
           >>/binary,
           0:((1 + length(Indices)) rem 2 * 32)>>).

-spec programStringARB(Target, Format, String) -> ok
                          when
                              is_subtype(Target, enum()),
                              is_subtype(Format, enum()),
                              is_subtype(String, string()).

programStringARB(Target, Format, String) ->
    cast(5608,
         <<Target:32/native-unsigned,
           Format:32/native-unsigned,
           (list_to_binary([String,0]))/binary,
           0:((8 - (length(String) + 1) rem 8) rem 8)>>).

-spec bindProgramARB(Target, Program) -> ok
                        when
                            is_subtype(Target, enum()),
                            is_subtype(Program, integer()).

bindProgramARB(Target, Program) ->
    cast(5609, <<Target:32/native-unsigned,Program:32/native-unsigned>>).

-spec deleteProgramsARB(Programs) -> ok
                           when is_subtype(Programs, [integer()]).

deleteProgramsARB(Programs) ->
    cast(5610,
         <<(length(Programs)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Programs
           >>/binary,
           0:((1 + length(Programs)) rem 2 * 32)>>).

-spec genProgramsARB(N) -> [integer()] when is_subtype(N, integer()).

genProgramsARB(N) ->
    call(5611, <<N:32/native-signed>>).

-spec programEnvParameter4dARB(Target, Index, X, Y, Z, W) -> ok
                                  when
                                      is_subtype(Target, enum()),
                                      is_subtype(Index, integer()),
                                      is_subtype(X, float()),
                                      is_subtype(Y, float()),
                                      is_subtype(Z, float()),
                                      is_subtype(W, float()).

programEnvParameter4dARB(Target, Index, X, Y, Z, W) ->
    cast(5612,
         <<Target:32/native-unsigned,
           Index:32/native-unsigned,
           X:64/native-float,
           Y:64/native-float,
           Z:64/native-float,
           W:64/native-float>>).

-spec programEnvParameter4dvARB(Target, Index, Params) -> ok
                                   when
                                       is_subtype(Target, enum()),
                                       is_subtype(Index, integer()),
                                       is_subtype(Params,
                                                  {float(),
                                                   float(),
                                                   float(),
                                                   float()}).

programEnvParameter4dvARB(Target, Index, {P1,P2,P3,P4}) ->
    cast(5613,
         <<Target:32/native-unsigned,
           Index:32/native-unsigned,
           P1:64/native-float,
           P2:64/native-float,
           P3:64/native-float,
           P4:64/native-float>>).

-spec programEnvParameter4fARB(Target, Index, X, Y, Z, W) -> ok
                                  when
                                      is_subtype(Target, enum()),
                                      is_subtype(Index, integer()),
                                      is_subtype(X, float()),
                                      is_subtype(Y, float()),
                                      is_subtype(Z, float()),
                                      is_subtype(W, float()).

programEnvParameter4fARB(Target, Index, X, Y, Z, W) ->
    cast(5614,
         <<Target:32/native-unsigned,
           Index:32/native-unsigned,
           X:32/native-float,
           Y:32/native-float,
           Z:32/native-float,
           W:32/native-float>>).

-spec programEnvParameter4fvARB(Target, Index, Params) -> ok
                                   when
                                       is_subtype(Target, enum()),
                                       is_subtype(Index, integer()),
                                       is_subtype(Params,
                                                  {float(),
                                                   float(),
                                                   float(),
                                                   float()}).

programEnvParameter4fvARB(Target, Index, {P1,P2,P3,P4}) ->
    cast(5615,
         <<Target:32/native-unsigned,
           Index:32/native-unsigned,
           P1:32/native-float,
           P2:32/native-float,
           P3:32/native-float,
           P4:32/native-float>>).

-spec programLocalParameter4dARB(Target, Index, X, Y, Z, W) -> ok
                                    when
                                        is_subtype(Target, enum()),
                                        is_subtype(Index, integer()),
                                        is_subtype(X, float()),
                                        is_subtype(Y, float()),
                                        is_subtype(Z, float()),
                                        is_subtype(W, float()).

programLocalParameter4dARB(Target, Index, X, Y, Z, W) ->
    cast(5616,
         <<Target:32/native-unsigned,
           Index:32/native-unsigned,
           X:64/native-float,
           Y:64/native-float,
           Z:64/native-float,
           W:64/native-float>>).

-spec programLocalParameter4dvARB(Target, Index, Params) -> ok
                                     when
                                         is_subtype(Target, enum()),
                                         is_subtype(Index, integer()),
                                         is_subtype(Params,
                                                    {float(),
                                                     float(),
                                                     float(),
                                                     float()}).

programLocalParameter4dvARB(Target, Index, {P1,P2,P3,P4}) ->
    cast(5617,
         <<Target:32/native-unsigned,
           Index:32/native-unsigned,
           P1:64/native-float,
           P2:64/native-float,
           P3:64/native-float,
           P4:64/native-float>>).

-spec programLocalParameter4fARB(Target, Index, X, Y, Z, W) -> ok
                                    when
                                        is_subtype(Target, enum()),
                                        is_subtype(Index, integer()),
                                        is_subtype(X, float()),
                                        is_subtype(Y, float()),
                                        is_subtype(Z, float()),
                                        is_subtype(W, float()).

programLocalParameter4fARB(Target, Index, X, Y, Z, W) ->
    cast(5618,
         <<Target:32/native-unsigned,
           Index:32/native-unsigned,
           X:32/native-float,
           Y:32/native-float,
           Z:32/native-float,
           W:32/native-float>>).

-spec programLocalParameter4fvARB(Target, Index, Params) -> ok
                                     when
                                         is_subtype(Target, enum()),
                                         is_subtype(Index, integer()),
                                         is_subtype(Params,
                                                    {float(),
                                                     float(),
                                                     float(),
                                                     float()}).

programLocalParameter4fvARB(Target, Index, {P1,P2,P3,P4}) ->
    cast(5619,
         <<Target:32/native-unsigned,
           Index:32/native-unsigned,
           P1:32/native-float,
           P2:32/native-float,
           P3:32/native-float,
           P4:32/native-float>>).

-spec getProgramEnvParameterdvARB(Target, Index) ->
                                     {float(),
                                      float(),
                                      float(),
                                      float()}
                                     when
                                         is_subtype(Target, enum()),
                                         is_subtype(Index, integer()).

getProgramEnvParameterdvARB(Target, Index) ->
    call(5620, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec getProgramEnvParameterfvARB(Target, Index) ->
                                     {float(),
                                      float(),
                                      float(),
                                      float()}
                                     when
                                         is_subtype(Target, enum()),
                                         is_subtype(Index, integer()).

getProgramEnvParameterfvARB(Target, Index) ->
    call(5621, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec getProgramLocalParameterdvARB(Target, Index) ->
                                       {float(),
                                        float(),
                                        float(),
                                        float()}
                                       when
                                           is_subtype(Target, enum()),
                                           is_subtype(Index, integer()).

getProgramLocalParameterdvARB(Target, Index) ->
    call(5622, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec getProgramLocalParameterfvARB(Target, Index) ->
                                       {float(),
                                        float(),
                                        float(),
                                        float()}
                                       when
                                           is_subtype(Target, enum()),
                                           is_subtype(Index, integer()).

getProgramLocalParameterfvARB(Target, Index) ->
    call(5623, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec getProgramStringARB(Target, Pname, String) -> ok
                             when
                                 is_subtype(Target, enum()),
                                 is_subtype(Pname, enum()),
                                 is_subtype(String, mem()).

getProgramStringARB(Target, Pname, String) ->
    send_bin(String),
    call(5624, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getBufferParameterivARB(Target, Pname) -> [integer()]
                                 when
                                     is_subtype(Target, enum()),
                                     is_subtype(Pname, enum()).

getBufferParameterivARB(Target, Pname) ->
    call(5625, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec deleteObjectARB(Obj) -> ok when is_subtype(Obj, integer()).

deleteObjectARB(Obj) ->
    cast(5626, <<Obj:64/native-unsigned>>).

-spec getHandleARB(Pname) -> integer() when is_subtype(Pname, enum()).

getHandleARB(Pname) ->
    call(5627, <<Pname:32/native-unsigned>>).

-spec detachObjectARB(ContainerObj, AttachedObj) -> ok
                         when
                             is_subtype(ContainerObj, integer()),
                             is_subtype(AttachedObj, integer()).

detachObjectARB(ContainerObj, AttachedObj) ->
    cast(5628,
         <<ContainerObj:64/native-unsigned,
           AttachedObj:64/native-unsigned>>).

-spec createShaderObjectARB(ShaderType) -> integer()
                               when is_subtype(ShaderType, enum()).

createShaderObjectARB(ShaderType) ->
    call(5629, <<ShaderType:32/native-unsigned>>).

-spec shaderSourceARB(ShaderObj, String) -> ok
                         when
                             is_subtype(ShaderObj, integer()),
                             is_subtype(String, [string()]).

shaderSourceARB(ShaderObj, String) ->
    StringTemp =
        list_to_binary([ 
                        [Str,0] ||
                            Str <- String
                       ]),
    cast(5630,
         <<ShaderObj:64/native-unsigned,
           (length(String)):32/native-unsigned,
           (size(StringTemp)):32/native-unsigned,
           StringTemp/binary,
           0:((8 - (size(StringTemp) + 4) rem 8) rem 8)>>).

-spec compileShaderARB(ShaderObj) -> ok
                          when is_subtype(ShaderObj, integer()).

compileShaderARB(ShaderObj) ->
    cast(5631, <<ShaderObj:64/native-unsigned>>).

-spec createProgramObjectARB() -> integer().

createProgramObjectARB() ->
    call(5632, <<>>).

-spec attachObjectARB(ContainerObj, Obj) -> ok
                         when
                             is_subtype(ContainerObj, integer()),
                             is_subtype(Obj, integer()).

attachObjectARB(ContainerObj, Obj) ->
    cast(5633,
         <<ContainerObj:64/native-unsigned,Obj:64/native-unsigned>>).

-spec linkProgramARB(ProgramObj) -> ok
                        when is_subtype(ProgramObj, integer()).

linkProgramARB(ProgramObj) ->
    cast(5634, <<ProgramObj:64/native-unsigned>>).

-spec useProgramObjectARB(ProgramObj) -> ok
                             when is_subtype(ProgramObj, integer()).

useProgramObjectARB(ProgramObj) ->
    cast(5635, <<ProgramObj:64/native-unsigned>>).

-spec validateProgramARB(ProgramObj) -> ok
                            when is_subtype(ProgramObj, integer()).

validateProgramARB(ProgramObj) ->
    cast(5636, <<ProgramObj:64/native-unsigned>>).

-spec getObjectParameterfvARB(Obj, Pname) -> float()
                                 when
                                     is_subtype(Obj, integer()),
                                     is_subtype(Pname, enum()).

getObjectParameterfvARB(Obj, Pname) ->
    call(5637, <<Obj:64/native-unsigned,Pname:32/native-unsigned>>).

-spec getObjectParameterivARB(Obj, Pname) -> integer()
                                 when
                                     is_subtype(Obj, integer()),
                                     is_subtype(Pname, enum()).

getObjectParameterivARB(Obj, Pname) ->
    call(5638, <<Obj:64/native-unsigned,Pname:32/native-unsigned>>).

-spec getInfoLogARB(Obj, MaxLength) -> string()
                       when
                           is_subtype(Obj, integer()),
                           is_subtype(MaxLength, integer()).

getInfoLogARB(Obj, MaxLength) ->
    call(5639, <<Obj:64/native-unsigned,MaxLength:32/native-signed>>).

-spec getAttachedObjectsARB(ContainerObj, MaxCount) -> [integer()]
                               when
                                   is_subtype(ContainerObj, integer()),
                                   is_subtype(MaxCount, integer()).

getAttachedObjectsARB(ContainerObj, MaxCount) ->
    call(5640,
         <<ContainerObj:64/native-unsigned,MaxCount:32/native-signed>>).

-spec getUniformLocationARB(ProgramObj, Name) -> integer()
                               when
                                   is_subtype(ProgramObj, integer()),
                                   is_subtype(Name, string()).

getUniformLocationARB(ProgramObj, Name) ->
    call(5641,
         <<ProgramObj:64/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 1) rem 8) rem 8)>>).

-spec getActiveUniformARB(ProgramObj, Index, MaxLength) ->
                             {Size :: integer(),
                              Type :: enum(),
                              Name :: string()}
                             when
                                 is_subtype(ProgramObj, integer()),
                                 is_subtype(Index, integer()),
                                 is_subtype(MaxLength, integer()).

getActiveUniformARB(ProgramObj, Index, MaxLength) ->
    call(5642,
         <<ProgramObj:64/native-unsigned,
           Index:32/native-unsigned,
           MaxLength:32/native-signed>>).

-spec getUniformfvARB(ProgramObj, Location) -> matrix()
                         when
                             is_subtype(ProgramObj, integer()),
                             is_subtype(Location, integer()).

getUniformfvARB(ProgramObj, Location) ->
    call(5643,
         <<ProgramObj:64/native-unsigned,Location:32/native-signed>>).

-spec getUniformivARB(ProgramObj, Location) ->
                         {integer(),
                          integer(),
                          integer(),
                          integer(),
                          integer(),
                          integer(),
                          integer(),
                          integer(),
                          integer(),
                          integer(),
                          integer(),
                          integer(),
                          integer(),
                          integer(),
                          integer(),
                          integer()}
                         when
                             is_subtype(ProgramObj, integer()),
                             is_subtype(Location, integer()).

getUniformivARB(ProgramObj, Location) ->
    call(5644,
         <<ProgramObj:64/native-unsigned,Location:32/native-signed>>).

-spec getShaderSourceARB(Obj, MaxLength) -> string()
                            when
                                is_subtype(Obj, integer()),
                                is_subtype(MaxLength, integer()).

getShaderSourceARB(Obj, MaxLength) ->
    call(5645, <<Obj:64/native-unsigned,MaxLength:32/native-signed>>).

-spec bindAttribLocationARB(ProgramObj, Index, Name) -> ok
                               when
                                   is_subtype(ProgramObj, integer()),
                                   is_subtype(Index, integer()),
                                   is_subtype(Name, string()).

bindAttribLocationARB(ProgramObj, Index, Name) ->
    cast(5646,
         <<ProgramObj:64/native-unsigned,
           Index:32/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 5) rem 8) rem 8)>>).

-spec getActiveAttribARB(ProgramObj, Index, MaxLength) ->
                            {Size :: integer(),
                             Type :: enum(),
                             Name :: string()}
                            when
                                is_subtype(ProgramObj, integer()),
                                is_subtype(Index, integer()),
                                is_subtype(MaxLength, integer()).

getActiveAttribARB(ProgramObj, Index, MaxLength) ->
    call(5647,
         <<ProgramObj:64/native-unsigned,
           Index:32/native-unsigned,
           MaxLength:32/native-signed>>).

-spec getAttribLocationARB(ProgramObj, Name) -> integer()
                              when
                                  is_subtype(ProgramObj, integer()),
                                  is_subtype(Name, string()).

getAttribLocationARB(ProgramObj, Name) ->
    call(5648,
         <<ProgramObj:64/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 1) rem 8) rem 8)>>).

-spec isRenderbuffer(Renderbuffer) -> 0 | 1
                        when is_subtype(Renderbuffer, integer()).

isRenderbuffer(Renderbuffer) ->
    call(5649, <<Renderbuffer:32/native-unsigned>>).

-spec bindRenderbuffer(Target, Renderbuffer) -> ok
                          when
                              is_subtype(Target, enum()),
                              is_subtype(Renderbuffer, integer()).

bindRenderbuffer(Target, Renderbuffer) ->
    cast(5650,
         <<Target:32/native-unsigned,Renderbuffer:32/native-unsigned>>).

-spec deleteRenderbuffers(Renderbuffers) -> ok
                             when is_subtype(Renderbuffers, [integer()]).

deleteRenderbuffers(Renderbuffers) ->
    cast(5651,
         <<(length(Renderbuffers)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Renderbuffers
           >>/binary,
           0:((1 + length(Renderbuffers)) rem 2 * 32)>>).

-spec genRenderbuffers(N) -> [integer()] when is_subtype(N, integer()).

genRenderbuffers(N) ->
    call(5652, <<N:32/native-signed>>).

-spec renderbufferStorage(Target, Internalformat, Width, Height) -> ok
                             when
                                 is_subtype(Target, enum()),
                                 is_subtype(Internalformat, enum()),
                                 is_subtype(Width, integer()),
                                 is_subtype(Height, integer()).

renderbufferStorage(Target, Internalformat, Width, Height) ->
    cast(5653,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Height:32/native-signed>>).

-spec getRenderbufferParameteriv(Target, Pname) -> integer()
                                    when
                                        is_subtype(Target, enum()),
                                        is_subtype(Pname, enum()).

getRenderbufferParameteriv(Target, Pname) ->
    call(5654, <<Target:32/native-unsigned,Pname:32/native-unsigned>>).

-spec isFramebuffer(Framebuffer) -> 0 | 1
                       when is_subtype(Framebuffer, integer()).

isFramebuffer(Framebuffer) ->
    call(5655, <<Framebuffer:32/native-unsigned>>).

-spec bindFramebuffer(Target, Framebuffer) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(Framebuffer, integer()).

bindFramebuffer(Target, Framebuffer) ->
    cast(5656,
         <<Target:32/native-unsigned,Framebuffer:32/native-unsigned>>).

-spec deleteFramebuffers(Framebuffers) -> ok
                            when is_subtype(Framebuffers, [integer()]).

deleteFramebuffers(Framebuffers) ->
    cast(5657,
         <<(length(Framebuffers)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Framebuffers
           >>/binary,
           0:((1 + length(Framebuffers)) rem 2 * 32)>>).

-spec genFramebuffers(N) -> [integer()] when is_subtype(N, integer()).

genFramebuffers(N) ->
    call(5658, <<N:32/native-signed>>).

-spec checkFramebufferStatus(Target) -> enum()
                                when is_subtype(Target, enum()).

checkFramebufferStatus(Target) ->
    call(5659, <<Target:32/native-unsigned>>).

-spec framebufferTexture1D(Target,
                           Attachment,
                           Textarget,
                           Texture,
                           Level) ->
                              ok
                              when
                                  is_subtype(Target, enum()),
                                  is_subtype(Attachment, enum()),
                                  is_subtype(Textarget, enum()),
                                  is_subtype(Texture, integer()),
                                  is_subtype(Level, integer()).

framebufferTexture1D(Target, Attachment, Textarget, Texture, Level) ->
    cast(5660,
         <<Target:32/native-unsigned,
           Attachment:32/native-unsigned,
           Textarget:32/native-unsigned,
           Texture:32/native-unsigned,
           Level:32/native-signed>>).

-spec framebufferTexture2D(Target,
                           Attachment,
                           Textarget,
                           Texture,
                           Level) ->
                              ok
                              when
                                  is_subtype(Target, enum()),
                                  is_subtype(Attachment, enum()),
                                  is_subtype(Textarget, enum()),
                                  is_subtype(Texture, integer()),
                                  is_subtype(Level, integer()).

framebufferTexture2D(Target, Attachment, Textarget, Texture, Level) ->
    cast(5661,
         <<Target:32/native-unsigned,
           Attachment:32/native-unsigned,
           Textarget:32/native-unsigned,
           Texture:32/native-unsigned,
           Level:32/native-signed>>).

-spec framebufferTexture3D(Target,
                           Attachment,
                           Textarget,
                           Texture,
                           Level,
                           Zoffset) ->
                              ok
                              when
                                  is_subtype(Target, enum()),
                                  is_subtype(Attachment, enum()),
                                  is_subtype(Textarget, enum()),
                                  is_subtype(Texture, integer()),
                                  is_subtype(Level, integer()),
                                  is_subtype(Zoffset, integer()).

framebufferTexture3D(Target,
                     Attachment,
                     Textarget,
                     Texture,
                     Level,
                     Zoffset) ->
    cast(5662,
         <<Target:32/native-unsigned,
           Attachment:32/native-unsigned,
           Textarget:32/native-unsigned,
           Texture:32/native-unsigned,
           Level:32/native-signed,
           Zoffset:32/native-signed>>).

-spec framebufferRenderbuffer(Target,
                              Attachment,
                              Renderbuffertarget,
                              Renderbuffer) ->
                                 ok
                                 when
                                     is_subtype(Target, enum()),
                                     is_subtype(Attachment, enum()),
                                     is_subtype(Renderbuffertarget,
                                                enum()),
                                     is_subtype(Renderbuffer, integer()).

framebufferRenderbuffer(Target,
                        Attachment,
                        Renderbuffertarget,
                        Renderbuffer) ->
    cast(5663,
         <<Target:32/native-unsigned,
           Attachment:32/native-unsigned,
           Renderbuffertarget:32/native-unsigned,
           Renderbuffer:32/native-unsigned>>).

-spec getFramebufferAttachmentParameteriv(Target, Attachment, Pname) ->
                                             integer()
                                             when
                                                 is_subtype(Target,
                                                            enum()),
                                                 is_subtype(Attachment,
                                                            enum()),
                                                 is_subtype(Pname,
                                                            enum()).

getFramebufferAttachmentParameteriv(Target, Attachment, Pname) ->
    call(5664,
         <<Target:32/native-unsigned,
           Attachment:32/native-unsigned,
           Pname:32/native-unsigned>>).

-spec generateMipmap(Target) -> ok when is_subtype(Target, enum()).

generateMipmap(Target) ->
    cast(5665, <<Target:32/native-unsigned>>).

-spec blitFramebuffer(SrcX0,
                      SrcY0,
                      SrcX1,
                      SrcY1,
                      DstX0,
                      DstY0,
                      DstX1,
                      DstY1,
                      Mask,
                      Filter) ->
                         ok
                         when
                             is_subtype(SrcX0, integer()),
                             is_subtype(SrcY0, integer()),
                             is_subtype(SrcX1, integer()),
                             is_subtype(SrcY1, integer()),
                             is_subtype(DstX0, integer()),
                             is_subtype(DstY0, integer()),
                             is_subtype(DstX1, integer()),
                             is_subtype(DstY1, integer()),
                             is_subtype(Mask, integer()),
                             is_subtype(Filter, enum()).

blitFramebuffer(SrcX0,
                SrcY0,
                SrcX1,
                SrcY1,
                DstX0,
                DstY0,
                DstX1,
                DstY1,
                Mask,
                Filter) ->
    cast(5666,
         <<SrcX0:32/native-signed,
           SrcY0:32/native-signed,
           SrcX1:32/native-signed,
           SrcY1:32/native-signed,
           DstX0:32/native-signed,
           DstY0:32/native-signed,
           DstX1:32/native-signed,
           DstY1:32/native-signed,
           Mask:32/native-unsigned,
           Filter:32/native-unsigned>>).

-spec renderbufferStorageMultisample(Target,
                                     Samples,
                                     Internalformat,
                                     Width,
                                     Height) ->
                                        ok
                                        when
                                            is_subtype(Target, enum()),
                                            is_subtype(Samples,
                                                       integer()),
                                            is_subtype(Internalformat,
                                                       enum()),
                                            is_subtype(Width, integer()),
                                            is_subtype(Height,
                                                       integer()).

renderbufferStorageMultisample(Target,
                               Samples,
                               Internalformat,
                               Width,
                               Height) ->
    cast(5667,
         <<Target:32/native-unsigned,
           Samples:32/native-signed,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Height:32/native-signed>>).

-spec framebufferTextureLayer(Target, Attachment, Texture, Level, Layer) ->
                                 ok
                                 when
                                     is_subtype(Target, enum()),
                                     is_subtype(Attachment, enum()),
                                     is_subtype(Texture, integer()),
                                     is_subtype(Level, integer()),
                                     is_subtype(Layer, integer()).

framebufferTextureLayer(Target, Attachment, Texture, Level, Layer) ->
    cast(5668,
         <<Target:32/native-unsigned,
           Attachment:32/native-unsigned,
           Texture:32/native-unsigned,
           Level:32/native-signed,
           Layer:32/native-signed>>).

-spec framebufferTextureFaceARB(Target,
                                Attachment,
                                Texture,
                                Level,
                                Face) ->
                                   ok
                                   when
                                       is_subtype(Target, enum()),
                                       is_subtype(Attachment, enum()),
                                       is_subtype(Texture, integer()),
                                       is_subtype(Level, integer()),
                                       is_subtype(Face, enum()).

framebufferTextureFaceARB(Target, Attachment, Texture, Level, Face) ->
    cast(5669,
         <<Target:32/native-unsigned,
           Attachment:32/native-unsigned,
           Texture:32/native-unsigned,
           Level:32/native-signed,
           Face:32/native-unsigned>>).

-spec flushMappedBufferRange(Target, Offset, Length) -> ok
                                when
                                    is_subtype(Target, enum()),
                                    is_subtype(Offset, integer()),
                                    is_subtype(Length, integer()).

flushMappedBufferRange(Target, Offset, Length) ->
    cast(5670,
         <<Target:32/native-unsigned,
           0:32,
           Offset:64/native-unsigned,
           Length:64/native-unsigned>>).

-spec bindVertexArray(Array) -> ok when is_subtype(Array, integer()).

bindVertexArray(Array) ->
    cast(5671, <<Array:32/native-unsigned>>).

-spec deleteVertexArrays(Arrays) -> ok
                            when is_subtype(Arrays, [integer()]).

deleteVertexArrays(Arrays) ->
    cast(5672,
         <<(length(Arrays)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Arrays
           >>/binary,
           0:((1 + length(Arrays)) rem 2 * 32)>>).

-spec genVertexArrays(N) -> [integer()] when is_subtype(N, integer()).

genVertexArrays(N) ->
    call(5673, <<N:32/native-signed>>).

-spec isVertexArray(Array) -> 0 | 1 when is_subtype(Array, integer()).

isVertexArray(Array) ->
    call(5674, <<Array:32/native-unsigned>>).

-spec getUniformIndices(Program, UniformNames) -> [integer()]
                           when
                               is_subtype(Program, integer()),
                               is_subtype(UniformNames, [string()]).

getUniformIndices(Program, UniformNames) ->
    UniformNamesTemp =
        list_to_binary([ 
                        [Str,0] ||
                            Str <- UniformNames
                       ]),
    call(5675,
         <<Program:32/native-unsigned,
           (length(UniformNames)):32/native-unsigned,
           (size(UniformNamesTemp)):32/native-unsigned,
           UniformNamesTemp/binary,
           0:((8 - (size(UniformNamesTemp) + 0) rem 8) rem 8)>>).

-spec getActiveUniformsiv(Program, UniformIndices, Pname) -> [integer()]
                             when
                                 is_subtype(Program, integer()),
                                 is_subtype(UniformIndices, [integer()]),
                                 is_subtype(Pname, enum()).

getActiveUniformsiv(Program, UniformIndices, Pname) ->
    call(5676,
         <<Program:32/native-unsigned,
           (length(UniformIndices)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- UniformIndices
           >>/binary,
           0:(length(UniformIndices) rem 2 * 32),
           Pname:32/native-unsigned>>).

-spec getActiveUniformName(Program, UniformIndex, BufSize) -> string()
                              when
                                  is_subtype(Program, integer()),
                                  is_subtype(UniformIndex, integer()),
                                  is_subtype(BufSize, integer()).

getActiveUniformName(Program, UniformIndex, BufSize) ->
    call(5677,
         <<Program:32/native-unsigned,
           UniformIndex:32/native-unsigned,
           BufSize:32/native-signed>>).

-spec getUniformBlockIndex(Program, UniformBlockName) -> integer()
                              when
                                  is_subtype(Program, integer()),
                                  is_subtype(UniformBlockName, string()).

getUniformBlockIndex(Program, UniformBlockName) ->
    call(5678,
         <<Program:32/native-unsigned,
           (list_to_binary([UniformBlockName,0]))/binary,
           0:((8 - (length(UniformBlockName) + 5) rem 8) rem 8)>>).

-spec getActiveUniformBlockiv(Program, UniformBlockIndex, Pname, Params) ->
                                 ok
                                 when
                                     is_subtype(Program, integer()),
                                     is_subtype(UniformBlockIndex,
                                                integer()),
                                     is_subtype(Pname, enum()),
                                     is_subtype(Params, mem()).

getActiveUniformBlockiv(Program, UniformBlockIndex, Pname, Params) ->
    send_bin(Params),
    call(5679,
         <<Program:32/native-unsigned,
           UniformBlockIndex:32/native-unsigned,
           Pname:32/native-unsigned>>).

-spec getActiveUniformBlockName(Program, UniformBlockIndex, BufSize) ->
                                   string()
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(UniformBlockIndex,
                                                  integer()),
                                       is_subtype(BufSize, integer()).

getActiveUniformBlockName(Program, UniformBlockIndex, BufSize) ->
    call(5680,
         <<Program:32/native-unsigned,
           UniformBlockIndex:32/native-unsigned,
           BufSize:32/native-signed>>).

-spec uniformBlockBinding(Program,
                          UniformBlockIndex,
                          UniformBlockBinding) ->
                             ok
                             when
                                 is_subtype(Program, integer()),
                                 is_subtype(UniformBlockIndex,
                                            integer()),
                                 is_subtype(UniformBlockBinding,
                                            integer()).

uniformBlockBinding(Program, UniformBlockIndex, UniformBlockBinding) ->
    cast(5681,
         <<Program:32/native-unsigned,
           UniformBlockIndex:32/native-unsigned,
           UniformBlockBinding:32/native-unsigned>>).

-spec copyBufferSubData(ReadTarget,
                        WriteTarget,
                        ReadOffset,
                        WriteOffset,
                        Size) ->
                           ok
                           when
                               is_subtype(ReadTarget, enum()),
                               is_subtype(WriteTarget, enum()),
                               is_subtype(ReadOffset, integer()),
                               is_subtype(WriteOffset, integer()),
                               is_subtype(Size, integer()).

copyBufferSubData(ReadTarget,
                  WriteTarget,
                  ReadOffset,
                  WriteOffset,
                  Size) ->
    cast(5682,
         <<ReadTarget:32/native-unsigned,
           WriteTarget:32/native-unsigned,
           ReadOffset:64/native-unsigned,
           WriteOffset:64/native-unsigned,
           Size:64/native-unsigned>>).

-spec drawElementsBaseVertex(Mode, Count, Type, Indices, Basevertex) ->
                                ok
                                when
                                    is_subtype(Mode, enum()),
                                    is_subtype(Count, integer()),
                                    is_subtype(Type, enum()),
                                    is_subtype(Indices,
                                               offset() | mem()),
                                    is_subtype(Basevertex, integer()).

drawElementsBaseVertex(Mode, Count, Type, Indices, Basevertex)
    when is_integer(Indices) ->
    cast(5683,
         <<Mode:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Indices:32/native-unsigned,
           Basevertex:32/native-signed>>);
drawElementsBaseVertex(Mode, Count, Type, Indices, Basevertex) ->
    send_bin(Indices),
    cast(5684,
         <<Mode:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Basevertex:32/native-signed>>).

-spec drawRangeElementsBaseVertex(Mode,
                                  Start,
                                  End,
                                  Count,
                                  Type,
                                  Indices,
                                  Basevertex) ->
                                     ok
                                     when
                                         is_subtype(Mode, enum()),
                                         is_subtype(Start, integer()),
                                         is_subtype(End, integer()),
                                         is_subtype(Count, integer()),
                                         is_subtype(Type, enum()),
                                         is_subtype(Indices,
                                                    offset() | mem()),
                                         is_subtype(Basevertex,
                                                    integer()).

drawRangeElementsBaseVertex(Mode,
                            Start,
                            End,
                            Count,
                            Type,
                            Indices,
                            Basevertex)
    when is_integer(Indices) ->
    cast(5685,
         <<Mode:32/native-unsigned,
           Start:32/native-unsigned,
           End:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Indices:32/native-unsigned,
           Basevertex:32/native-signed>>);
drawRangeElementsBaseVertex(Mode,
                            Start,
                            End,
                            Count,
                            Type,
                            Indices,
                            Basevertex) ->
    send_bin(Indices),
    cast(5686,
         <<Mode:32/native-unsigned,
           Start:32/native-unsigned,
           End:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Basevertex:32/native-signed>>).

-spec drawElementsInstancedBaseVertex(Mode,
                                      Count,
                                      Type,
                                      Indices,
                                      Primcount,
                                      Basevertex) ->
                                         ok
                                         when
                                             is_subtype(Mode, enum()),
                                             is_subtype(Count,
                                                        integer()),
                                             is_subtype(Type, enum()),
                                             is_subtype(Indices,
                                                        offset() | mem()),
                                             is_subtype(Primcount,
                                                        integer()),
                                             is_subtype(Basevertex,
                                                        integer()).

drawElementsInstancedBaseVertex(Mode,
                                Count,
                                Type,
                                Indices,
                                Primcount,
                                Basevertex)
    when is_integer(Indices) ->
    cast(5687,
         <<Mode:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Indices:32/native-unsigned,
           Primcount:32/native-signed,
           Basevertex:32/native-signed>>);
drawElementsInstancedBaseVertex(Mode,
                                Count,
                                Type,
                                Indices,
                                Primcount,
                                Basevertex) ->
    send_bin(Indices),
    cast(5688,
         <<Mode:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Primcount:32/native-signed,
           Basevertex:32/native-signed>>).

-spec provokingVertex(Mode) -> ok when is_subtype(Mode, enum()).

provokingVertex(Mode) ->
    cast(5689, <<Mode:32/native-unsigned>>).

-spec fenceSync(Condition, Flags) -> integer()
                   when
                       is_subtype(Condition, enum()),
                       is_subtype(Flags, integer()).

fenceSync(Condition, Flags) ->
    call(5690,
         <<Condition:32/native-unsigned,Flags:32/native-unsigned>>).

-spec isSync(Sync) -> 0 | 1 when is_subtype(Sync, integer()).

isSync(Sync) ->
    call(5691, <<Sync:64/native-unsigned>>).

-spec deleteSync(Sync) -> ok when is_subtype(Sync, integer()).

deleteSync(Sync) ->
    cast(5692, <<Sync:64/native-unsigned>>).

-spec clientWaitSync(Sync, Flags, Timeout) -> enum()
                        when
                            is_subtype(Sync, integer()),
                            is_subtype(Flags, integer()),
                            is_subtype(Timeout, integer()).

clientWaitSync(Sync, Flags, Timeout) ->
    call(5693,
         <<Sync:64/native-unsigned,
           Flags:32/native-unsigned,
           0:32,
           Timeout:64/native-unsigned>>).

-spec waitSync(Sync, Flags, Timeout) -> ok
                  when
                      is_subtype(Sync, integer()),
                      is_subtype(Flags, integer()),
                      is_subtype(Timeout, integer()).

waitSync(Sync, Flags, Timeout) ->
    cast(5694,
         <<Sync:64/native-unsigned,
           Flags:32/native-unsigned,
           0:32,
           Timeout:64/native-unsigned>>).

-spec getInteger64v(Pname) -> [integer()] when is_subtype(Pname, enum()).

getInteger64v(Pname) ->
    call(5695, <<Pname:32/native-unsigned>>).

-spec getSynciv(Sync, Pname, BufSize) -> [integer()]
                   when
                       is_subtype(Sync, integer()),
                       is_subtype(Pname, enum()),
                       is_subtype(BufSize, integer()).

getSynciv(Sync, Pname, BufSize) ->
    call(5696,
         <<Sync:64/native-unsigned,
           Pname:32/native-unsigned,
           BufSize:32/native-signed>>).

-spec texImage2DMultisample(Target,
                            Samples,
                            Internalformat,
                            Width,
                            Height,
                            Fixedsamplelocations) ->
                               ok
                               when
                                   is_subtype(Target, enum()),
                                   is_subtype(Samples, integer()),
                                   is_subtype(Internalformat, integer()),
                                   is_subtype(Width, integer()),
                                   is_subtype(Height, integer()),
                                   is_subtype(Fixedsamplelocations,
                                              0 | 1).

texImage2DMultisample(Target,
                      Samples,
                      Internalformat,
                      Width,
                      Height,
                      Fixedsamplelocations) ->
    cast(5697,
         <<Target:32/native-unsigned,
           Samples:32/native-signed,
           Internalformat:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Fixedsamplelocations:8/native-unsigned>>).

-spec texImage3DMultisample(Target,
                            Samples,
                            Internalformat,
                            Width,
                            Height,
                            Depth,
                            Fixedsamplelocations) ->
                               ok
                               when
                                   is_subtype(Target, enum()),
                                   is_subtype(Samples, integer()),
                                   is_subtype(Internalformat, integer()),
                                   is_subtype(Width, integer()),
                                   is_subtype(Height, integer()),
                                   is_subtype(Depth, integer()),
                                   is_subtype(Fixedsamplelocations,
                                              0 | 1).

texImage3DMultisample(Target,
                      Samples,
                      Internalformat,
                      Width,
                      Height,
                      Depth,
                      Fixedsamplelocations) ->
    cast(5698,
         <<Target:32/native-unsigned,
           Samples:32/native-signed,
           Internalformat:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed,
           Depth:32/native-signed,
           Fixedsamplelocations:8/native-unsigned>>).

-spec getMultisamplefv(Pname, Index) -> {float(), float()}
                          when
                              is_subtype(Pname, enum()),
                              is_subtype(Index, integer()).

getMultisamplefv(Pname, Index) ->
    call(5699, <<Pname:32/native-unsigned,Index:32/native-unsigned>>).

-spec sampleMaski(Index, Mask) -> ok
                     when
                         is_subtype(Index, integer()),
                         is_subtype(Mask, integer()).

sampleMaski(Index, Mask) ->
    cast(5700, <<Index:32/native-unsigned,Mask:32/native-unsigned>>).

-spec namedStringARB(Type, Name, String) -> ok
                        when
                            is_subtype(Type, enum()),
                            is_subtype(Name, string()),
                            is_subtype(String, string()).

namedStringARB(Type, Name, String) ->
    cast(5701,
         <<Type:32/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 5) rem 8) rem 8),
           (list_to_binary([String,0]))/binary,
           0:((8 - (length(String) + 1) rem 8) rem 8)>>).

-spec deleteNamedStringARB(Name) -> ok when is_subtype(Name, string()).

deleteNamedStringARB(Name) ->
    cast(5702,
         <<(list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 1) rem 8) rem 8)>>).

-spec compileShaderIncludeARB(Shader, Path) -> ok
                                 when
                                     is_subtype(Shader, integer()),
                                     is_subtype(Path, [string()]).

compileShaderIncludeARB(Shader, Path) ->
    PathTemp =
        list_to_binary([ 
                        [Str,0] ||
                            Str <- Path
                       ]),
    cast(5703,
         <<Shader:32/native-unsigned,
           (length(Path)):32/native-unsigned,
           (size(PathTemp)):32/native-unsigned,
           PathTemp/binary,
           0:((8 - (size(PathTemp) + 0) rem 8) rem 8)>>).

-spec isNamedStringARB(Name) -> 0 | 1 when is_subtype(Name, string()).

isNamedStringARB(Name) ->
    call(5704,
         <<(list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 1) rem 8) rem 8)>>).

-spec getNamedStringARB(Name, BufSize) -> string()
                           when
                               is_subtype(Name, string()),
                               is_subtype(BufSize, integer()).

getNamedStringARB(Name, BufSize) ->
    call(5705,
         <<(list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 1) rem 8) rem 8),
           BufSize:32/native-signed>>).

-spec getNamedStringivARB(Name, Pname) -> integer()
                             when
                                 is_subtype(Name, string()),
                                 is_subtype(Pname, enum()).

getNamedStringivARB(Name, Pname) ->
    call(5706,
         <<(list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 1) rem 8) rem 8),
           Pname:32/native-unsigned>>).

-spec bindFragDataLocationIndexed(Program, ColorNumber, Index, Name) ->
                                     ok
                                     when
                                         is_subtype(Program, integer()),
                                         is_subtype(ColorNumber,
                                                    integer()),
                                         is_subtype(Index, integer()),
                                         is_subtype(Name, string()).

bindFragDataLocationIndexed(Program, ColorNumber, Index, Name) ->
    cast(5707,
         <<Program:32/native-unsigned,
           ColorNumber:32/native-unsigned,
           Index:32/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 5) rem 8) rem 8)>>).

-spec getFragDataIndex(Program, Name) -> integer()
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Name, string()).

getFragDataIndex(Program, Name) ->
    call(5708,
         <<Program:32/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 5) rem 8) rem 8)>>).

-spec genSamplers(Count) -> [integer()]
                     when is_subtype(Count, integer()).

genSamplers(Count) ->
    call(5709, <<Count:32/native-signed>>).

-spec deleteSamplers(Samplers) -> ok
                        when is_subtype(Samplers, [integer()]).

deleteSamplers(Samplers) ->
    cast(5710,
         <<(length(Samplers)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Samplers
           >>/binary,
           0:((1 + length(Samplers)) rem 2 * 32)>>).

-spec isSampler(Sampler) -> 0 | 1 when is_subtype(Sampler, integer()).

isSampler(Sampler) ->
    call(5711, <<Sampler:32/native-unsigned>>).

-spec bindSampler(Unit, Sampler) -> ok
                     when
                         is_subtype(Unit, integer()),
                         is_subtype(Sampler, integer()).

bindSampler(Unit, Sampler) ->
    cast(5712, <<Unit:32/native-unsigned,Sampler:32/native-unsigned>>).

-spec samplerParameteri(Sampler, Pname, Param) -> ok
                           when
                               is_subtype(Sampler, integer()),
                               is_subtype(Pname, enum()),
                               is_subtype(Param, integer()).

samplerParameteri(Sampler, Pname, Param) ->
    cast(5713,
         <<Sampler:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:32/native-signed>>).

-spec samplerParameteriv(Sampler, Pname, Param) -> ok
                            when
                                is_subtype(Sampler, integer()),
                                is_subtype(Pname, enum()),
                                is_subtype(Param, [integer()]).

samplerParameteriv(Sampler, Pname, Param) ->
    cast(5714,
         <<Sampler:32/native-unsigned,
           Pname:32/native-unsigned,
           (length(Param)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- Param
           >>/binary,
           0:((1 + length(Param)) rem 2 * 32)>>).

-spec samplerParameterf(Sampler, Pname, Param) -> ok
                           when
                               is_subtype(Sampler, integer()),
                               is_subtype(Pname, enum()),
                               is_subtype(Param, float()).

samplerParameterf(Sampler, Pname, Param) ->
    cast(5715,
         <<Sampler:32/native-unsigned,
           Pname:32/native-unsigned,
           Param:32/native-float>>).

-spec samplerParameterfv(Sampler, Pname, Param) -> ok
                            when
                                is_subtype(Sampler, integer()),
                                is_subtype(Pname, enum()),
                                is_subtype(Param, [float()]).

samplerParameterfv(Sampler, Pname, Param) ->
    cast(5716,
         <<Sampler:32/native-unsigned,
           Pname:32/native-unsigned,
           (length(Param)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- Param
           >>/binary,
           0:((1 + length(Param)) rem 2 * 32)>>).

-spec samplerParameterIiv(Sampler, Pname, Param) -> ok
                             when
                                 is_subtype(Sampler, integer()),
                                 is_subtype(Pname, enum()),
                                 is_subtype(Param, [integer()]).

samplerParameterIiv(Sampler, Pname, Param) ->
    cast(5717,
         <<Sampler:32/native-unsigned,
           Pname:32/native-unsigned,
           (length(Param)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- Param
           >>/binary,
           0:((1 + length(Param)) rem 2 * 32)>>).

-spec samplerParameterIuiv(Sampler, Pname, Param) -> ok
                              when
                                  is_subtype(Sampler, integer()),
                                  is_subtype(Pname, enum()),
                                  is_subtype(Param, [integer()]).

samplerParameterIuiv(Sampler, Pname, Param) ->
    cast(5718,
         <<Sampler:32/native-unsigned,
           Pname:32/native-unsigned,
           (length(Param)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Param
           >>/binary,
           0:((1 + length(Param)) rem 2 * 32)>>).

-spec getSamplerParameteriv(Sampler, Pname) -> [integer()]
                               when
                                   is_subtype(Sampler, integer()),
                                   is_subtype(Pname, enum()).

getSamplerParameteriv(Sampler, Pname) ->
    call(5719, <<Sampler:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getSamplerParameterIiv(Sampler, Pname) -> [integer()]
                                when
                                    is_subtype(Sampler, integer()),
                                    is_subtype(Pname, enum()).

getSamplerParameterIiv(Sampler, Pname) ->
    call(5720, <<Sampler:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getSamplerParameterfv(Sampler, Pname) -> [float()]
                               when
                                   is_subtype(Sampler, integer()),
                                   is_subtype(Pname, enum()).

getSamplerParameterfv(Sampler, Pname) ->
    call(5721, <<Sampler:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getSamplerParameterIuiv(Sampler, Pname) -> [integer()]
                                 when
                                     is_subtype(Sampler, integer()),
                                     is_subtype(Pname, enum()).

getSamplerParameterIuiv(Sampler, Pname) ->
    call(5722, <<Sampler:32/native-unsigned,Pname:32/native-unsigned>>).

-spec queryCounter(Id, Target) -> ok
                      when
                          is_subtype(Id, integer()),
                          is_subtype(Target, enum()).

queryCounter(Id, Target) ->
    cast(5723, <<Id:32/native-unsigned,Target:32/native-unsigned>>).

-spec getQueryObjecti64v(Id, Pname) -> integer()
                            when
                                is_subtype(Id, integer()),
                                is_subtype(Pname, enum()).

getQueryObjecti64v(Id, Pname) ->
    call(5724, <<Id:32/native-unsigned,Pname:32/native-unsigned>>).

-spec getQueryObjectui64v(Id, Pname) -> integer()
                             when
                                 is_subtype(Id, integer()),
                                 is_subtype(Pname, enum()).

getQueryObjectui64v(Id, Pname) ->
    call(5725, <<Id:32/native-unsigned,Pname:32/native-unsigned>>).

-spec drawArraysIndirect(Mode, Indirect) -> ok
                            when
                                is_subtype(Mode, enum()),
                                is_subtype(Indirect, offset() | mem()).

drawArraysIndirect(Mode, Indirect) when is_integer(Indirect) ->
    cast(5726, <<Mode:32/native-unsigned,Indirect:32/native-unsigned>>);
drawArraysIndirect(Mode, Indirect) ->
    send_bin(Indirect),
    cast(5727, <<Mode:32/native-unsigned>>).

-spec drawElementsIndirect(Mode, Type, Indirect) -> ok
                              when
                                  is_subtype(Mode, enum()),
                                  is_subtype(Type, enum()),
                                  is_subtype(Indirect, offset() | mem()).

drawElementsIndirect(Mode, Type, Indirect) when is_integer(Indirect) ->
    cast(5728,
         <<Mode:32/native-unsigned,
           Type:32/native-unsigned,
           Indirect:32/native-unsigned>>);
drawElementsIndirect(Mode, Type, Indirect) ->
    send_bin(Indirect),
    cast(5729, <<Mode:32/native-unsigned,Type:32/native-unsigned>>).

-spec uniform1d(Location, X) -> ok
                   when
                       is_subtype(Location, integer()),
                       is_subtype(X, float()).

uniform1d(Location, X) ->
    cast(5730, <<Location:32/native-signed,0:32,X:64/native-float>>).

-spec uniform2d(Location, X, Y) -> ok
                   when
                       is_subtype(Location, integer()),
                       is_subtype(X, float()),
                       is_subtype(Y, float()).

uniform2d(Location, X, Y) ->
    cast(5731,
         <<Location:32/native-signed,
           0:32,
           X:64/native-float,
           Y:64/native-float>>).

-spec uniform3d(Location, X, Y, Z) -> ok
                   when
                       is_subtype(Location, integer()),
                       is_subtype(X, float()),
                       is_subtype(Y, float()),
                       is_subtype(Z, float()).

uniform3d(Location, X, Y, Z) ->
    cast(5732,
         <<Location:32/native-signed,
           0:32,
           X:64/native-float,
           Y:64/native-float,
           Z:64/native-float>>).

-spec uniform4d(Location, X, Y, Z, W) -> ok
                   when
                       is_subtype(Location, integer()),
                       is_subtype(X, float()),
                       is_subtype(Y, float()),
                       is_subtype(Z, float()),
                       is_subtype(W, float()).

uniform4d(Location, X, Y, Z, W) ->
    cast(5733,
         <<Location:32/native-signed,
           0:32,
           X:64/native-float,
           Y:64/native-float,
           Z:64/native-float,
           W:64/native-float>>).

-spec uniform1dv(Location, Value) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(Value, [float()]).

uniform1dv(Location, Value) ->
    cast(5734,
         <<Location:32/native-signed,
           0:32,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<C:64/native-float>> ||
                 C <- Value
           >>/binary>>).

-spec uniform2dv(Location, Value) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(Value, [{float(), float()}]).

uniform2dv(Location, Value) ->
    cast(5735,
         <<Location:32/native-signed,
           0:32,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,V2:64/native-float>> ||
                 {V1,V2} <- Value
           >>/binary>>).

-spec uniform3dv(Location, Value) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(Value, [{float(), float(), float()}]).

uniform3dv(Location, Value) ->
    cast(5736,
         <<Location:32/native-signed,
           0:32,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,V2:64/native-float,V3:64/native-float>> ||
                 {V1,V2,V3} <- Value
           >>/binary>>).

-spec uniform4dv(Location, Value) -> ok
                    when
                        is_subtype(Location, integer()),
                        is_subtype(Value,
                                   [{float(), float(), float(), float()}]).

uniform4dv(Location, Value) ->
    cast(5737,
         <<Location:32/native-signed,
           0:32,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float>> ||
                 {V1,V2,V3,V4} <- Value
           >>/binary>>).

-spec uniformMatrix2dv(Location, Transpose, Value) -> ok
                          when
                              is_subtype(Location, integer()),
                              is_subtype(Transpose, 0 | 1),
                              is_subtype(Value,
                                         [{float(),
                                           float(),
                                           float(),
                                           float()}]).

uniformMatrix2dv(Location, Transpose, Value) ->
    cast(5738,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float>> ||
                 {V1,V2,V3,V4} <- Value
           >>/binary>>).

-spec uniformMatrix3dv(Location, Transpose, Value) -> ok
                          when
                              is_subtype(Location, integer()),
                              is_subtype(Transpose, 0 | 1),
                              is_subtype(Value,
                                         [{float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float()}]).

uniformMatrix3dv(Location, Transpose, Value) ->
    cast(5739,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float,
               V7:64/native-float,
               V8:64/native-float,
               V9:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8,V9} <- Value
           >>/binary>>).

-spec uniformMatrix4dv(Location, Transpose, Value) -> ok
                          when
                              is_subtype(Location, integer()),
                              is_subtype(Transpose, 0 | 1),
                              is_subtype(Value,
                                         [{float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float(),
                                           float()}]).

uniformMatrix4dv(Location, Transpose, Value) ->
    cast(5740,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float,
               V7:64/native-float,
               V8:64/native-float,
               V9:64/native-float,
               V10:64/native-float,
               V11:64/native-float,
               V12:64/native-float,
               V13:64/native-float,
               V14:64/native-float,
               V15:64/native-float,
               V16:64/native-float>> ||
                 {V1,
                  V2,
                  V3,
                  V4,
                  V5,
                  V6,
                  V7,
                  V8,
                  V9,
                  V10,
                  V11,
                  V12,
                  V13,
                  V14,
                  V15,
                  V16} <-
                     Value
           >>/binary>>).

-spec uniformMatrix2x3dv(Location, Transpose, Value) -> ok
                            when
                                is_subtype(Location, integer()),
                                is_subtype(Transpose, 0 | 1),
                                is_subtype(Value,
                                           [{float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float()}]).

uniformMatrix2x3dv(Location, Transpose, Value) ->
    cast(5741,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6} <- Value
           >>/binary>>).

-spec uniformMatrix2x4dv(Location, Transpose, Value) -> ok
                            when
                                is_subtype(Location, integer()),
                                is_subtype(Transpose, 0 | 1),
                                is_subtype(Value,
                                           [{float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float()}]).

uniformMatrix2x4dv(Location, Transpose, Value) ->
    cast(5742,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float,
               V7:64/native-float,
               V8:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8} <- Value
           >>/binary>>).

-spec uniformMatrix3x2dv(Location, Transpose, Value) -> ok
                            when
                                is_subtype(Location, integer()),
                                is_subtype(Transpose, 0 | 1),
                                is_subtype(Value,
                                           [{float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float()}]).

uniformMatrix3x2dv(Location, Transpose, Value) ->
    cast(5743,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6} <- Value
           >>/binary>>).

-spec uniformMatrix3x4dv(Location, Transpose, Value) -> ok
                            when
                                is_subtype(Location, integer()),
                                is_subtype(Transpose, 0 | 1),
                                is_subtype(Value,
                                           [{float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float()}]).

uniformMatrix3x4dv(Location, Transpose, Value) ->
    cast(5744,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float,
               V7:64/native-float,
               V8:64/native-float,
               V9:64/native-float,
               V10:64/native-float,
               V11:64/native-float,
               V12:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12} <- Value
           >>/binary>>).

-spec uniformMatrix4x2dv(Location, Transpose, Value) -> ok
                            when
                                is_subtype(Location, integer()),
                                is_subtype(Transpose, 0 | 1),
                                is_subtype(Value,
                                           [{float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float()}]).

uniformMatrix4x2dv(Location, Transpose, Value) ->
    cast(5745,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float,
               V7:64/native-float,
               V8:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8} <- Value
           >>/binary>>).

-spec uniformMatrix4x3dv(Location, Transpose, Value) -> ok
                            when
                                is_subtype(Location, integer()),
                                is_subtype(Transpose, 0 | 1),
                                is_subtype(Value,
                                           [{float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float(),
                                             float()}]).

uniformMatrix4x3dv(Location, Transpose, Value) ->
    cast(5746,
         <<Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float,
               V7:64/native-float,
               V8:64/native-float,
               V9:64/native-float,
               V10:64/native-float,
               V11:64/native-float,
               V12:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12} <- Value
           >>/binary>>).

-spec getUniformdv(Program, Location) -> matrix()
                      when
                          is_subtype(Program, integer()),
                          is_subtype(Location, integer()).

getUniformdv(Program, Location) ->
    call(5747, <<Program:32/native-unsigned,Location:32/native-signed>>).

-spec getSubroutineUniformLocation(Program, Shadertype, Name) ->
                                      integer()
                                      when
                                          is_subtype(Program, integer()),
                                          is_subtype(Shadertype, enum()),
                                          is_subtype(Name, string()).

getSubroutineUniformLocation(Program, Shadertype, Name) ->
    call(5748,
         <<Program:32/native-unsigned,
           Shadertype:32/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 1) rem 8) rem 8)>>).

-spec getSubroutineIndex(Program, Shadertype, Name) -> integer()
                            when
                                is_subtype(Program, integer()),
                                is_subtype(Shadertype, enum()),
                                is_subtype(Name, string()).

getSubroutineIndex(Program, Shadertype, Name) ->
    call(5749,
         <<Program:32/native-unsigned,
           Shadertype:32/native-unsigned,
           (list_to_binary([Name,0]))/binary,
           0:((8 - (length(Name) + 1) rem 8) rem 8)>>).

-spec getActiveSubroutineUniformName(Program,
                                     Shadertype,
                                     Index,
                                     Bufsize) ->
                                        string()
                                        when
                                            is_subtype(Program,
                                                       integer()),
                                            is_subtype(Shadertype,
                                                       enum()),
                                            is_subtype(Index, integer()),
                                            is_subtype(Bufsize,
                                                       integer()).

getActiveSubroutineUniformName(Program, Shadertype, Index, Bufsize) ->
    call(5750,
         <<Program:32/native-unsigned,
           Shadertype:32/native-unsigned,
           Index:32/native-unsigned,
           Bufsize:32/native-signed>>).

-spec getActiveSubroutineName(Program, Shadertype, Index, Bufsize) ->
                                 string()
                                 when
                                     is_subtype(Program, integer()),
                                     is_subtype(Shadertype, enum()),
                                     is_subtype(Index, integer()),
                                     is_subtype(Bufsize, integer()).

getActiveSubroutineName(Program, Shadertype, Index, Bufsize) ->
    call(5751,
         <<Program:32/native-unsigned,
           Shadertype:32/native-unsigned,
           Index:32/native-unsigned,
           Bufsize:32/native-signed>>).

-spec uniformSubroutinesuiv(Shadertype, Indices) -> ok
                               when
                                   is_subtype(Shadertype, enum()),
                                   is_subtype(Indices, [integer()]).

uniformSubroutinesuiv(Shadertype, Indices) ->
    cast(5752,
         <<Shadertype:32/native-unsigned,
           (length(Indices)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Indices
           >>/binary,
           0:(length(Indices) rem 2 * 32)>>).

-spec getUniformSubroutineuiv(Shadertype, Location) ->
                                 {integer(),
                                  integer(),
                                  integer(),
                                  integer(),
                                  integer(),
                                  integer(),
                                  integer(),
                                  integer(),
                                  integer(),
                                  integer(),
                                  integer(),
                                  integer(),
                                  integer(),
                                  integer(),
                                  integer(),
                                  integer()}
                                 when
                                     is_subtype(Shadertype, enum()),
                                     is_subtype(Location, integer()).

getUniformSubroutineuiv(Shadertype, Location) ->
    call(5753,
         <<Shadertype:32/native-unsigned,Location:32/native-signed>>).

-spec getProgramStageiv(Program, Shadertype, Pname) -> integer()
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Shadertype, enum()),
                               is_subtype(Pname, enum()).

getProgramStageiv(Program, Shadertype, Pname) ->
    call(5754,
         <<Program:32/native-unsigned,
           Shadertype:32/native-unsigned,
           Pname:32/native-unsigned>>).

-spec patchParameteri(Pname, Value) -> ok
                         when
                             is_subtype(Pname, enum()),
                             is_subtype(Value, integer()).

patchParameteri(Pname, Value) ->
    cast(5755, <<Pname:32/native-unsigned,Value:32/native-signed>>).

-spec patchParameterfv(Pname, Values) -> ok
                          when
                              is_subtype(Pname, enum()),
                              is_subtype(Values, [float()]).

patchParameterfv(Pname, Values) ->
    cast(5756,
         <<Pname:32/native-unsigned,
           (length(Values)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- Values
           >>/binary,
           0:(length(Values) rem 2 * 32)>>).

-spec bindTransformFeedback(Target, Id) -> ok
                               when
                                   is_subtype(Target, enum()),
                                   is_subtype(Id, integer()).

bindTransformFeedback(Target, Id) ->
    cast(5757, <<Target:32/native-unsigned,Id:32/native-unsigned>>).

-spec deleteTransformFeedbacks(Ids) -> ok
                                  when is_subtype(Ids, [integer()]).

deleteTransformFeedbacks(Ids) ->
    cast(5758,
         <<(length(Ids)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Ids
           >>/binary,
           0:((1 + length(Ids)) rem 2 * 32)>>).

-spec genTransformFeedbacks(N) -> [integer()]
                               when is_subtype(N, integer()).

genTransformFeedbacks(N) ->
    call(5759, <<N:32/native-signed>>).

-spec isTransformFeedback(Id) -> 0 | 1 when is_subtype(Id, integer()).

isTransformFeedback(Id) ->
    call(5760, <<Id:32/native-unsigned>>).

-spec pauseTransformFeedback() -> ok.

pauseTransformFeedback() ->
    cast(5761, <<>>).

-spec resumeTransformFeedback() -> ok.

resumeTransformFeedback() ->
    cast(5762, <<>>).

-spec drawTransformFeedback(Mode, Id) -> ok
                               when
                                   is_subtype(Mode, enum()),
                                   is_subtype(Id, integer()).

drawTransformFeedback(Mode, Id) ->
    cast(5763, <<Mode:32/native-unsigned,Id:32/native-unsigned>>).

-spec drawTransformFeedbackStream(Mode, Id, Stream) -> ok
                                     when
                                         is_subtype(Mode, enum()),
                                         is_subtype(Id, integer()),
                                         is_subtype(Stream, integer()).

drawTransformFeedbackStream(Mode, Id, Stream) ->
    cast(5764,
         <<Mode:32/native-unsigned,
           Id:32/native-unsigned,
           Stream:32/native-unsigned>>).

-spec beginQueryIndexed(Target, Index, Id) -> ok
                           when
                               is_subtype(Target, enum()),
                               is_subtype(Index, integer()),
                               is_subtype(Id, integer()).

beginQueryIndexed(Target, Index, Id) ->
    cast(5765,
         <<Target:32/native-unsigned,
           Index:32/native-unsigned,
           Id:32/native-unsigned>>).

-spec endQueryIndexed(Target, Index) -> ok
                         when
                             is_subtype(Target, enum()),
                             is_subtype(Index, integer()).

endQueryIndexed(Target, Index) ->
    cast(5766, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec getQueryIndexediv(Target, Index, Pname) -> integer()
                           when
                               is_subtype(Target, enum()),
                               is_subtype(Index, integer()),
                               is_subtype(Pname, enum()).

getQueryIndexediv(Target, Index, Pname) ->
    call(5767,
         <<Target:32/native-unsigned,
           Index:32/native-unsigned,
           Pname:32/native-unsigned>>).

-spec releaseShaderCompiler() -> ok.

releaseShaderCompiler() ->
    cast(5768, <<>>).

-spec shaderBinary(Shaders, Binaryformat, Binary) -> ok
                      when
                          is_subtype(Shaders, [integer()]),
                          is_subtype(Binaryformat, enum()),
                          is_subtype(Binary, binary()).

shaderBinary(Shaders, Binaryformat, Binary) ->
    send_bin(Binary),
    cast(5769,
         <<(length(Shaders)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Shaders
           >>/binary,
           0:((1 + length(Shaders)) rem 2 * 32),
           Binaryformat:32/native-unsigned>>).

-spec getShaderPrecisionFormat(Shadertype, Precisiontype) ->
                                  {Range :: {integer(), integer()},
                                   Precision :: integer()}
                                  when
                                      is_subtype(Shadertype, enum()),
                                      is_subtype(Precisiontype, enum()).

getShaderPrecisionFormat(Shadertype, Precisiontype) ->
    call(5770,
         <<Shadertype:32/native-unsigned,
           Precisiontype:32/native-unsigned>>).

-spec depthRangef(N, F) -> ok
                     when is_subtype(N, clamp()), is_subtype(F, clamp()).

depthRangef(N, F) ->
    cast(5771, <<N:32/native-float,F:32/native-float>>).

-spec clearDepthf(D) -> ok when is_subtype(D, clamp()).

clearDepthf(D) ->
    cast(5772, <<D:32/native-float>>).

-spec getProgramBinary(Program, BufSize) ->
                          {BinaryFormat :: enum(), Binary :: binary()}
                          when
                              is_subtype(Program, integer()),
                              is_subtype(BufSize, integer()).

getProgramBinary(Program, BufSize) ->
    call(5773, <<Program:32/native-unsigned,BufSize:32/native-signed>>).

-spec programBinary(Program, BinaryFormat, Binary) -> ok
                       when
                           is_subtype(Program, integer()),
                           is_subtype(BinaryFormat, enum()),
                           is_subtype(Binary, binary()).

programBinary(Program, BinaryFormat, Binary) ->
    send_bin(Binary),
    cast(5774,
         <<Program:32/native-unsigned,BinaryFormat:32/native-unsigned>>).

-spec programParameteri(Program, Pname, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Pname, enum()),
                               is_subtype(Value, integer()).

programParameteri(Program, Pname, Value) ->
    cast(5775,
         <<Program:32/native-unsigned,
           Pname:32/native-unsigned,
           Value:32/native-signed>>).

-spec useProgramStages(Pipeline, Stages, Program) -> ok
                          when
                              is_subtype(Pipeline, integer()),
                              is_subtype(Stages, integer()),
                              is_subtype(Program, integer()).

useProgramStages(Pipeline, Stages, Program) ->
    cast(5776,
         <<Pipeline:32/native-unsigned,
           Stages:32/native-unsigned,
           Program:32/native-unsigned>>).

-spec activeShaderProgram(Pipeline, Program) -> ok
                             when
                                 is_subtype(Pipeline, integer()),
                                 is_subtype(Program, integer()).

activeShaderProgram(Pipeline, Program) ->
    cast(5777,
         <<Pipeline:32/native-unsigned,Program:32/native-unsigned>>).

-spec createShaderProgramv(Type, Strings) -> integer()
                              when
                                  is_subtype(Type, enum()),
                                  is_subtype(Strings, [string()]).

createShaderProgramv(Type, Strings) ->
    StringsTemp =
        list_to_binary([ 
                        [Str,0] ||
                            Str <- Strings
                       ]),
    call(5778,
         <<Type:32/native-unsigned,
           (length(Strings)):32/native-unsigned,
           (size(StringsTemp)):32/native-unsigned,
           StringsTemp/binary,
           0:((8 - (size(StringsTemp) + 0) rem 8) rem 8)>>).

-spec bindProgramPipeline(Pipeline) -> ok
                             when is_subtype(Pipeline, integer()).

bindProgramPipeline(Pipeline) ->
    cast(5779, <<Pipeline:32/native-unsigned>>).

-spec deleteProgramPipelines(Pipelines) -> ok
                                when is_subtype(Pipelines, [integer()]).

deleteProgramPipelines(Pipelines) ->
    cast(5780,
         <<(length(Pipelines)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Pipelines
           >>/binary,
           0:((1 + length(Pipelines)) rem 2 * 32)>>).

-spec genProgramPipelines(N) -> [integer()]
                             when is_subtype(N, integer()).

genProgramPipelines(N) ->
    call(5781, <<N:32/native-signed>>).

-spec isProgramPipeline(Pipeline) -> 0 | 1
                           when is_subtype(Pipeline, integer()).

isProgramPipeline(Pipeline) ->
    call(5782, <<Pipeline:32/native-unsigned>>).

-spec getProgramPipelineiv(Pipeline, Pname) -> integer()
                              when
                                  is_subtype(Pipeline, integer()),
                                  is_subtype(Pname, enum()).

getProgramPipelineiv(Pipeline, Pname) ->
    call(5783, <<Pipeline:32/native-unsigned,Pname:32/native-unsigned>>).

-spec programUniform1i(Program, Location, V0) -> ok
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Location, integer()),
                              is_subtype(V0, integer()).

programUniform1i(Program, Location, V0) ->
    cast(5784,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:32/native-signed>>).

-spec programUniform1iv(Program, Location, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(Value, [integer()]).

programUniform1iv(Program, Location, Value) ->
    cast(5785,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<C:32/native-signed>> ||
                 C <- Value
           >>/binary,
           0:((1 + length(Value)) rem 2 * 32)>>).

-spec programUniform1f(Program, Location, V0) -> ok
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Location, integer()),
                              is_subtype(V0, float()).

programUniform1f(Program, Location, V0) ->
    cast(5786,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:32/native-float>>).

-spec programUniform1fv(Program, Location, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(Value, [float()]).

programUniform1fv(Program, Location, Value) ->
    cast(5787,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<C:32/native-float>> ||
                 C <- Value
           >>/binary,
           0:((1 + length(Value)) rem 2 * 32)>>).

-spec programUniform1d(Program, Location, V0) -> ok
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Location, integer()),
                              is_subtype(V0, float()).

programUniform1d(Program, Location, V0) ->
    cast(5788,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:64/native-float>>).

-spec programUniform1dv(Program, Location, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(Value, [float()]).

programUniform1dv(Program, Location, Value) ->
    cast(5789,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<C:64/native-float>> ||
                 C <- Value
           >>/binary>>).

-spec programUniform1ui(Program, Location, V0) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(V0, integer()).

programUniform1ui(Program, Location, V0) ->
    cast(5790,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:32/native-unsigned>>).

-spec programUniform1uiv(Program, Location, Value) -> ok
                            when
                                is_subtype(Program, integer()),
                                is_subtype(Location, integer()),
                                is_subtype(Value, [integer()]).

programUniform1uiv(Program, Location, Value) ->
    cast(5791,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Value
           >>/binary,
           0:((1 + length(Value)) rem 2 * 32)>>).

-spec programUniform2i(Program, Location, V0, V1) -> ok
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Location, integer()),
                              is_subtype(V0, integer()),
                              is_subtype(V1, integer()).

programUniform2i(Program, Location, V0, V1) ->
    cast(5792,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:32/native-signed,
           V1:32/native-signed>>).

-spec programUniform2iv(Program, Location, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(Value,
                                          [{integer(), integer()}]).

programUniform2iv(Program, Location, Value) ->
    cast(5793,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-signed,V2:32/native-signed>> ||
                 {V1,V2} <- Value
           >>/binary>>).

-spec programUniform2f(Program, Location, V0, V1) -> ok
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Location, integer()),
                              is_subtype(V0, float()),
                              is_subtype(V1, float()).

programUniform2f(Program, Location, V0, V1) ->
    cast(5794,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:32/native-float,
           V1:32/native-float>>).

-spec programUniform2fv(Program, Location, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(Value, [{float(), float()}]).

programUniform2fv(Program, Location, Value) ->
    cast(5795,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,V2:32/native-float>> ||
                 {V1,V2} <- Value
           >>/binary>>).

-spec programUniform2d(Program, Location, V0, V1) -> ok
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Location, integer()),
                              is_subtype(V0, float()),
                              is_subtype(V1, float()).

programUniform2d(Program, Location, V0, V1) ->
    cast(5796,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:64/native-float,
           V1:64/native-float>>).

-spec programUniform2dv(Program, Location, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(Value, [{float(), float()}]).

programUniform2dv(Program, Location, Value) ->
    cast(5797,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,V2:64/native-float>> ||
                 {V1,V2} <- Value
           >>/binary>>).

-spec programUniform2ui(Program, Location, V0, V1) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(V0, integer()),
                               is_subtype(V1, integer()).

programUniform2ui(Program, Location, V0, V1) ->
    cast(5798,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:32/native-unsigned,
           V1:32/native-unsigned>>).

-spec programUniform2uiv(Program, Location, Value) -> ok
                            when
                                is_subtype(Program, integer()),
                                is_subtype(Location, integer()),
                                is_subtype(Value,
                                           [{integer(), integer()}]).

programUniform2uiv(Program, Location, Value) ->
    cast(5799,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-unsigned,V2:32/native-unsigned>> ||
                 {V1,V2} <- Value
           >>/binary>>).

-spec programUniform3i(Program, Location, V0, V1, V2) -> ok
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Location, integer()),
                              is_subtype(V0, integer()),
                              is_subtype(V1, integer()),
                              is_subtype(V2, integer()).

programUniform3i(Program, Location, V0, V1, V2) ->
    cast(5800,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:32/native-signed,
           V1:32/native-signed,
           V2:32/native-signed>>).

-spec programUniform3iv(Program, Location, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(Value,
                                          [{integer(),
                                            integer(),
                                            integer()}]).

programUniform3iv(Program, Location, Value) ->
    cast(5801,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-signed,
               V2:32/native-signed,
               V3:32/native-signed>> ||
                 {V1,V2,V3} <- Value
           >>/binary>>).

-spec programUniform3f(Program, Location, V0, V1, V2) -> ok
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Location, integer()),
                              is_subtype(V0, float()),
                              is_subtype(V1, float()),
                              is_subtype(V2, float()).

programUniform3f(Program, Location, V0, V1, V2) ->
    cast(5802,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:32/native-float,
           V1:32/native-float,
           V2:32/native-float>>).

-spec programUniform3fv(Program, Location, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(Value,
                                          [{float(), float(), float()}]).

programUniform3fv(Program, Location, Value) ->
    cast(5803,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,V2:32/native-float,V3:32/native-float>> ||
                 {V1,V2,V3} <- Value
           >>/binary>>).

-spec programUniform3d(Program, Location, V0, V1, V2) -> ok
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Location, integer()),
                              is_subtype(V0, float()),
                              is_subtype(V1, float()),
                              is_subtype(V2, float()).

programUniform3d(Program, Location, V0, V1, V2) ->
    cast(5804,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:64/native-float,
           V1:64/native-float,
           V2:64/native-float>>).

-spec programUniform3dv(Program, Location, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(Value,
                                          [{float(), float(), float()}]).

programUniform3dv(Program, Location, Value) ->
    cast(5805,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,V2:64/native-float,V3:64/native-float>> ||
                 {V1,V2,V3} <- Value
           >>/binary>>).

-spec programUniform3ui(Program, Location, V0, V1, V2) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(V0, integer()),
                               is_subtype(V1, integer()),
                               is_subtype(V2, integer()).

programUniform3ui(Program, Location, V0, V1, V2) ->
    cast(5806,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:32/native-unsigned,
           V1:32/native-unsigned,
           V2:32/native-unsigned>>).

-spec programUniform3uiv(Program, Location, Value) -> ok
                            when
                                is_subtype(Program, integer()),
                                is_subtype(Location, integer()),
                                is_subtype(Value,
                                           [{integer(),
                                             integer(),
                                             integer()}]).

programUniform3uiv(Program, Location, Value) ->
    cast(5807,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-unsigned,
               V2:32/native-unsigned,
               V3:32/native-unsigned>> ||
                 {V1,V2,V3} <- Value
           >>/binary>>).

-spec programUniform4i(Program, Location, V0, V1, V2, V3) -> ok
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Location, integer()),
                              is_subtype(V0, integer()),
                              is_subtype(V1, integer()),
                              is_subtype(V2, integer()),
                              is_subtype(V3, integer()).

programUniform4i(Program, Location, V0, V1, V2, V3) ->
    cast(5808,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:32/native-signed,
           V1:32/native-signed,
           V2:32/native-signed,
           V3:32/native-signed>>).

-spec programUniform4iv(Program, Location, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(Value,
                                          [{integer(),
                                            integer(),
                                            integer(),
                                            integer()}]).

programUniform4iv(Program, Location, Value) ->
    cast(5809,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-signed,
               V2:32/native-signed,
               V3:32/native-signed,
               V4:32/native-signed>> ||
                 {V1,V2,V3,V4} <- Value
           >>/binary>>).

-spec programUniform4f(Program, Location, V0, V1, V2, V3) -> ok
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Location, integer()),
                              is_subtype(V0, float()),
                              is_subtype(V1, float()),
                              is_subtype(V2, float()),
                              is_subtype(V3, float()).

programUniform4f(Program, Location, V0, V1, V2, V3) ->
    cast(5810,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:32/native-float,
           V1:32/native-float,
           V2:32/native-float,
           V3:32/native-float>>).

-spec programUniform4fv(Program, Location, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(Value,
                                          [{float(),
                                            float(),
                                            float(),
                                            float()}]).

programUniform4fv(Program, Location, Value) ->
    cast(5811,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float>> ||
                 {V1,V2,V3,V4} <- Value
           >>/binary>>).

-spec programUniform4d(Program, Location, V0, V1, V2, V3) -> ok
                          when
                              is_subtype(Program, integer()),
                              is_subtype(Location, integer()),
                              is_subtype(V0, float()),
                              is_subtype(V1, float()),
                              is_subtype(V2, float()),
                              is_subtype(V3, float()).

programUniform4d(Program, Location, V0, V1, V2, V3) ->
    cast(5812,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:64/native-float,
           V1:64/native-float,
           V2:64/native-float,
           V3:64/native-float>>).

-spec programUniform4dv(Program, Location, Value) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(Value,
                                          [{float(),
                                            float(),
                                            float(),
                                            float()}]).

programUniform4dv(Program, Location, Value) ->
    cast(5813,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float>> ||
                 {V1,V2,V3,V4} <- Value
           >>/binary>>).

-spec programUniform4ui(Program, Location, V0, V1, V2, V3) -> ok
                           when
                               is_subtype(Program, integer()),
                               is_subtype(Location, integer()),
                               is_subtype(V0, integer()),
                               is_subtype(V1, integer()),
                               is_subtype(V2, integer()),
                               is_subtype(V3, integer()).

programUniform4ui(Program, Location, V0, V1, V2, V3) ->
    cast(5814,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           V0:32/native-unsigned,
           V1:32/native-unsigned,
           V2:32/native-unsigned,
           V3:32/native-unsigned>>).

-spec programUniform4uiv(Program, Location, Value) -> ok
                            when
                                is_subtype(Program, integer()),
                                is_subtype(Location, integer()),
                                is_subtype(Value,
                                           [{integer(),
                                             integer(),
                                             integer(),
                                             integer()}]).

programUniform4uiv(Program, Location, Value) ->
    cast(5815,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-unsigned,
               V2:32/native-unsigned,
               V3:32/native-unsigned,
               V4:32/native-unsigned>> ||
                 {V1,V2,V3,V4} <- Value
           >>/binary>>).

-spec programUniformMatrix2fv(Program, Location, Transpose, Value) -> ok
                                 when
                                     is_subtype(Program, integer()),
                                     is_subtype(Location, integer()),
                                     is_subtype(Transpose, 0 | 1),
                                     is_subtype(Value,
                                                [{float(),
                                                  float(),
                                                  float(),
                                                  float()}]).

programUniformMatrix2fv(Program, Location, Transpose, Value) ->
    cast(5816,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float>> ||
                 {V1,V2,V3,V4} <- Value
           >>/binary>>).

-spec programUniformMatrix3fv(Program, Location, Transpose, Value) -> ok
                                 when
                                     is_subtype(Program, integer()),
                                     is_subtype(Location, integer()),
                                     is_subtype(Transpose, 0 | 1),
                                     is_subtype(Value,
                                                [{float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float()}]).

programUniformMatrix3fv(Program, Location, Transpose, Value) ->
    cast(5817,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float,
               V7:32/native-float,
               V8:32/native-float,
               V9:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8,V9} <- Value
           >>/binary>>).

-spec programUniformMatrix4fv(Program, Location, Transpose, Value) -> ok
                                 when
                                     is_subtype(Program, integer()),
                                     is_subtype(Location, integer()),
                                     is_subtype(Transpose, 0 | 1),
                                     is_subtype(Value,
                                                [{float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float()}]).

programUniformMatrix4fv(Program, Location, Transpose, Value) ->
    cast(5818,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float,
               V7:32/native-float,
               V8:32/native-float,
               V9:32/native-float,
               V10:32/native-float,
               V11:32/native-float,
               V12:32/native-float,
               V13:32/native-float,
               V14:32/native-float,
               V15:32/native-float,
               V16:32/native-float>> ||
                 {V1,
                  V2,
                  V3,
                  V4,
                  V5,
                  V6,
                  V7,
                  V8,
                  V9,
                  V10,
                  V11,
                  V12,
                  V13,
                  V14,
                  V15,
                  V16} <-
                     Value
           >>/binary>>).

-spec programUniformMatrix2dv(Program, Location, Transpose, Value) -> ok
                                 when
                                     is_subtype(Program, integer()),
                                     is_subtype(Location, integer()),
                                     is_subtype(Transpose, 0 | 1),
                                     is_subtype(Value,
                                                [{float(),
                                                  float(),
                                                  float(),
                                                  float()}]).

programUniformMatrix2dv(Program, Location, Transpose, Value) ->
    cast(5819,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:56,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float>> ||
                 {V1,V2,V3,V4} <- Value
           >>/binary>>).

-spec programUniformMatrix3dv(Program, Location, Transpose, Value) -> ok
                                 when
                                     is_subtype(Program, integer()),
                                     is_subtype(Location, integer()),
                                     is_subtype(Transpose, 0 | 1),
                                     is_subtype(Value,
                                                [{float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float()}]).

programUniformMatrix3dv(Program, Location, Transpose, Value) ->
    cast(5820,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:56,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float,
               V7:64/native-float,
               V8:64/native-float,
               V9:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8,V9} <- Value
           >>/binary>>).

-spec programUniformMatrix4dv(Program, Location, Transpose, Value) -> ok
                                 when
                                     is_subtype(Program, integer()),
                                     is_subtype(Location, integer()),
                                     is_subtype(Transpose, 0 | 1),
                                     is_subtype(Value,
                                                [{float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float(),
                                                  float()}]).

programUniformMatrix4dv(Program, Location, Transpose, Value) ->
    cast(5821,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:56,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float,
               V7:64/native-float,
               V8:64/native-float,
               V9:64/native-float,
               V10:64/native-float,
               V11:64/native-float,
               V12:64/native-float,
               V13:64/native-float,
               V14:64/native-float,
               V15:64/native-float,
               V16:64/native-float>> ||
                 {V1,
                  V2,
                  V3,
                  V4,
                  V5,
                  V6,
                  V7,
                  V8,
                  V9,
                  V10,
                  V11,
                  V12,
                  V13,
                  V14,
                  V15,
                  V16} <-
                     Value
           >>/binary>>).

-spec programUniformMatrix2x3fv(Program, Location, Transpose, Value) ->
                                   ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Location, integer()),
                                       is_subtype(Transpose, 0 | 1),
                                       is_subtype(Value,
                                                  [{float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float()}]).

programUniformMatrix2x3fv(Program, Location, Transpose, Value) ->
    cast(5822,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6} <- Value
           >>/binary>>).

-spec programUniformMatrix3x2fv(Program, Location, Transpose, Value) ->
                                   ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Location, integer()),
                                       is_subtype(Transpose, 0 | 1),
                                       is_subtype(Value,
                                                  [{float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float()}]).

programUniformMatrix3x2fv(Program, Location, Transpose, Value) ->
    cast(5823,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6} <- Value
           >>/binary>>).

-spec programUniformMatrix2x4fv(Program, Location, Transpose, Value) ->
                                   ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Location, integer()),
                                       is_subtype(Transpose, 0 | 1),
                                       is_subtype(Value,
                                                  [{float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float()}]).

programUniformMatrix2x4fv(Program, Location, Transpose, Value) ->
    cast(5824,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float,
               V7:32/native-float,
               V8:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8} <- Value
           >>/binary>>).

-spec programUniformMatrix4x2fv(Program, Location, Transpose, Value) ->
                                   ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Location, integer()),
                                       is_subtype(Transpose, 0 | 1),
                                       is_subtype(Value,
                                                  [{float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float()}]).

programUniformMatrix4x2fv(Program, Location, Transpose, Value) ->
    cast(5825,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float,
               V7:32/native-float,
               V8:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8} <- Value
           >>/binary>>).

-spec programUniformMatrix3x4fv(Program, Location, Transpose, Value) ->
                                   ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Location, integer()),
                                       is_subtype(Transpose, 0 | 1),
                                       is_subtype(Value,
                                                  [{float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float()}]).

programUniformMatrix3x4fv(Program, Location, Transpose, Value) ->
    cast(5826,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float,
               V7:32/native-float,
               V8:32/native-float,
               V9:32/native-float,
               V10:32/native-float,
               V11:32/native-float,
               V12:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12} <- Value
           >>/binary>>).

-spec programUniformMatrix4x3fv(Program, Location, Transpose, Value) ->
                                   ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Location, integer()),
                                       is_subtype(Transpose, 0 | 1),
                                       is_subtype(Value,
                                                  [{float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float()}]).

programUniformMatrix4x3fv(Program, Location, Transpose, Value) ->
    cast(5827,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:24,
           (length(Value)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float,
               V5:32/native-float,
               V6:32/native-float,
               V7:32/native-float,
               V8:32/native-float,
               V9:32/native-float,
               V10:32/native-float,
               V11:32/native-float,
               V12:32/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12} <- Value
           >>/binary>>).

-spec programUniformMatrix2x3dv(Program, Location, Transpose, Value) ->
                                   ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Location, integer()),
                                       is_subtype(Transpose, 0 | 1),
                                       is_subtype(Value,
                                                  [{float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float()}]).

programUniformMatrix2x3dv(Program, Location, Transpose, Value) ->
    cast(5828,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:56,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6} <- Value
           >>/binary>>).

-spec programUniformMatrix3x2dv(Program, Location, Transpose, Value) ->
                                   ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Location, integer()),
                                       is_subtype(Transpose, 0 | 1),
                                       is_subtype(Value,
                                                  [{float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float()}]).

programUniformMatrix3x2dv(Program, Location, Transpose, Value) ->
    cast(5829,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:56,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6} <- Value
           >>/binary>>).

-spec programUniformMatrix2x4dv(Program, Location, Transpose, Value) ->
                                   ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Location, integer()),
                                       is_subtype(Transpose, 0 | 1),
                                       is_subtype(Value,
                                                  [{float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float()}]).

programUniformMatrix2x4dv(Program, Location, Transpose, Value) ->
    cast(5830,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:56,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float,
               V7:64/native-float,
               V8:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8} <- Value
           >>/binary>>).

-spec programUniformMatrix4x2dv(Program, Location, Transpose, Value) ->
                                   ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Location, integer()),
                                       is_subtype(Transpose, 0 | 1),
                                       is_subtype(Value,
                                                  [{float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float()}]).

programUniformMatrix4x2dv(Program, Location, Transpose, Value) ->
    cast(5831,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:56,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float,
               V7:64/native-float,
               V8:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8} <- Value
           >>/binary>>).

-spec programUniformMatrix3x4dv(Program, Location, Transpose, Value) ->
                                   ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Location, integer()),
                                       is_subtype(Transpose, 0 | 1),
                                       is_subtype(Value,
                                                  [{float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float()}]).

programUniformMatrix3x4dv(Program, Location, Transpose, Value) ->
    cast(5832,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:56,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float,
               V7:64/native-float,
               V8:64/native-float,
               V9:64/native-float,
               V10:64/native-float,
               V11:64/native-float,
               V12:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12} <- Value
           >>/binary>>).

-spec programUniformMatrix4x3dv(Program, Location, Transpose, Value) ->
                                   ok
                                   when
                                       is_subtype(Program, integer()),
                                       is_subtype(Location, integer()),
                                       is_subtype(Transpose, 0 | 1),
                                       is_subtype(Value,
                                                  [{float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float(),
                                                    float()}]).

programUniformMatrix4x3dv(Program, Location, Transpose, Value) ->
    cast(5833,
         <<Program:32/native-unsigned,
           Location:32/native-signed,
           Transpose:8/native-unsigned,
           0:56,
           (length(Value)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,
               V2:64/native-float,
               V3:64/native-float,
               V4:64/native-float,
               V5:64/native-float,
               V6:64/native-float,
               V7:64/native-float,
               V8:64/native-float,
               V9:64/native-float,
               V10:64/native-float,
               V11:64/native-float,
               V12:64/native-float>> ||
                 {V1,V2,V3,V4,V5,V6,V7,V8,V9,V10,V11,V12} <- Value
           >>/binary>>).

-spec validateProgramPipeline(Pipeline) -> ok
                                 when is_subtype(Pipeline, integer()).

validateProgramPipeline(Pipeline) ->
    cast(5834, <<Pipeline:32/native-unsigned>>).

-spec getProgramPipelineInfoLog(Pipeline, BufSize) -> string()
                                   when
                                       is_subtype(Pipeline, integer()),
                                       is_subtype(BufSize, integer()).

getProgramPipelineInfoLog(Pipeline, BufSize) ->
    call(5835, <<Pipeline:32/native-unsigned,BufSize:32/native-signed>>).

-spec vertexAttribL1d(Index, X) -> ok
                         when
                             is_subtype(Index, integer()),
                             is_subtype(X, float()).

vertexAttribL1d(Index, X) ->
    cast(5836, <<Index:32/native-unsigned,0:32,X:64/native-float>>).

-spec vertexAttribL2d(Index, X, Y) -> ok
                         when
                             is_subtype(Index, integer()),
                             is_subtype(X, float()),
                             is_subtype(Y, float()).

vertexAttribL2d(Index, X, Y) ->
    cast(5837,
         <<Index:32/native-unsigned,
           0:32,
           X:64/native-float,
           Y:64/native-float>>).

-spec vertexAttribL3d(Index, X, Y, Z) -> ok
                         when
                             is_subtype(Index, integer()),
                             is_subtype(X, float()),
                             is_subtype(Y, float()),
                             is_subtype(Z, float()).

vertexAttribL3d(Index, X, Y, Z) ->
    cast(5838,
         <<Index:32/native-unsigned,
           0:32,
           X:64/native-float,
           Y:64/native-float,
           Z:64/native-float>>).

-spec vertexAttribL4d(Index, X, Y, Z, W) -> ok
                         when
                             is_subtype(Index, integer()),
                             is_subtype(X, float()),
                             is_subtype(Y, float()),
                             is_subtype(Z, float()),
                             is_subtype(W, float()).

vertexAttribL4d(Index, X, Y, Z, W) ->
    cast(5839,
         <<Index:32/native-unsigned,
           0:32,
           X:64/native-float,
           Y:64/native-float,
           Z:64/native-float,
           W:64/native-float>>).

-spec vertexAttribL1dv(Index :: integer(), V) -> ok
                          when is_subtype(V, {X :: float()}).

vertexAttribL1dv(Index, {X}) ->
    vertexAttribL1d(Index, X).

-spec vertexAttribL2dv(Index :: integer(), V) -> ok
                          when
                              is_subtype(V,
                                         {X :: float(), Y :: float()}).

vertexAttribL2dv(Index, {X,Y}) ->
    vertexAttribL2d(Index, X, Y).

-spec vertexAttribL3dv(Index :: integer(), V) -> ok
                          when
                              is_subtype(V,
                                         {X :: float(),
                                          Y :: float(),
                                          Z :: float()}).

vertexAttribL3dv(Index, {X,Y,Z}) ->
    vertexAttribL3d(Index, X, Y, Z).

-spec vertexAttribL4dv(Index :: integer(), V) -> ok
                          when
                              is_subtype(V,
                                         {X :: float(),
                                          Y :: float(),
                                          Z :: float(),
                                          W :: float()}).

vertexAttribL4dv(Index, {X,Y,Z,W}) ->
    vertexAttribL4d(Index, X, Y, Z, W).

-spec vertexAttribLPointer(Index, Size, Type, Stride, Pointer) -> ok
                              when
                                  is_subtype(Index, integer()),
                                  is_subtype(Size, integer()),
                                  is_subtype(Type, enum()),
                                  is_subtype(Stride, integer()),
                                  is_subtype(Pointer, offset() | mem()).

vertexAttribLPointer(Index, Size, Type, Stride, Pointer)
    when is_integer(Pointer) ->
    cast(5840,
         <<Index:32/native-unsigned,
           Size:32/native-signed,
           Type:32/native-unsigned,
           Stride:32/native-signed,
           Pointer:32/native-unsigned>>);
vertexAttribLPointer(Index, Size, Type, Stride, Pointer) ->
    send_bin(Pointer),
    cast(5841,
         <<Index:32/native-unsigned,
           Size:32/native-signed,
           Type:32/native-unsigned,
           Stride:32/native-signed>>).

-spec getVertexAttribLdv(Index, Pname) ->
                            {float(), float(), float(), float()}
                            when
                                is_subtype(Index, integer()),
                                is_subtype(Pname, enum()).

getVertexAttribLdv(Index, Pname) ->
    call(5842, <<Index:32/native-unsigned,Pname:32/native-unsigned>>).

-spec viewportArrayv(First, V) -> ok
                        when
                            is_subtype(First, integer()),
                            is_subtype(V,
                                       [{float(),
                                         float(),
                                         float(),
                                         float()}]).

viewportArrayv(First, V) ->
    cast(5843,
         <<First:32/native-unsigned,
           (length(V)):32/native-unsigned,
           << 
             <<V1:32/native-float,
               V2:32/native-float,
               V3:32/native-float,
               V4:32/native-float>> ||
                 {V1,V2,V3,V4} <- V
           >>/binary>>).

-spec viewportIndexedf(Index, X, Y, W, H) -> ok
                          when
                              is_subtype(Index, integer()),
                              is_subtype(X, float()),
                              is_subtype(Y, float()),
                              is_subtype(W, float()),
                              is_subtype(H, float()).

viewportIndexedf(Index, X, Y, W, H) ->
    cast(5844,
         <<Index:32/native-unsigned,
           X:32/native-float,
           Y:32/native-float,
           W:32/native-float,
           H:32/native-float>>).

-spec viewportIndexedfv(Index, V) -> ok
                           when
                               is_subtype(Index, integer()),
                               is_subtype(V,
                                          {float(),
                                           float(),
                                           float(),
                                           float()}).

viewportIndexedfv(Index, {V1,V2,V3,V4}) ->
    cast(5845,
         <<Index:32/native-unsigned,
           V1:32/native-float,
           V2:32/native-float,
           V3:32/native-float,
           V4:32/native-float>>).

-spec scissorArrayv(First, V) -> ok
                       when
                           is_subtype(First, integer()),
                           is_subtype(V,
                                      [{integer(),
                                        integer(),
                                        integer(),
                                        integer()}]).

scissorArrayv(First, V) ->
    cast(5846,
         <<First:32/native-unsigned,
           (length(V)):32/native-unsigned,
           << 
             <<V1:32/native-signed,
               V2:32/native-signed,
               V3:32/native-signed,
               V4:32/native-signed>> ||
                 {V1,V2,V3,V4} <- V
           >>/binary>>).

-spec scissorIndexed(Index, Left, Bottom, Width, Height) -> ok
                        when
                            is_subtype(Index, integer()),
                            is_subtype(Left, integer()),
                            is_subtype(Bottom, integer()),
                            is_subtype(Width, integer()),
                            is_subtype(Height, integer()).

scissorIndexed(Index, Left, Bottom, Width, Height) ->
    cast(5847,
         <<Index:32/native-unsigned,
           Left:32/native-signed,
           Bottom:32/native-signed,
           Width:32/native-signed,
           Height:32/native-signed>>).

-spec scissorIndexedv(Index, V) -> ok
                         when
                             is_subtype(Index, integer()),
                             is_subtype(V,
                                        {integer(),
                                         integer(),
                                         integer(),
                                         integer()}).

scissorIndexedv(Index, {V1,V2,V3,V4}) ->
    cast(5848,
         <<Index:32/native-unsigned,
           V1:32/native-signed,
           V2:32/native-signed,
           V3:32/native-signed,
           V4:32/native-signed>>).

-spec depthRangeArrayv(First, V) -> ok
                          when
                              is_subtype(First, integer()),
                              is_subtype(V, [{clamp(), clamp()}]).

depthRangeArrayv(First, V) ->
    cast(5849,
         <<First:32/native-unsigned,
           0:32,
           (length(V)):32/native-unsigned,
           0:32,
           << 
             <<V1:64/native-float,V2:64/native-float>> ||
                 {V1,V2} <- V
           >>/binary>>).

-spec depthRangeIndexed(Index, N, F) -> ok
                           when
                               is_subtype(Index, integer()),
                               is_subtype(N, clamp()),
                               is_subtype(F, clamp()).

depthRangeIndexed(Index, N, F) ->
    cast(5850,
         <<Index:32/native-unsigned,
           0:32,
           N:64/native-float,
           F:64/native-float>>).

-spec getFloati_v(Target, Index) -> [float()]
                     when
                         is_subtype(Target, enum()),
                         is_subtype(Index, integer()).

getFloati_v(Target, Index) ->
    call(5851, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec getDoublei_v(Target, Index) -> [float()]
                      when
                          is_subtype(Target, enum()),
                          is_subtype(Index, integer()).

getDoublei_v(Target, Index) ->
    call(5852, <<Target:32/native-unsigned,Index:32/native-unsigned>>).

-spec debugMessageControlARB(Source, Type, Severity, Ids, Enabled) -> ok
                                when
                                    is_subtype(Source, enum()),
                                    is_subtype(Type, enum()),
                                    is_subtype(Severity, enum()),
                                    is_subtype(Ids, [integer()]),
                                    is_subtype(Enabled, 0 | 1).

debugMessageControlARB(Source, Type, Severity, Ids, Enabled) ->
    cast(5853,
         <<Source:32/native-unsigned,
           Type:32/native-unsigned,
           Severity:32/native-unsigned,
           (length(Ids)):32/native-unsigned,
           << 
             <<C:32/native-unsigned>> ||
                 C <- Ids
           >>/binary,
           0:(length(Ids) rem 2 * 32),
           Enabled:8/native-unsigned>>).

-spec debugMessageInsertARB(Source, Type, Id, Severity, Buf) -> ok
                               when
                                   is_subtype(Source, enum()),
                                   is_subtype(Type, enum()),
                                   is_subtype(Id, integer()),
                                   is_subtype(Severity, enum()),
                                   is_subtype(Buf, string()).

debugMessageInsertARB(Source, Type, Id, Severity, Buf) ->
    cast(5854,
         <<Source:32/native-unsigned,
           Type:32/native-unsigned,
           Id:32/native-unsigned,
           Severity:32/native-unsigned,
           (list_to_binary([Buf,0]))/binary,
           0:((8 - (length(Buf) + 1) rem 8) rem 8)>>).

-spec getDebugMessageLogARB(Count, Bufsize) ->
                               {integer(),
                                Sources :: [enum()],
                                Types :: [enum()],
                                Ids :: [integer()],
                                Severities :: [enum()],
                                MessageLog :: [string()]}
                               when
                                   is_subtype(Count, integer()),
                                   is_subtype(Bufsize, integer()).

getDebugMessageLogARB(Count, Bufsize) ->
    call(5855, <<Count:32/native-unsigned,Bufsize:32/native-signed>>).

-spec getGraphicsResetStatusARB() -> enum().

getGraphicsResetStatusARB() ->
    call(5856, <<>>).

-spec drawArraysInstancedBaseInstance(Mode,
                                      First,
                                      Count,
                                      Primcount,
                                      Baseinstance) ->
                                         ok
                                         when
                                             is_subtype(Mode, enum()),
                                             is_subtype(First,
                                                        integer()),
                                             is_subtype(Count,
                                                        integer()),
                                             is_subtype(Primcount,
                                                        integer()),
                                             is_subtype(Baseinstance,
                                                        integer()).

drawArraysInstancedBaseInstance(Mode,
                                First,
                                Count,
                                Primcount,
                                Baseinstance) ->
    cast(5857,
         <<Mode:32/native-unsigned,
           First:32/native-signed,
           Count:32/native-signed,
           Primcount:32/native-signed,
           Baseinstance:32/native-unsigned>>).

-spec drawElementsInstancedBaseInstance(Mode,
                                        Count,
                                        Type,
                                        Indices,
                                        Primcount,
                                        Baseinstance) ->
                                           ok
                                           when
                                               is_subtype(Mode, enum()),
                                               is_subtype(Count,
                                                          integer()),
                                               is_subtype(Type, enum()),
                                               is_subtype(Indices,
                                                          offset() |
                                                          mem()),
                                               is_subtype(Primcount,
                                                          integer()),
                                               is_subtype(Baseinstance,
                                                          integer()).

drawElementsInstancedBaseInstance(Mode,
                                  Count,
                                  Type,
                                  Indices,
                                  Primcount,
                                  Baseinstance)
    when is_integer(Indices) ->
    cast(5858,
         <<Mode:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Indices:32/native-unsigned,
           Primcount:32/native-signed,
           Baseinstance:32/native-unsigned>>);
drawElementsInstancedBaseInstance(Mode,
                                  Count,
                                  Type,
                                  Indices,
                                  Primcount,
                                  Baseinstance) ->
    send_bin(Indices),
    cast(5859,
         <<Mode:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Primcount:32/native-signed,
           Baseinstance:32/native-unsigned>>).

-spec drawElementsInstancedBaseVertexBaseInstance(Mode,
                                                  Count,
                                                  Type,
                                                  Indices,
                                                  Primcount,
                                                  Basevertex,
                                                  Baseinstance) ->
                                                     ok
                                                     when
                                                         is_subtype(Mode,
                                                                    enum()),
                                                         is_subtype(Count,
                                                                    integer()),
                                                         is_subtype(Type,
                                                                    enum()),
                                                         is_subtype(Indices,
                                                                    offset() |
                                                                    mem()),
                                                         is_subtype(Primcount,
                                                                    integer()),
                                                         is_subtype(Basevertex,
                                                                    integer()),
                                                         is_subtype(Baseinstance,
                                                                    integer()).

drawElementsInstancedBaseVertexBaseInstance(Mode,
                                            Count,
                                            Type,
                                            Indices,
                                            Primcount,
                                            Basevertex,
                                            Baseinstance)
    when is_integer(Indices) ->
    cast(5860,
         <<Mode:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Indices:32/native-unsigned,
           Primcount:32/native-signed,
           Basevertex:32/native-signed,
           Baseinstance:32/native-unsigned>>);
drawElementsInstancedBaseVertexBaseInstance(Mode,
                                            Count,
                                            Type,
                                            Indices,
                                            Primcount,
                                            Basevertex,
                                            Baseinstance) ->
    send_bin(Indices),
    cast(5861,
         <<Mode:32/native-unsigned,
           Count:32/native-signed,
           Type:32/native-unsigned,
           Primcount:32/native-signed,
           Basevertex:32/native-signed,
           Baseinstance:32/native-unsigned>>).

-spec drawTransformFeedbackInstanced(Mode, Id, Primcount) -> ok
                                        when
                                            is_subtype(Mode, enum()),
                                            is_subtype(Id, integer()),
                                            is_subtype(Primcount,
                                                       integer()).

drawTransformFeedbackInstanced(Mode, Id, Primcount) ->
    cast(5862,
         <<Mode:32/native-unsigned,
           Id:32/native-unsigned,
           Primcount:32/native-signed>>).

-spec drawTransformFeedbackStreamInstanced(Mode, Id, Stream, Primcount) ->
                                              ok
                                              when
                                                  is_subtype(Mode,
                                                             enum()),
                                                  is_subtype(Id,
                                                             integer()),
                                                  is_subtype(Stream,
                                                             integer()),
                                                  is_subtype(Primcount,
                                                             integer()).

drawTransformFeedbackStreamInstanced(Mode, Id, Stream, Primcount) ->
    cast(5863,
         <<Mode:32/native-unsigned,
           Id:32/native-unsigned,
           Stream:32/native-unsigned,
           Primcount:32/native-signed>>).

-spec getInternalformativ(Target, Internalformat, Pname, BufSize) ->
                             [integer()]
                             when
                                 is_subtype(Target, enum()),
                                 is_subtype(Internalformat, enum()),
                                 is_subtype(Pname, enum()),
                                 is_subtype(BufSize, integer()).

getInternalformativ(Target, Internalformat, Pname, BufSize) ->
    call(5864,
         <<Target:32/native-unsigned,
           Internalformat:32/native-unsigned,
           Pname:32/native-unsigned,
           BufSize:32/native-signed>>).

-spec bindImageTexture(Unit,
                       Texture,
                       Level,
                       Layered,
                       Layer,
                       Access,
                       Format) ->
                          ok
                          when
                              is_subtype(Unit, integer()),
                              is_subtype(Texture, integer()),
                              is_subtype(Level, integer()),
                              is_subtype(Layered, 0 | 1),
                              is_subtype(Layer, integer()),
                              is_subtype(Access, enum()),
                              is_subtype(Format, enum()).

bindImageTexture(Unit, Texture, Level, Layered, Layer, Access, Format) ->
    cast(5865,
         <<Unit:32/native-unsigned,
           Texture:32/native-unsigned,
           Level:32/native-signed,
           Layered:8/native-unsigned,
           0:24,
           Layer:32/native-signed,
           Access:32/native-unsigned,
           Format:32/native-unsigned>>).

-spec memoryBarrier(Barriers) -> ok when is_subtype(Barriers, integer()).

memoryBarrier(Barriers) ->
    cast(5866, <<Barriers:32/native-unsigned>>).

-spec texStorage1D(Target, Levels, Internalformat, Width) -> ok
                      when
                          is_subtype(Target, enum()),
                          is_subtype(Levels, integer()),
                          is_subtype(Internalformat, enum()),
                          is_subtype(Width, integer()).

texStorage1D(Target, Levels, Internalformat, Width) ->
    cast(5867,
         <<Target:32/native-unsigned,
           Levels:32/native-signed,
           Internalformat:32/native-unsigned,
           Width:32/native-signed>>).

-spec texStorage2D(Target, Levels, Internalformat, Width, Height) -> ok
                      when
                          is_subtype(Target, enum()),
                          is_subtype(Levels, integer()),
                          is_subtype(Internalformat, enum()),
                          is_subtype(Width, integer()),
                          is_subtype(Height, integer()).

texStorage2D(Target, Levels, Internalformat, Width, Height) ->
    cast(5868,
         <<Target:32/native-unsigned,
           Levels:32/native-signed,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Height:32/native-signed>>).

-spec texStorage3D(Target, Levels, Internalformat, Width, Height, Depth) ->
                      ok
                      when
                          is_subtype(Target, enum()),
                          is_subtype(Levels, integer()),
                          is_subtype(Internalformat, enum()),
                          is_subtype(Width, integer()),
                          is_subtype(Height, integer()),
                          is_subtype(Depth, integer()).

texStorage3D(Target, Levels, Internalformat, Width, Height, Depth) ->
    cast(5869,
         <<Target:32/native-unsigned,
           Levels:32/native-signed,
           Internalformat:32/native-unsigned,
           Width:32/native-signed,
           Height:32/native-signed,
           Depth:32/native-signed>>).

-spec depthBoundsEXT(Zmin, Zmax) -> ok
                        when
                            is_subtype(Zmin, clamp()),
                            is_subtype(Zmax, clamp()).

depthBoundsEXT(Zmin, Zmax) ->
    cast(5870, <<Zmin:64/native-float,Zmax:64/native-float>>).

-spec stencilClearTagEXT(StencilTagBits, StencilClearTag) -> ok
                            when
                                is_subtype(StencilTagBits, integer()),
                                is_subtype(StencilClearTag, integer()).

stencilClearTagEXT(StencilTagBits, StencilClearTag) ->
    cast(5871,
         <<StencilTagBits:32/native-signed,
           StencilClearTag:32/native-unsigned>>).



