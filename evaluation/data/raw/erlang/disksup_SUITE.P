-file("test/lib/os_mon/test/disksup_SUITE.erl", 1).

-module(disksup_SUITE).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/lib/os_mon/test/disksup_SUITE.erl", 21).

-export([all/0,suite/0,groups/0,init_per_group/2,end_per_group/2]).

-export([init_per_suite/1,end_per_suite/1]).

-export([init_per_testcase/2,end_per_testcase/2]).

-export([api/1,config/1,alarm/1]).

-export([port/1]).

-export([terminate/1,unavailable/1,restart/1]).

-export([otp_5910/1]).

init_per_suite(Config) when is_list(Config) ->
    ok = application:start(os_mon),
    Config.

end_per_suite(Config) when is_list(Config) ->
    ok = application:stop(os_mon),
    Config.

init_per_testcase(unavailable, Config) ->
    terminate(Config),
    init_per_testcase(dummy, Config);
init_per_testcase(_Case, Config) ->
    Dog = test_server:timetrap(test_server:minutes(1)),
    [{watchdog,Dog}|Config].

end_per_testcase(unavailable, Config) ->
    restart(Config),
    end_per_testcase(dummy, Config);
end_per_testcase(_Case, Config) ->
    Dog = test_server:lookup_config(watchdog, Config),
    test_server:timetrap_cancel(Dog),
    ok.

suite() ->
    [{ct_hooks,[ts_install_cth]}].

all() ->
    Bugs = [otp_5910],
    case test_server:os_type() of
        {unix,sunos} ->
            [api,config,alarm,port,unavailable] ++ Bugs;
        {unix,_OSname} ->
            [api,alarm] ++ Bugs;
        {win32,_OSname} ->
            [api,alarm] ++ Bugs;
        _OS ->
            [unavailable]
    end.

groups() ->
    [].

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, Config) ->
    Config.

api(suite) ->
    [];
api(doc) ->
    ["Test of API functions"];
api(Config) when is_list(Config) ->
    [{Id,KByte,Capacity}|_] = get_disk_data(),
    true = io_lib:printable_list(Id),
    true = is_integer(KByte),
    true = is_integer(Capacity),
    true = Capacity > 0,
    true = KByte > 0,
    1800000 = disksup:get_check_interval(),
    ok = disksup:set_check_interval(20),
    1200000 = disksup:get_check_interval(),
    {'EXIT',{badarg,_}} = (catch disksup:set_check_interval(0.5)),
    1200000 = disksup:get_check_interval(),
    ok = disksup:set_check_interval(30),
    80 = disksup:get_almost_full_threshold(),
    ok = disksup:set_almost_full_threshold(0.9),
    90 = disksup:get_almost_full_threshold(),
    {'EXIT',{badarg,_}} =
        (catch disksup:set_almost_full_threshold(- 0.5)),
    90 = disksup:get_almost_full_threshold(),
    ok = disksup:set_almost_full_threshold(0.8),
    ok.

config(suite) ->
    [];
config(doc) ->
    ["Test configuration"];
config(Config) when is_list(Config) ->
    ok = application:set_env(os_mon, disk_space_check_interval, 29),
    ok = application:set_env(os_mon, disk_almost_full_threshold, 0.81),
    ok = supervisor:terminate_child(os_mon_sup, disksup),
    {ok,_Child1} = supervisor:restart_child(os_mon_sup, disksup),
    1740000 = disksup:get_check_interval(),
    81 = disksup:get_almost_full_threshold(),
    ok = application:set_env(os_mon, disk_space_check_interval, 0.5),
    ok = application:set_env(os_mon, disk_almost_full_threshold, - 0.81),
    ok = supervisor:terminate_child(os_mon_sup, disksup),
    {ok,_Child2} = supervisor:restart_child(os_mon_sup, disksup),
    1800000 = disksup:get_check_interval(),
    80 = disksup:get_almost_full_threshold(),
    ok = application:set_env(os_mon, disk_space_check_interval, 30),
    ok = application:set_env(os_mon, disk_almost_full_threshold, 0.8),
    ok.

alarm(suite) ->
    [];
alarm(doc) ->
    ["Test that alarms are set and cleared"];
alarm(Config) when is_list(Config) ->
    Threshold1 = disksup:get_almost_full_threshold(),
    Data1 = disksup:get_disk_data(),
    Over1 = over_threshold(Data1, Threshold1),
    Alarms1 = get_alarms(),
    if
        Over1 == length(Alarms1) ->
            true;
        true ->
            dump_info(),
            test_server:fail({bad_alarms,Threshold1,Data1,Alarms1})
    end,
    Fun1 =
        fun({_Id,_Kbyte,Capacity}) ->
               if
                   Capacity > 0, Capacity < Threshold1 ->
                       true;
                   true ->
                       false
               end
        end,
    case until(Fun1, Data1) of
        {_,_,Cap1} ->
            Threshold2 = Cap1 - 1,
            ok = disksup:set_almost_full_threshold(Threshold2 / 100),
            disksup ! timeout,
            Data2 = disksup:get_disk_data(),
            Over2 = over_threshold(Data2, Threshold2),
            Alarms2 = get_alarms(),
            if
                Over2 == length(Alarms2), Over2 > Over1 ->
                    true;
                true ->
                    dump_info(),
                    test_server:fail({bad_alarms,
                                      Threshold2,
                                      Data2,
                                      Alarms2})
            end;
        false ->
            ignore
    end,
    Fun2 =
        fun({_Id,_Kbyte,Capacity}, MaxAcc) ->
               if
                   Capacity > MaxAcc ->
                       Capacity;
                   true ->
                       MaxAcc
               end
        end,
    case lists:foldl(Fun2, 0, Data1) of
        Max when Max < 100 ->
            Threshold3 = Max + 1,
            ok = disksup:set_almost_full_threshold(Threshold3 / 100),
            disksup ! timeout,
            Data3 = disksup:get_disk_data(),
            Over3 = over_threshold(Data3, Threshold3),
            Alarms3 = get_alarms(),
            if
                Over3 == 0, length(Alarms3) == 0 ->
                    ok;
                true ->
                    dump_info(),
                    test_server:fail({bad_alarms,
                                      Threshold3,
                                      Data3,
                                      Alarms3})
            end;
        100 ->
            ignore
    end,
    ok = disksup:set_almost_full_threshold(Threshold1 / 100),
    ok.

over_threshold(Data, Threshold) ->
    Data2 = remove_duplicated_disks(lists:keysort(1, Data)),
    lists:foldl(fun({_Id,_Kbyte,Cap}, N) when Cap >= Threshold ->
                       N + 1;
                   (_DiskData, N) ->
                       N
                end,
                0,
                Data2).

remove_duplicated_disks([{Id,_,_},{Id,Kbyte,Cap}|T]) ->
    remove_duplicated_disks([{Id,Kbyte,Cap}|T]);
remove_duplicated_disks([H|T]) ->
    [H|remove_duplicated_disks(T)];
remove_duplicated_disks([]) ->
    [].

get_alarms() ->
    lists:filter(fun({{disk_almost_full,_Disk},_}) ->
                        true;
                    (_) ->
                        false
                 end,
                 alarm_handler:get_alarms()).

until(Fun, [H|T]) ->
    case Fun(H) of
        true ->
            H;
        false ->
            until(Fun, T)
    end;
until(_Fun, []) ->
    false.

port(suite) ->
    [];
port(doc) ->
    ["Test that disksup handles a terminating port program"];
port(Config) when is_list(Config) ->
    Str = os:cmd("ps -ef | grep '[d]isksup'"),
    case io_lib:fread("~s ~s", Str) of
        {ok,[_Uid,Pid],_Rest} ->
            MonRef = monitor(process, disksup),
            [{_Disk1,Kbyte1,_Cap1}|_] = disksup:get_disk_data(),
            true = Kbyte1 > 0,
            case os:cmd("kill -9 " ++ Pid) of
                [] ->
                    receive
                        {'DOWN',MonRef,_,_,{port_died,_Reason}} ->
                            ok;
                        {'DOWN',MonRef,_,_,Reason} ->
                            test_server:fail({unexpected_exit_reason,
                                              Reason})
                    after
                        3000 -> test_server:fail({still_alive,Str})
                    end,
                    test_server:sleep(test_server:seconds(3)),
                    [{_Disk2,Kbyte2,_Cap2}|_] = disksup:get_disk_data(),
                    true = Kbyte2 > 0,
                    ok;
                Line ->
                    demonitor(MonRef),
                    {skip,{not_killed,Line}}
            end;
        _ ->
            {skip,{os_pid_not_found,Str}}
    end.

terminate(suite) ->
    [];
terminate(Config) when is_list(Config) ->
    ok = application:set_env(os_mon, start_disksup, false),
    ok = supervisor:terminate_child(os_mon_sup, disksup),
    ok.

unavailable(suite) ->
    [];
unavailable(doc) ->
    ["Test correct behaviour when service is unavailable"];
unavailable(Config) when is_list(Config) ->
    [{"none",0,0}] = disksup:get_disk_data(),
    1800000 = disksup:get_check_interval(),
    ok = disksup:set_check_interval(5),
    80 = disksup:get_almost_full_threshold(),
    ok = disksup:set_almost_full_threshold(0.9),
    ok.

restart(suite) ->
    [];
restart(Config) when is_list(Config) ->
    ok = application:set_env(os_mon, start_disksup, true),
    {ok,_Pid} = supervisor:restart_child(os_mon_sup, disksup),
    ok.

otp_5910(suite) ->
    [];
otp_5910(doc) ->
    ["Test that alarms are cleared if disksup crashes or if OS_Mon is s"
     "topped"];
otp_5910(Config) when is_list(Config) ->
    Data = disksup:get_disk_data(),
    Threshold0 = disksup:get_almost_full_threshold(),
    Threshold =
        case over_threshold(Data, Threshold0) of
            0 ->
                [{_Id,_Kbyte,Cap}|_] = Data,
                ok = disksup:set_almost_full_threshold((Cap - 1) / 100),
                Cap - 1;
            _N ->
                Threshold0
        end,
    ok =
        application:set_env(os_mon,
                            disk_almost_full_threshold,
                            Threshold / 100),
    disksup ! timeout,
    Data2 = disksup:get_disk_data(),
    Over = over_threshold(Data2, Threshold),
    Alarms = get_alarms(),
    if
        Over == 0 ->
            test_server:fail({threshold_too_low,Data2,Threshold});
        Over == length(Alarms) ->
            ok;
        true ->
            dump_info(),
            test_server:fail({bad_alarms,Threshold,Data2,Alarms})
    end,
    exit(whereis(disksup), faked_disksup_crash),
    test_server:sleep(test_server:seconds(1)),
    Data3 = disksup:get_disk_data(),
    Alarms2 = get_alarms(),
    if
        length(Alarms2) == length(Alarms) ->
            ok;
        true ->
            dump_info(),
            test_server:fail({bad_alarms,Threshold,Data3,Alarms,Alarms2})
    end,
    ok = application:stop(os_mon),
    test_server:sleep(test_server:seconds(1)),
    Alarms3 = get_alarms(),
    case get_alarms() of
        [] ->
            ok;
        _ ->
            test_server:fail({alarms_not_cleared,Alarms3})
    end,
    ok = application:set_env(os_mon, disksup_almost_full_threshold, 0.8),
    ok = disksup:set_almost_full_threshold(0.8),
    ok = application:start(os_mon),
    ok.

dump_info() ->
    io:format("Status: ~p~n", [sys:get_status(disksup)]).

get_disk_data() ->
    get_disk_data(disksup:get_disk_data()).

get_disk_data([{"none",0,0} = E]) ->
    [E];
get_disk_data([{_,_,0}|Es]) ->
    get_disk_data(Es);
get_disk_data([E|Es]) ->
    [E|get_disk_data(Es)];
get_disk_data([]) ->
    [].



