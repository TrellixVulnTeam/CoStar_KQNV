-file("test/lib/inets/src/ftp/ftp_response.erl", 1).

-module(ftp_response).

-export([parse_lines/3,interpret/1,error_string/1]).

-file("test/lib/inets/src/ftp/ftp_internal.hrl", 1).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/inets-5.9.2/src/inets_app/inets_internal.hrl",
      1).

-file("test/lib/inets/src/ftp/ftp_internal.hrl", 25).

-file([], 25).

-file("test/lib/inets/src/ftp/ftp_response.erl", 28).

parse_lines(Bin, Lines, start) when size(Bin) < 4 ->
    {continue,{Bin,Lines,start}};
parse_lines(<<C1,C2,C3,$-,Rest/binary>>, Lines, start) ->
    parse_lines(Rest, [$-,C3,C2,C1|Lines], {C1,C2,C3});
parse_lines(<<C1,C2,C3,$\s,Bin/binary>>, Lines, start) ->
    parse_lines(Bin, [$\s,C3,C2,C1|Lines], finish);
parse_lines(<<C1,C2,C3,$\s,Rest/binary>>, Lines, {C1,C2,C3}) ->
    parse_lines(Rest, [$\s,C3,C2,C1|Lines], finish);
parse_lines(<<C1,C2,C3>> = Bin, Lines, {C1,C2,C3}) ->
    {continue,{Bin,Lines,{C1,C2,C3}}};
parse_lines(<<C1,C2,C3,Rest/binary>>, Lines, {C1,C2,C3}) ->
    parse_lines(Rest, [C3,C2,C1|Lines], {C1,C2,C3});
parse_lines(<<C1,C2>> = Data, Lines, {C1,C2,_} = StatusCode) ->
    {continue,{Data,Lines,StatusCode}};
parse_lines(<<C1>> = Data, Lines, {C1,_,_} = StatusCode) ->
    {continue,{Data,Lines,StatusCode}};
parse_lines(<<>> = Data, Lines, {_,_,_} = StatusCode) ->
    {continue,{Data,Lines,StatusCode}};
parse_lines(<<Octet,Rest/binary>>, Lines, {_,_,_} = StatusCode) ->
    parse_lines(Rest, [Octet|Lines], StatusCode);
parse_lines(<<"\r\n">>, Lines, finish) ->
    {ok,lists:reverse([$\n,$\r|Lines]),<<>>};
parse_lines(<<$\r,$\n,Rest/binary>>, Lines, finish) ->
    {ok,lists:reverse([$\n,$\r|Lines]),Rest};
parse_lines(<<"\r">> = Data, Lines, finish) ->
    {continue,{Data,Lines,finish}};
parse_lines(<<>> = Data, Lines, finish) ->
    {continue,{Data,Lines,finish}};
parse_lines(<<Octet,Rest/binary>>, Lines, finish) ->
    parse_lines(Rest, [Octet|Lines], finish).

interpret([Didgit1,Didgit2,Didgit3|Data]) ->
    Code1 = Didgit1 - $0,
    Code2 = Didgit2 - $0,
    Code3 = Didgit3 - $0,
    {interpret_status(Code1, Code2, Code3),Data}.

error_string({error,Reason}) ->
    error_string(Reason);
error_string(echunk) ->
    "Synchronisation error during chunk sending.";
error_string(eclosed) ->
    "Session has been closed.";
error_string(econn) ->
    "Connection to remote server prematurely closed.";
error_string(eexists) ->
    "File or directory already exists.";
error_string(ehost) ->
    "Host not found, FTP server not found, or connection rejected.";
error_string(elogin) ->
    "User not logged in.";
error_string(enotbinary) ->
    "Term is not a binary.";
error_string(epath) ->
    "No such file or directory, already exists, or permission denied.";
error_string(etype) ->
    "No such type.";
error_string(euser) ->
    "User name or password not valid.";
error_string(etnospc) ->
    "Insufficient storage space in system.";
error_string(enofile) ->
    "No files found or file unavailable";
error_string(epnospc) ->
    "Exceeded storage allocation (for current directory or dataset).";
error_string(efnamena) ->
    "File name not allowed.";
error_string(Reason) ->
    lists:flatten(io_lib:format("Unknown error: ~w", [Reason])).

interpret_status(1, _, _) ->
    pos_prel;
interpret_status(2, _, _) ->
    pos_compl;
interpret_status(3, 3, 2) ->
    pos_interm_acct;
interpret_status(3, _, _) ->
    pos_interm;
interpret_status(4, 5, 0) ->
    enofile;
interpret_status(4, 5, 2) ->
    etnospc;
interpret_status(4, _, _) ->
    trans_neg_compl;
interpret_status(5, 5, 0) ->
    epath;
interpret_status(5, 5, 2) ->
    epnospc;
interpret_status(5, 5, 3) ->
    efnamena;
interpret_status(5, _, _) ->
    perm_neg_compl.



