-file("test/lib/kernel/src/global_search.erl", 1).

-module(global_search).

-export([start/2]).

-export([init_send/1]).

-export([init_whereis/1]).

-export([init_names/1]).

-export([send_test/1]).

-export([whereis_test/1]).

-export([names_test/1]).

start(Flag, Arg) ->
    case Flag of
        send ->
            spawn_link(global_search, init_send, [Arg]);
        whereis ->
            spawn_link(global_search, init_whereis, [Arg]);
        names ->
            spawn_link(global_search, init_names, [Arg]);
        send_test ->
            spawn_link(global_search, send_test, [Arg]);
        whereis_test ->
            spawn_link(global_search, whereis_test, [Arg]);
        names_test ->
            spawn_link(global_search, names_test, [Arg])
    end.

-spec init_send(_) -> no_return().

init_send({any,NodesList,Name,Msg,From}) ->
    case whereis_any_loop(NodesList, Name) of
        undefined ->
            Res = {badarg,{Name,Msg}},
            gen_server:cast(global_group,
                            {send_res,Res,Name,Msg,self(),From});
        Pid ->
            gen_server:cast(global_group,
                            {send_res,Pid,Name,Msg,self(),From})
    end,
    end_loop();
init_send({group,Nodes,Name,Msg,From}) ->
    case whereis_group_loop(Nodes, Name) of
        group_down ->
            Res = {badarg,{Name,Msg}},
            gen_server:cast(global_group,
                            {send_res,Res,Name,Msg,self(),From});
        undefined ->
            Res = {badarg,{Name,Msg}},
            gen_server:cast(global_group,
                            {send_res,Res,Name,Msg,self(),From});
        Pid ->
            gen_server:cast(global_group,
                            {send_res,Pid,Name,Msg,self(),From})
    end,
    end_loop();
init_send({node,Node,Name,Msg,From}) ->
    case whereis_check_node(Node, Name) of
        node_down ->
            Res = {badarg,{Name,Msg}},
            gen_server:cast(global_group,
                            {send_res,Res,Name,Msg,self(),From});
        undefined ->
            Res = {badarg,{Name,Msg}},
            gen_server:cast(global_group,
                            {send_res,Res,Name,Msg,self(),From});
        Pid ->
            gen_server:cast(global_group,
                            {send_res,Pid,Name,Msg,self(),From})
    end,
    end_loop().

-spec init_whereis(_) -> no_return().

init_whereis({any,NodesList,Name,From}) ->
    R = whereis_any_loop(NodesList, Name),
    gen_server:cast(global_group, {find_name_res,R,self(),From}),
    end_loop();
init_whereis({group,Nodes,Name,From}) ->
    case whereis_group_loop(Nodes, Name) of
        group_down ->
            gen_server:cast(global_group,
                            {find_name_res,undefined,self(),From});
        R ->
            gen_server:cast(global_group, {find_name_res,R,self(),From})
    end,
    end_loop();
init_whereis({node,Node,Name,From}) ->
    case whereis_check_node(Node, Name) of
        node_down ->
            gen_server:cast(global_group,
                            {find_name_res,undefined,self(),From});
        R ->
            gen_server:cast(global_group, {find_name_res,R,self(),From})
    end,
    end_loop().

-spec init_names(_) -> no_return().

init_names({group,Nodes,From}) ->
    case names_group_loop(Nodes) of
        group_down ->
            gen_server:cast(global_group,
                            {registered_names_res,[],self(),From});
        R ->
            gen_server:cast(global_group,
                            {registered_names_res,R,self(),From})
    end,
    end_loop();
init_names({node,Node,From}) ->
    case names_check_node(Node) of
        node_down ->
            gen_server:cast(global_group,
                            {registered_names_res,[],self(),From});
        R ->
            gen_server:cast(global_group,
                            {registered_names_res,R,self(),From})
    end,
    end_loop().

-spec end_loop() -> no_return().

end_loop() ->
    receive
        kill ->
            exit(normal)
    end.

whereis_any_loop([], _Name) ->
    undefined;
whereis_any_loop([{_Group_name,Nodes}|T], Name) ->
    case whereis_group_loop(Nodes, Name) of
        group_down ->
            whereis_any_loop(T, Name);
        undefined ->
            whereis_any_loop(T, Name);
        R ->
            R
    end.

whereis_group_loop([], _Name) ->
    group_down;
whereis_group_loop([Node|T], Name) ->
    case whereis_check_node(Node, Name) of
        node_down ->
            whereis_group_loop(T, Name);
        R ->
            R
    end.

whereis_check_node(Node, Name) ->
    case net_adm:ping(Node) of
        pang ->
            node_down;
        pong ->
            monitor_node(Node, true),
            gen_server:cast({global_group,Node},
                            {find_name,self(),Name}),
            receive
                {nodedown,Node} ->
                    node_down;
                {find_name_res,Result} ->
                    monitor_node(Node, false),
                    Result
            end
    end.

names_group_loop([]) ->
    group_down;
names_group_loop([Node|T]) ->
    case names_check_node(Node) of
        node_down ->
            names_group_loop(T);
        R ->
            R
    end.

names_check_node(Node) ->
    case net_adm:ping(Node) of
        pang ->
            node_down;
        pong ->
            monitor_node(Node, true),
            gen_server:cast({global_group,Node},
                            {registered_names,self()}),
            receive
                {nodedown,Node} ->
                    node_down;
                {registered_names_res,Result} ->
                    monitor_node(Node, false),
                    Result
            end
    end.

send_test(_Args) ->
    timer:sleep(5000),
    exit(testing_exit).

whereis_test(_Args) ->
    timer:sleep(5000),
    exit(testing_exit).

names_test(_Args) ->
    timer:sleep(5000),
    exit(testing_exit).



