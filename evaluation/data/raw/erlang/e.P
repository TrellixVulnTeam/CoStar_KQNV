-file("test/lib/tools/test/cover_SUITE_data/d1/e.erl", 1).

-module(e).

-behaviour(gen_server).

-export([start_link/0]).

-export([hello/0]).

-export([init/1,
         handle_call/3,
         handle_cast/2,
         handle_info/2,
         terminate/2,
         code_change/3]).

-record(state,{}).

start_link() ->
    gen_server:start_link({local,myserver}, myserver, [], []).

hello() ->
    gen_server:call(myserver, hello).

init([]) ->
    {ok,#state{}}.

handle_call(Request, From, State) ->
    Reply =
        case Request of
            char ->
                $B;
            integer ->
                17;
            float ->
                32.76;
            string ->
                "hi there";
            atom ->
                hello;
            block ->
                begin
                    a,
                    b
                end;
            binary ->
                <<1,2,3>>
        end,
    {reply,Reply,State}.

handle_cast(Msg, State) when atom(Msg) ->
    {noreply,State};
handle_cast(Msg, State) when binary(Msg) ->
    {noreply,State};
handle_cast(Msg, State) when not is_tuple(Msg), not is_list(Msg) ->
    {noreply,State};
handle_cast(Msg, State) when float(Msg) ->
    {noreply,State};
handle_cast(Msg, State) when function(Msg) ->
    {noreply,State};
handle_cast(Msg, State) when integer(Msg) ->
    {noreply,State};
handle_cast(Msg, State) when list(Msg) ->
    {noreply,State};
handle_cast(Msg, State) when number(Msg) ->
    {noreply,State};
handle_cast(Msg, State) when pid(Msg) ->
    {noreply,State};
handle_cast(Msg, State) when port(Msg) ->
    {noreply,State};
handle_cast(Msg, State) when reference(Msg) ->
    {noreply,State};
handle_cast(Msg, State) when tuple(Msg) ->
    {noreply,State}.

handle_info(Info, State) ->
    {noreply,State}.

terminate(Reason, State) ->
    ok.

code_change(OldVsn, State, Extra) ->
    {ok,State}.



