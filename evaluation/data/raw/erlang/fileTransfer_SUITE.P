-file("test/lib/cosFileTransfer/test/fileTransfer_SUITE.erl", 1).

-module(fileTransfer_SUITE).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosFileTransfer-1.1.13/src/cosFileTransferApp.hrl",
      1).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/orber-3.6.24/include/corba.hrl",
      1).

-record(orb_ImplDef,{node,module,typename,start = start,args = [[]],pid}).

-record(any,{typecode,value}).

-record(fixed,{digits,scale,value}).

-record('IOP_ServiceContext',{context_id,context_data}).

-record('InvalidName',{'OE_ID' = "IDL:omg.org/CORBA/ORB/InvalidName:1.0"}).

-record('UNKNOWN',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('BAD_PARAM',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('NO_MEMORY',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('IMP_LIMIT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('COMM_FAILURE',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('INV_OBJREF',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('NO_PERMISSION',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('INTERNAL',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('MARSHAL',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INITIALIZE',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('NO_IMPLEMENT',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('BAD_TYPECODE',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('BAD_OPERATION',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('NO_RESOURCES',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('NO_RESPONSE',{'OE_ID' = "",
                       minor = 1163001856,
                       completion_status}).

-record('PERSIST_STORE',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('BAD_INV_ORDER',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('TRANSIENT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('FREE_MEM',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INV_IDENT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INV_FLAG',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INTF_REPOS',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('BAD_CONTEXT',{'OE_ID' = "",
                       minor = 1163001856,
                       completion_status}).

-record('OBJ_ADAPTER',{'OE_ID' = "",
                       minor = 1163001856,
                       completion_status}).

-record('DATA_CONVERSION',{'OE_ID' = "",
                           minor = 1163001856,
                           completion_status}).

-record('OBJECT_NOT_EXIST',{'OE_ID' = "",
                            minor = 1163001856,
                            completion_status}).

-record('TRANSACTION_REQUIRED',{'OE_ID' = "",
                                minor = 1163001856,
                                completion_status}).

-record('TRANSACTION_ROLLEDBACK',{'OE_ID' = "",
                                  minor = 1163001856,
                                  completion_status}).

-record('INVALID_TRANSACTION',{'OE_ID' = "",
                               minor = 1163001856,
                               completion_status}).

-record('INV_POLICY',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('CODESET_INCOMPATIBLE',{'OE_ID' = "",
                                minor = 1163001856,
                                completion_status}).

-record('REBIND',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('TIMEOUT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('TRANSACTION_UNAVAILABLE',{'OE_ID' = "",
                                   minor = 1163001856,
                                   completion_status}).

-record('TRANSACTION_MODE',{'OE_ID' = "",
                            minor = 1163001856,
                            completion_status}).

-record('BAD_QOS',{'OE_ID' = "",minor = 1163001856,completion_status}).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosFileTransfer-1.1.13/src/cosFileTransferApp.hrl",
      31).

-file([], 31).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/orber-3.6.24/include/ifr_types.hrl",
      1).

-record(contained_description,{kind,value}).

-record(structmember,{name,type,type_def}).

-record(unionmember,{name,label,type,type_def}).

-record(container_description,{contained_object,kind,value}).

-record(moduledescription,{name,id,defined_in,version}).

-record(constantdescription,{name,id,defined_in,version,type,value}).

-record(typedescription,{name,id,defined_in,version,type}).

-record(exceptiondescription,{name,id,defined_in,version,type}).

-record(attributedescription,{name,id,defined_in,version,type,mode}).

-record(parameterdescription,{name,type,type_def,mode}).

-record(operationdescription,{name,
                              id,
                              defined_in,
                              version,
                              result,
                              mode,
                              contexts,
                              parameters,
                              exceptions}).

-record(fullinterfacedescription,{name,
                                  id,
                                  defined_in,
                                  version,
                                  operations,
                                  attributes,
                                  base_interfaces,
                                  type}).

-record(interfacedescription,{name,
                              id,
                              defined_in,
                              version,
                              base_interfaces}).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosFileTransfer-1.1.13/src/cosFileTransferApp.hrl",
      32).

-file([], 32).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosProperty-1.1.15/include/CosPropertyService.hrl",
      1).

-record('CosPropertyService_Property',{property_name,property_value}).

-record('CosPropertyService_PropertyDef',{property_name,
                                          property_value,
                                          property_mode}).

-record('CosPropertyService_PropertyMode',{property_name,property_mode}).

-record('CosPropertyService_ConstraintNotSupported',{'OE_ID' =
                                                         "IDL:omg.org/C"
                                                         "osPropertySer"
                                                         "vice/Constrai"
                                                         "ntNotSupporte"
                                                         "d:1.0"}).

-record('CosPropertyService_InvalidPropertyName',{'OE_ID' =
                                                      "IDL:omg.org/CosP"
                                                      "ropertyService/I"
                                                      "nvalidPropertyNa"
                                                      "me:1.0"}).

-record('CosPropertyService_ConflictingProperty',{'OE_ID' =
                                                      "IDL:omg.org/CosP"
                                                      "ropertyService/C"
                                                      "onflictingProper"
                                                      "ty:1.0"}).

-record('CosPropertyService_PropertyNotFound',{'OE_ID' =
                                                   "IDL:omg.org/CosProp"
                                                   "ertyService/Propert"
                                                   "yNotFound:1.0"}).

-record('CosPropertyService_UnsupportedTypeCode',{'OE_ID' =
                                                      "IDL:omg.org/CosP"
                                                      "ropertyService/U"
                                                      "nsupportedTypeCo"
                                                      "de:1.0"}).

-record('CosPropertyService_UnsupportedProperty',{'OE_ID' =
                                                      "IDL:omg.org/CosP"
                                                      "ropertyService/U"
                                                      "nsupportedProper"
                                                      "ty:1.0"}).

-record('CosPropertyService_UnsupportedMode',{'OE_ID' =
                                                  "IDL:omg.org/CosPrope"
                                                  "rtyService/Unsupport"
                                                  "edMode:1.0"}).

-record('CosPropertyService_FixedProperty',{'OE_ID' =
                                                "IDL:omg.org/CosPropert"
                                                "yService/FixedProperty"
                                                ":1.0"}).

-record('CosPropertyService_ReadOnlyProperty',{'OE_ID' =
                                                   "IDL:omg.org/CosProp"
                                                   "ertyService/ReadOnl"
                                                   "yProperty:1.0"}).

-record('CosPropertyService_PropertyException',{reason,
                                                failing_property_name}).

-record('CosPropertyService_MultipleExceptions',{'OE_ID' =
                                                     "IDL:omg.org/CosPr"
                                                     "opertyService/Mul"
                                                     "tipleExceptions:1"
                                                     ".0",
                                                 exceptions}).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosFileTransfer-1.1.13/src/cosFileTransferApp.hrl",
      33).

-file([], 33).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosFileTransfer-1.1.13/include/CosFileTransfer.hrl",
      1).

-record('CosFileTransfer_CommandNotImplementedException',{'OE_ID' =
                                                              "IDL:omg."
                                                              "org/CosF"
                                                              "ileTrans"
                                                              "fer/Comm"
                                                              "andNotIm"
                                                              "plemente"
                                                              "dExcepti"
                                                              "on:1.0",
                                                          reason}).

-record('CosFileTransfer_SessionException',{'OE_ID' =
                                                "IDL:omg.org/CosFileTra"
                                                "nsfer/SessionException"
                                                ":1.0",
                                            reason}).

-record('CosFileTransfer_TransferException',{'OE_ID' =
                                                 "IDL:omg.org/CosFileTr"
                                                 "ansfer/TransferExcept"
                                                 "ion:1.0",
                                             reason}).

-record('CosFileTransfer_FileNotFoundException',{'OE_ID' =
                                                     "IDL:omg.org/CosFi"
                                                     "leTransfer/FileNo"
                                                     "tFoundException:1"
                                                     ".0",
                                                 reason}).

-record('CosFileTransfer_RequestFailureException',{'OE_ID' =
                                                       "IDL:omg.org/Cos"
                                                       "FileTransfer/Re"
                                                       "questFailureExc"
                                                       "eption:1.0",
                                                   reason}).

-record('CosFileTransfer_IllegalOperationException',{'OE_ID' =
                                                         "IDL:omg.org/C"
                                                         "osFileTransfe"
                                                         "r/IllegalOper"
                                                         "ationExceptio"
                                                         "n:1.0",
                                                     reason}).

-record('CosFileTransfer_AccessLevel',{read,
                                       insert,
                                       replace,
                                       extend,
                                       erase,
                                       read_attr,
                                       change_attr,
                                       delete}).

-record('CosFileTransfer_ProtocolSupport',{protocol_name,addresses}).

-record('CosFileTransfer_FileWrapper',{the_file,file_type}).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosFileTransfer-1.1.13/src/cosFileTransferApp.hrl",
      36).

-file([], 36).

-file("test/lib/cosFileTransfer/test/fileTransfer_SUITE.erl", 30).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/lib/cosFileTransfer/test/fileTransfer_SUITE.erl", 32).

-export([all/0,
         suite/0,
         groups/0,
         init_per_group/2,
         end_per_group/2,
         cases/0,
         init_per_suite/1,
         end_per_suite/1,
         fileIterator_api/1,
         fts_ftp_file_api/1,
         fts_ftp_file_ssl_api/1,
         fts_ftp_dir_api/1,
         fts_native_file_api/1,
         fts_native_file_ssl_api/1,
         fts_native_dir_api/1,
         init_per_testcase/2,
         end_per_testcase/2,
         install_data/2,
         uninstall_data/1,
         slave_sup/0,
         app_test/1]).

suite() ->
    [{ct_hooks,[ts_install_cth]}].

all() ->
    cases().

groups() ->
    [].

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, Config) ->
    Config.

cases() ->
    [fts_ftp_dir_api,
     fts_ftp_file_api,
     fts_ftp_file_ssl_api,
     fts_native_dir_api,
     fts_native_file_api,
     fts_native_file_ssl_api,
     fileIterator_api,
     app_test].

init_per_testcase(_Case, Config) ->
    Dog = test_server:timetrap(test_server:minutes(20)),
    [{watchdog,Dog}|Config].

end_per_testcase(_Case, Config) ->
    Dog = test_server:lookup_config(watchdog, Config),
    test_server:timetrap_cancel(Dog),
    ok.

init_per_suite(Config) ->
    case crypto_works() of
        false ->
            {skip,"Could not start crypto!"};
        true ->
            orber:jump_start(),
            cosProperty:install(),
            cosProperty:start(),
            Dir =
                filename:join([code:lib_dir(ssl),
                               "examples",
                               "certs",
                               "etc"]),
            cosFileTransferApp:configure(ssl_client_certfile,
                                         filename:join([Dir,
                                                        "client",
                                                        "cert.pem"])),
            cosFileTransferApp:configure(ssl_client_cacertfile,
                                         filename:join([Dir,
                                                        "client",
                                                        "cacerts.pem"])),
            cosFileTransferApp:configure(ssl_client_verify, 1),
            cosFileTransferApp:configure(ssl_client_depth, 0),
            cosFileTransferApp:configure(ssl_server_certfile,
                                         filename:join([Dir,
                                                        "server",
                                                        "cert.pem"])),
            cosFileTransferApp:configure(ssl_server_cacertfile,
                                         filename:join([Dir,
                                                        "server",
                                                        "cacerts.pem"])),
            cosFileTransferApp:configure(ssl_server_verify, 1),
            cosFileTransferApp:configure(ssl_server_depth, 0),
            crypto:start(),
            ssl:start(),
            cosFileTransferApp:install(),
            cosFileTransferApp:start(),
            if
                is_list(Config) ->
                    Config;
                true ->
                    exit("Config not a list")
            end
    end.

crypto_works() ->
    try crypto:start() of
        {error,{already_started,crypto}} ->
            true;
        ok ->
            true
    catch
        error:_ ->
            false
    end.

end_per_suite(Config) ->
    ssl:stop(),
    crypto:stop(),
    cosFileTransferApp:stop(),
    cosProperty:stop(),
    cosProperty:uninstall(),
    cosFileTransferApp:uninstall(),
    orber:jump_stop(),
    Config.

app_test(doc) ->
    [];
app_test(suite) ->
    [];
app_test(_Config) ->
    ok = test_server:app_test(cosFileTransfer),
    ok.

fileIterator_api(doc) ->
    ["CosFileTransfer FileIterator API tests.",""];
fileIterator_api(suite) ->
    [];
fileIterator_api(Config) ->
    case ftp_host(Config) of
        {skipped,SkippedReason} ->
            {skipped,SkippedReason};
        Host ->
            {ok,Node} = create_node("fileIterator_api", 4008, normal),
            fun() ->
                   AcTuAlReS =
                       (catch
                            remote_apply(Node,
                                         fileTransfer_SUITE,
                                         install_data,
                                         [tcp,
                                          {{'NATIVE',
                                            cosFileTransferNATIVE_file},
                                           Host,
                                           "fileIterator_api"}])),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            VFS =
                fun() ->
                       AcTuAlReS =
                           (catch
                                corba:string_to_object("corbaname::1.2@"
                                                       "localhost:4008/"
                                                       "NameService#fil"
                                                       "eIterator_api")),
                       case AcTuAlReS of
                           {'IOP_IOR',
                            "IDL:omg.org/CosFileTransfer/VirtualFileSys"
                            "tem:1.0",
                            _} ->
                               io:format("------ CORRECT RESULT (~p) --"
                                         "----~n",
                                         [237]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            {FS,Dir} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_VirtualFileSystem':login(VFS,
                                                                          "anony"
                                                                          "mous",
                                                                          "fileT"
                                                                          "ransf"
                                                                          "er_SU"
                                                                          "ITE@l"
                                                                          "ocalh"
                                                                          "ost",
                                                                          "anony"
                                                                          "mous")),
                       case AcTuAlReS of
                           {{_,_,_},{_,_,_}} ->
                               io:format("------ CORRECT RESULT (~p) --"
                                         "----~n",
                                         [241]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_name'(Dir)),
                   case AcTuAlReS of
                       [_H|_] ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_complete_file_name'(Dir)),
                   case AcTuAlReS of
                       [_H|_] ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_parent'(Dir)),
                   case AcTuAlReS of
                       {'IOP_IOR',[],[]} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_associated_session'(Dir)),
                   case AcTuAlReS of
                       FS ->
                           io:format("------ CORRECT RESULT (~p) ------"
                                     "~n",
                                     [251]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            {ok,[],FileIter} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_Directory':list(Dir, 0)),
                       case AcTuAlReS of
                           {ok,[],_} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            #any{value = Children} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosPropertyService_PropertySet':get_property_value(Dir,
                                                                                    "num_c"
                                                                                    "hildr"
                                                                                    "en")),
                       case AcTuAlReS of
                           {any,_,_} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            if
                Children > 5 ->
                    fun() ->
                           AcTuAlReS =
                               (catch
                                    'CosFileTransfer_FileIterator':next_one(FileIter)),
                           case AcTuAlReS of
                               {true,_} ->
                                   io:format("------ CORRECT RESULT (~p"
                                             ") ------~n",
                                             [261]),
                                   AcTuAlReS;
                               _ ->
                                   io:format("###### ERROR ERROR ######"
                                             "~n~p~n",
                                             [AcTuAlReS]),
                                   exit(AcTuAlReS)
                           end
                    end(),
                    fun() ->
                           AcTuAlReS =
                               (catch
                                    'CosFileTransfer_FileIterator':next_n(FileIter,
                                                                          3)),
                           case AcTuAlReS of
                               {true,_} ->
                                   io:format("------ CORRECT RESULT (~p"
                                             ") ------~n",
                                             [262]),
                                   AcTuAlReS;
                               _ ->
                                   io:format("###### ERROR ERROR ######"
                                             "~n~p~n",
                                             [AcTuAlReS]),
                                   exit(AcTuAlReS)
                           end
                    end(),
                    fun() ->
                           AcTuAlReS =
                               (catch
                                    'CosFileTransfer_FileIterator':next_n(FileIter,
                                                                          Children)),
                           case AcTuAlReS of
                               {true,_} ->
                                   io:format("------ CORRECT RESULT (~p"
                                             ") ------~n",
                                             [263]),
                                   AcTuAlReS;
                               _ ->
                                   io:format("###### ERROR ERROR ######"
                                             "~n~p~n",
                                             [AcTuAlReS]),
                                   exit(AcTuAlReS)
                           end
                    end(),
                    fun() ->
                           AcTuAlReS =
                               (catch
                                    'CosFileTransfer_FileIterator':next_one(FileIter)),
                           case AcTuAlReS of
                               {false,_} ->
                                   io:format("------ CORRECT RESULT (~p"
                                             ") ------~n",
                                             [265]),
                                   AcTuAlReS;
                               _ ->
                                   io:format("###### ERROR ERROR ######"
                                             "~n~p~n",
                                             [AcTuAlReS]),
                                   exit(AcTuAlReS)
                           end
                    end(),
                    fun() ->
                           AcTuAlReS =
                               (catch
                                    'CosFileTransfer_FileIterator':next_n(FileIter,
                                                                          1)),
                           case AcTuAlReS of
                               {false,[]} ->
                                   io:format("------ CORRECT RESULT ---"
                                             "---~n~p~n",
                                             [AcTuAlReS]),
                                   AcTuAlReS;
                               _ ->
                                   io:format("###### ERROR ERROR ######"
                                             "~n~p~n",
                                             [AcTuAlReS]),
                                   exit(AcTuAlReS)
                           end
                    end(),
                    ok;
                true ->
                    ok
            end,
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileIterator':destroy(FileIter)),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS = (catch corba_object:non_existent(FS)),
                   case AcTuAlReS of
                       false ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':logout(FS)),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            timer:sleep(1000),
            fun() ->
                   AcTuAlReS = (catch corba_object:non_existent(FS)),
                   case AcTuAlReS of
                       true ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            remote_apply(Node,
                                         fileTransfer_SUITE,
                                         uninstall_data,
                                         ["fileIterator_api"])),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            stop_orber_remote(Node, normal),
            ok
    end.

fts_ftp_file_api(doc) ->
    ["CosFileTransfer FTP FileTransferSession API tests.",""];
fts_ftp_file_api(suite) ->
    [];
fts_ftp_file_api(Config) ->
    {ok,Node} = create_node("ftp_file_api", 4004, normal),
    file_helper(Config,
                'FTP',
                ["/","incoming"],
                Node,
                4004,
                "ftp_file_api",
                tcp).

fts_ftp_file_ssl_api(doc) ->
    ["CosFileTransfer FTP FileTransferSession API tests.",""];
fts_ftp_file_ssl_api(suite) ->
    [];
fts_ftp_file_ssl_api(Config) ->
    {ok,Node} = create_node("ftp_file_api_ssl", {4005,1}, ssl),
    file_helper(Config,
                'FTP',
                ["/","incoming"],
                Node,
                4005,
                "ftp_file_api_ssl",
                ssl).

fts_native_file_api(doc) ->
    ["CosFileTransfer NATIVE FileTransferSession API tests.",""];
fts_native_file_api(suite) ->
    [];
fts_native_file_api(Config) ->
    {ok,Node} = create_node("native_file_api", 4006, normal),
    {ok,Pwd} = file:get_cwd(),
    file_helper(Config,
                {'NATIVE',cosFileTransferNATIVE_file},
                filename:split(Pwd),
                Node,
                4006,
                "native_file_api",
                tcp).

fts_native_file_ssl_api(doc) ->
    ["CosFileTransfer NATIVE FileTransferSession API tests.",""];
fts_native_file_ssl_api(suite) ->
    [];
fts_native_file_ssl_api(Config) ->
    {ok,Node} = create_node("native_file_ssl_api", {4007,1}, ssl),
    {ok,Pwd} = file:get_cwd(),
    file_helper(Config,
                {'NATIVE',cosFileTransferNATIVE_file},
                filename:split(Pwd),
                Node,
                4007,
                "native_file_ssl_api",
                ssl).

file_helper(Config, WhichType, TEST_DIR, Node, Port, Name, Type) ->
    case ftp_host(Config) of
        {skipped,SkippedReason} ->
            {skipped,SkippedReason};
        Host ->
            TEST_SOURCE = TEST_DIR ++ [create_name(remove_me_source)],
            TEST_SOURCE2 = TEST_DIR ++ [create_name(remove_me_source)],
            TEST_TARGET = TEST_DIR ++ [create_name(remove_me_target)],
            io:format("<<<<<< CosFileTransfer Testing Configuration >>>"
                      ">>>~n",
                      []),
            io:format("Source: ~p~nTarget: ~p~n",
                      [TEST_SOURCE,TEST_TARGET]),
            fun() ->
                   AcTuAlReS =
                       (catch
                            remote_apply(Node,
                                         fileTransfer_SUITE,
                                         install_data,
                                         [Type,{WhichType,Host,Name}])),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            VFST =
                fun() ->
                       AcTuAlReS =
                           (catch
                                corba:string_to_object("corbaname::1.2@"
                                                       "localhost:"
                                                       ++
                                                       integer_to_list(Port)
                                                       ++
                                                       "/NameService#"
                                                       ++
                                                       Name)),
                       case AcTuAlReS of
                           {'IOP_IOR',
                            "IDL:omg.org/CosFileTransfer/VirtualFileSys"
                            "tem:1.0",
                            _} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            VFS =
                fun() ->
                       AcTuAlReS =
                           (catch
                                cosFileTransferApp:create_VFS(WhichType,
                                                              [],
                                                              Host,
                                                              21,
                                                              [{protocol,
                                                                Type}])),
                       case AcTuAlReS of
                           {_,_,_,_,_,_} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            {FST,_DirT} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_VirtualFileSystem':login(VFST,
                                                                          "anony"
                                                                          "mous",
                                                                          "fileT"
                                                                          "ransf"
                                                                          "er_SU"
                                                                          "ITE@l"
                                                                          "ocalh"
                                                                          "ost",
                                                                          "anony"
                                                                          "mous")),
                       case AcTuAlReS of
                           {{_,_,_},{_,_,_}} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            {FSS,DirS} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_VirtualFileSystem':login(VFS,
                                                                          "anony"
                                                                          "mous",
                                                                          "fileT"
                                                                          "ransf"
                                                                          "er_SU"
                                                                          "ITE@l"
                                                                          "ocalh"
                                                                          "ost",
                                                                          "anony"
                                                                          "mous")),
                       case AcTuAlReS of
                           {{_,_,_,_,_,_},{_,_,_,_,_,_}} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_name'(DirS)),
                   case AcTuAlReS of
                       [_H|_] ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_complete_file_name'(DirS)),
                   case AcTuAlReS of
                       [_H|_] ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_parent'(DirS)),
                   case AcTuAlReS of
                       {'IOP_IOR',[],[]} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_associated_session'(DirS)),
                   case AcTuAlReS of
                       FSS ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            #'CosFileTransfer_FileWrapper'{the_file = Dir} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_FileTransferSession':get_file(FSS,
                                                                               TEST_DIR)),
                       case AcTuAlReS of
                           {'CosFileTransfer_FileWrapper',_,ndirectory} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            {ok,FileList,Iter1} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_Directory':list(Dir,
                                                                 10)),
                       case AcTuAlReS of
                           {ok,_,_} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            loop_files(FileList),
            case Iter1 of
                {'IOP_IOR',[],[]} ->
                    ok;
                _ ->
                    fun() ->
                           AcTuAlReS =
                               (catch
                                    'CosFileTransfer_FileIterator':destroy(Iter1)),
                           case AcTuAlReS of
                               ok ->
                                   io:format("------ CORRECT RESULT ---"
                                             "---~n~p~n",
                                             [AcTuAlReS]),
                                   AcTuAlReS;
                               _ ->
                                   io:format("###### ERROR ERROR ######"
                                             "~n~p~n",
                                             [AcTuAlReS]),
                                   exit(AcTuAlReS)
                           end
                    end()
            end,
            #any{value = Count1} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosPropertyService_PropertySet':get_property_value(Dir,
                                                                                    "num_c"
                                                                                    "hildr"
                                                                                    "en")),
                       case AcTuAlReS of
                           {any,_,_} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            create_file_on_source_node(WhichType,
                                       Config,
                                       Host,
                                       filename:join(TEST_SOURCE),
                                       TEST_DIR,
                                       "If this file exists after a com"
                                       "pleted test an error occurred."),
            create_file_on_source_node(WhichType,
                                       Config,
                                       Host,
                                       filename:join(TEST_SOURCE2),
                                       TEST_DIR,
                                       "1234567890123"),
            #'CosFileTransfer_FileWrapper'{the_file = FileS} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_FileTransferSession':get_file(FSS,
                                                                               TEST_SOURCE)),
                       case AcTuAlReS of
                           {'CosFileTransfer_FileWrapper',_,nfile} ->
                               io:format("------ CORRECT RESULT (~p) --"
                                         "----~n",
                                         [384]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            #'CosFileTransfer_FileWrapper'{the_file = FileS2} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_FileTransferSession':get_file(FSS,
                                                                               TEST_SOURCE2)),
                       case AcTuAlReS of
                           {'CosFileTransfer_FileWrapper',_,nfile} ->
                               io:format("------ CORRECT RESULT (~p) --"
                                         "----~n",
                                         [387]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            #any{value = Count2} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosPropertyService_PropertySet':get_property_value(Dir,
                                                                                    "num_c"
                                                                                    "hildr"
                                                                                    "en")),
                       case AcTuAlReS of
                           {any,_,_} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            timer:sleep(2000),
            fun() ->
                   AcTuAlReS = (catch Count1 + 2 == Count2),
                   case AcTuAlReS of
                       true ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            FileT =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_FileTransferSession':create_file(FST,
                                                                                  TEST_TARGET)),
                       case AcTuAlReS of
                           {_,_,_} ->
                               io:format("------ CORRECT RESULT (~p) --"
                                         "----~n",
                                         [396]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':delete(FST,
                                                                         FileT)),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':transfer(FSS,
                                                                           FileS,
                                                                           FileT)),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            case WhichType of
                {'NATIVE',cosFileTransferNATIVE_file} ->
                    fun() ->
                           AcTuAlReS =
                               (catch
                                    'CosFileTransfer_FileTransferSession':append(FSS,
                                                                                 FileS,
                                                                                 FileT)),
                           case AcTuAlReS of
                               ok ->
                                   io:format("------ CORRECT RESULT ---"
                                             "---~n~p~n",
                                             [AcTuAlReS]),
                                   AcTuAlReS;
                               _ ->
                                   io:format("###### ERROR ERROR ######"
                                             "~n~p~n",
                                             [AcTuAlReS]),
                                   exit(AcTuAlReS)
                           end
                    end(),
                    fun() ->
                           AcTuAlReS =
                               (catch
                                    'CosFileTransfer_FileTransferSession':insert(FSS,
                                                                                 FileS2,
                                                                                 FileT,
                                                                                 7)),
                           case AcTuAlReS of
                               ok ->
                                   io:format("------ CORRECT RESULT ---"
                                             "---~n~p~n",
                                             [AcTuAlReS]),
                                   AcTuAlReS;
                               _ ->
                                   io:format("###### ERROR ERROR ######"
                                             "~n~p~n",
                                             [AcTuAlReS]),
                                   exit(AcTuAlReS)
                           end
                    end();
                _ ->
                    ok
            end,
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':delete(FSS,
                                                                         FileS)),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':delete(FSS,
                                                                         FileS2)),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':delete(FST,
                                                                         FileT)),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            timer:sleep(2000),
            #any{value = Count3} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosPropertyService_PropertySet':get_property_value(Dir,
                                                                                    "num_c"
                                                                                    "hildr"
                                                                                    "en")),
                       case AcTuAlReS of
                           {any,_,_} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            fun() ->
                   AcTuAlReS = (catch Count1 == Count3),
                   case AcTuAlReS of
                       true ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS = (catch corba_object:non_existent(FSS)),
                   case AcTuAlReS of
                       false ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS = (catch corba_object:non_existent(FST)),
                   case AcTuAlReS of
                       false ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':logout(FSS)),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':logout(FST)),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            timer:sleep(2000),
            fun() ->
                   AcTuAlReS = (catch corba_object:non_existent(FSS)),
                   case AcTuAlReS of
                       true ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS = (catch corba_object:non_existent(FST)),
                   case AcTuAlReS of
                       true ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            remote_apply(Node,
                                         fileTransfer_SUITE,
                                         uninstall_data,
                                         [Name])),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            stop_orber_remote(Node, normal),
            ok
    end.

fts_ftp_dir_api(doc) ->
    ["CosFileTransfer FTP FileTransferSession API tests.",""];
fts_ftp_dir_api(suite) ->
    [];
fts_ftp_dir_api(Config) ->
    {ok,Node} = create_node("ftp_dir_api", 4009, normal),
    dir_helper(Config,
               'FTP',
               ["/","incoming"],
               Node,
               4009,
               "ftp_dir_api").

fts_native_dir_api(doc) ->
    ["CosFileTransfer NATIVE FileTransferSession API tests.",""];
fts_native_dir_api(suite) ->
    [];
fts_native_dir_api(Config) ->
    {ok,Node} = create_node("native_dir_api", 4010, normal),
    {ok,Pwd} = file:get_cwd(),
    dir_helper(Config,
               {'NATIVE',cosFileTransferNATIVE_file},
               filename:split(Pwd),
               Node,
               4010,
               "native_dir_api").

dir_helper(Config, WhichType, TEST_DIR, Node, Port, Name) ->
    case ftp_host(Config) of
        {skipped,SkippedReason} ->
            {skipped,SkippedReason};
        Host ->
            TEST_DIR_LEVEL1 = TEST_DIR ++ [create_name(remove_me_dir1)],
            TEST_DIR_LEVEL2 =
                TEST_DIR_LEVEL1 ++ [create_name(remove_me_dir2)],
            io:format("<<<<<< CosFileTransfer Testing Configuration >>>"
                      ">>>~n",
                      []),
            io:format("Top Dir: ~p~nLevel2 Dir: ~p~n",
                      [TEST_DIR_LEVEL1,TEST_DIR_LEVEL2]),
            fun() ->
                   AcTuAlReS =
                       (catch
                            remote_apply(Node,
                                         fileTransfer_SUITE,
                                         install_data,
                                         [tcp,{WhichType,Host,Name}])),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            VFS =
                fun() ->
                       AcTuAlReS =
                           (catch
                                corba:string_to_object("corbaname::1.2@"
                                                       "localhost:"
                                                       ++
                                                       integer_to_list(Port)
                                                       ++
                                                       "/NameService#"
                                                       ++
                                                       Name)),
                       case AcTuAlReS of
                           {'IOP_IOR',
                            "IDL:omg.org/CosFileTransfer/VirtualFileSys"
                            "tem:1.0",
                            _} ->
                               io:format("------ CORRECT RESULT (~p) --"
                                         "----~n",
                                         [470]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            {FS,DirS} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_VirtualFileSystem':login(VFS,
                                                                          "anony"
                                                                          "mous",
                                                                          "fileT"
                                                                          "ransf"
                                                                          "er_SU"
                                                                          "ITE@l"
                                                                          "ocalh"
                                                                          "ost",
                                                                          "anony"
                                                                          "mous")),
                       case AcTuAlReS of
                           {{'IOP_IOR',_,_},_} ->
                               io:format("------ CORRECT RESULT (~p) --"
                                         "----~n",
                                         [474]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_name'(DirS)),
                   case AcTuAlReS of
                       [_H|_] ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_complete_file_name'(DirS)),
                   case AcTuAlReS of
                       [_H|_] ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_parent'(DirS)),
                   case AcTuAlReS of
                       {'IOP_IOR',[],[]} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_associated_session'(DirS)),
                   case AcTuAlReS of
                       FS ->
                           io:format("------ CORRECT RESULT (~p) ------"
                                     "~n",
                                     [484]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            Dir1 =
                'CosFileTransfer_FileTransferSession':create_directory(FS,
                                                                       TEST_DIR_LEVEL1),
            io:format("<<<<<< CosFileTransfer Testing Properties >>>>>>"
                      "~n",
                      []),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_allowed_property_types(Dir1)),
                   case AcTuAlReS of
                       {ok,[tk_long,tk_boolean]} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_allowed_properties(Dir1)),
                   case AcTuAlReS of
                       {ok,[_,_]} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':define_property_with_mode(Dir1,
                                                                                  "num_c"
                                                                                  "hildr"
                                                                                  "en",
                                                                                  #any{typecode =
                                                                                           tk_long,
                                                                                       value =
                                                                                           0},
                                                                                  fixed_readonly)),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':define_property_with_mode(Dir1,
                                                                                  "wrong",
                                                                                  #any{typecode =
                                                                                           tk_long,
                                                                                       value =
                                                                                           0},
                                                                                  fixed_readonly)),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':define_property_with_mode(Dir1,
                                                                                  "num_c"
                                                                                  "hildr"
                                                                                  "en",
                                                                                  #any{typecode =
                                                                                           tk_short,
                                                                                       value =
                                                                                           0},
                                                                                  fixed_readonly)),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':define_property_with_mode(Dir1,
                                                                                  "num_c"
                                                                                  "hildr"
                                                                                  "en",
                                                                                  #any{typecode =
                                                                                           tk_long,
                                                                                       value =
                                                                                           0},
                                                                                  fixed_normal)),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':define_properties_with_modes(Dir1,
                                                                                     [#'CosPropertyService_PropertyDef'{property_name =
                                                                                                                            "num_c"
                                                                                                                            "hildr"
                                                                                                                            "en",
                                                                                                                        property_value =
                                                                                                                            #any{typecode =
                                                                                                                                     tk_long,
                                                                                                                                 value =
                                                                                                                                     0},
                                                                                                                        property_mode =
                                                                                                                            fixed_readonly}])),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_property_mode(Dir1,
                                                                          "num_c"
                                                                          "hildr"
                                                                          "en")),
                   case AcTuAlReS of
                       fixed_readonly ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_property_modes(Dir1,
                                                                           ["num_c"
                                                                            "hildr"
                                                                            "en"])),
                   case AcTuAlReS of
                       {true,
                        [#'CosPropertyService_PropertyMode'{property_name =
                                                                "num_ch"
                                                                "ildren",
                                                            property_mode =
                                                                fixed_readonly}]} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':set_property_mode(Dir1,
                                                                          "num_c"
                                                                          "hildr"
                                                                          "en",
                                                                          fixed_readonly)),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':set_property_modes(Dir1,
                                                                           [#'CosPropertyService_PropertyMode'{property_name =
                                                                                                                   "num_c"
                                                                                                                   "hildr"
                                                                                                                   "en",
                                                                                                               property_mode =
                                                                                                                   fixed_readonly}])),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':set_property_modes(Dir1,
                                                                           [#'CosPropertyService_PropertyMode'{property_name =
                                                                                                                   "wrong",
                                                                                                               property_mode =
                                                                                                                   fixed_readonly}])),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':set_property_modes(Dir1,
                                                                           [#'CosPropertyService_PropertyMode'{property_name =
                                                                                                                   "num_c"
                                                                                                                   "hildr"
                                                                                                                   "en",
                                                                                                               property_mode =
                                                                                                                   fixed_normal}])),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':define_property(Dir1,
                                                                        "num_c"
                                                                        "hildr"
                                                                        "en",
                                                                        #any{typecode =
                                                                                 tk_long,
                                                                             value =
                                                                                 0})),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':define_property(Dir1,
                                                                        "wrong",
                                                                        #any{typecode =
                                                                                 tk_long,
                                                                             value =
                                                                                 0})),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':define_property(Dir1,
                                                                        "num_c"
                                                                        "hildr"
                                                                        "en",
                                                                        #any{typecode =
                                                                                 tk_short,
                                                                             value =
                                                                                 0})),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':define_property(Dir1,
                                                                        "num_c"
                                                                        "hildr"
                                                                        "en",
                                                                        #any{typecode =
                                                                                 tk_long,
                                                                             value =
                                                                                 0})),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':define_properties(Dir1,
                                                                          [#'CosPropertyService_Property'{property_name =
                                                                                                              "num_c"
                                                                                                              "hildr"
                                                                                                              "en",
                                                                                                          property_value =
                                                                                                              #any{typecode =
                                                                                                                       tk_long,
                                                                                                                   value =
                                                                                                                       0}}])),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':define_properties(Dir1,
                                                                          [#'CosPropertyService_Property'{property_name =
                                                                                                              "wrong",
                                                                                                          property_value =
                                                                                                              #any{typecode =
                                                                                                                       tk_long,
                                                                                                                   value =
                                                                                                                       0}}])),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':define_properties(Dir1,
                                                                          [#'CosPropertyService_Property'{property_name =
                                                                                                              "num_c"
                                                                                                              "hildr"
                                                                                                              "en",
                                                                                                          property_value =
                                                                                                              #any{typecode =
                                                                                                                       tk_short,
                                                                                                                   value =
                                                                                                                       0}}])),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_number_of_properties(Dir1)),
                   case AcTuAlReS of
                       2 ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_all_property_names(Dir1,
                                                                               2)),
                   case AcTuAlReS of
                       {ok,
                        ["num_children","is_directory"],
                        {'IOP_IOR',[],[]}} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_all_property_names(Dir1,
                                                                               1)),
                   case AcTuAlReS of
                       {ok,["is_directory"],_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_property_value(Dir1,
                                                                           "num_c"
                                                                           "hildr"
                                                                           "en")),
                   case AcTuAlReS of
                       #any{} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_property_value(Dir1,
                                                                           "is_di"
                                                                           "recto"
                                                                           "ry")),
                   case AcTuAlReS of
                       #any{} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_property_value(Dir1,
                                                                           "wrong")),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_properties(Dir1,
                                                                       ["num_c"
                                                                        "hildr"
                                                                        "en"])),
                   case AcTuAlReS of
                       {true,
                        [#'CosPropertyService_Property'{property_name =
                                                            "num_childr"
                                                            "en"}]} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_properties(Dir1,
                                                                       ["wrong"])),
                   case AcTuAlReS of
                       {false,
                        [#'CosPropertyService_Property'{property_name =
                                                            "wrong"}]} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_all_properties(Dir1,
                                                                           1)),
                   case AcTuAlReS of
                       {ok,[_],_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_all_properties(Dir1,
                                                                           2)),
                   case AcTuAlReS of
                       {ok,[_,_],{'IOP_IOR',[],[]}} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':delete_property(Dir1,
                                                                        "num_c"
                                                                        "hildr"
                                                                        "en")),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':delete_property(Dir1,
                                                                        "wrong")),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':delete_properties(Dir1,
                                                                          ["num_c"
                                                                           "hildr"
                                                                           "en"])),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':delete_properties(Dir1,
                                                                          ["wrong"])),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':delete_all_properties(Dir1)),
                   case AcTuAlReS of
                       false ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':is_property_defined(Dir1,
                                                                            "num_c"
                                                                            "hildr"
                                                                            "en")),
                   case AcTuAlReS of
                       true ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':is_property_defined(Dir1,
                                                                            "wrong")),
                   case AcTuAlReS of
                       false ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':list(Dir1, 1000)),
                   case AcTuAlReS of
                       {ok,[],_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosPropertyService_PropertySet':get_property_value(Dir1,
                                                                                "num_c"
                                                                                "hildr"
                                                                                "en")),
                   case AcTuAlReS of
                       #any{value = 0} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            Dir2 =
                'CosFileTransfer_FileTransferSession':create_directory(FS,
                                                                       TEST_DIR_LEVEL2),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosPropertyService_PropertySet':get_property_value(Dir1,
                                                                                "num_c"
                                                                                "hildr"
                                                                                "en")),
                   case AcTuAlReS of
                       #any{value = 1} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_all_properties(Dir1,
                                                                           2)),
                   case AcTuAlReS of
                       {ok,[_,_],{'IOP_IOR',[],[]}} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            {_,_,Iterator1} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_Directory':get_all_properties(Dir1,
                                                                               1)),
                       case AcTuAlReS of
                           {ok,[_],_} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosPropertyService_PropertiesIterator':next_n(Iterator1,
                                                                           4)),
                   case AcTuAlReS of
                       {false,[_]} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            {_,_,Iterator0} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_Directory':get_all_properties(Dir1,
                                                                               0)),
                       case AcTuAlReS of
                           {ok,[],_} ->
                               io:format("------ CORRECT RESULT ------~"
                                         "n~p~n",
                                         [AcTuAlReS]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosPropertyService_PropertiesIterator':next_n(Iterator0,
                                                                           4)),
                   case AcTuAlReS of
                       {false,
                        [_,
                         {'CosPropertyService_Property',
                          "num_children",
                          {any,tk_long,1}}]} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':get_properties(Dir1,
                                                                       ["num_c"
                                                                        "hildr"
                                                                        "en"])),
                   case AcTuAlReS of
                       {true,
                        [#'CosPropertyService_Property'{property_name =
                                                            "num_childr"
                                                            "en"}]} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            {ok,[#'CosFileTransfer_FileWrapper'{the_file = DirRef}],_} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_Directory':list(Dir1,
                                                                 1000)),
                       case AcTuAlReS of
                           {ok,
                            [{'CosFileTransfer_FileWrapper',
                              _,
                              ndirectory}],
                            _} ->
                               io:format("------ CORRECT RESULT (~p) --"
                                         "----~n",
                                         [659]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_complete_file_name'(DirRef)),
                   case AcTuAlReS of
                       TEST_DIR_LEVEL2 ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            #'CosFileTransfer_FileWrapper'{the_file = Dir3} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_FileTransferSession':get_file(FS,
                                                                               TEST_DIR_LEVEL1)),
                       case AcTuAlReS of
                           {'CosFileTransfer_FileWrapper',_,ndirectory} ->
                               io:format("------ CORRECT RESULT (~p) --"
                                         "----~n",
                                         [666]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            {ok,[#'CosFileTransfer_FileWrapper'{the_file = DirRef2}],_} =
                fun() ->
                       AcTuAlReS =
                           (catch
                                'CosFileTransfer_Directory':list(Dir3,
                                                                 1000)),
                       case AcTuAlReS of
                           {ok,
                            [{'CosFileTransfer_FileWrapper',
                              _,
                              ndirectory}],
                            _} ->
                               io:format("------ CORRECT RESULT (~p) --"
                                         "----~n",
                                         [671]),
                               AcTuAlReS;
                           _ ->
                               io:format("###### ERROR ERROR ######~n~p"
                                         "~n",
                                         [AcTuAlReS]),
                               exit(AcTuAlReS)
                       end
                end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':'_get_complete_file_name'(DirRef2)),
                   case AcTuAlReS of
                       TEST_DIR_LEVEL2 ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':delete(FS,
                                                                         Dir1)),
                   case AcTuAlReS of
                       {'EXCEPTION',_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':delete(FS,
                                                                         Dir2)),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_Directory':list(Dir1, 1000)),
                   case AcTuAlReS of
                       {ok,[],_} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':delete(FS,
                                                                         Dir1)),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':get_file(FS,
                                                                           TEST_DIR_LEVEL1)),
                   case AcTuAlReS of
                       {'EXCEPTION',
                        {'CosFileTransfer_FileNotFoundException',_,_}} ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS = (catch corba_object:non_existent(FS)),
                   case AcTuAlReS of
                       false ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            'CosFileTransfer_FileTransferSession':logout(FS)),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            timer:sleep(1000),
            fun() ->
                   AcTuAlReS = (catch corba_object:non_existent(FS)),
                   case AcTuAlReS of
                       true ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            fun() ->
                   AcTuAlReS =
                       (catch
                            remote_apply(Node,
                                         fileTransfer_SUITE,
                                         uninstall_data,
                                         [Name])),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            stop_orber_remote(Node, normal),
            ok
    end.

ftp_host(Config) ->
    case test_server:lookup_config(ftp_remote_host, Config) of
        undefined ->
            {skipped,
             "The configuration parameter 'ftp_remote_host' not defined"
             "."};
        Host ->
            Host
    end.

loop_files([]) ->
    io:format("@@@ DONE @@@~n", []);
loop_files([#'CosFileTransfer_FileWrapper'{the_file = H}|T]) ->
    FullName = 'CosFileTransfer_File':'_get_complete_file_name'(H),
    Name = 'CosFileTransfer_File':'_get_name'(H),
    io:format("FULL NAME: ~p   SHORT NAME: ~p~n", [FullName,Name]),
    loop_files(T).

create_file_on_source_node('FTP', _Config, Host, FileName, Path, Data) ->
    io:format("<<<<<< CosFileTransfer Testing File >>>>>>~n", []),
    io:format("Host: ~p~nPath: ~p~nFile: ~p~n", [Host,Path,FileName]),
    {ok,Pid} =
        fun() ->
               AcTuAlReS =
                   (catch inets:start(ftpc, [{host,Host}], stand_alone)),
               case AcTuAlReS of
                   {ok,_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    fun() ->
           AcTuAlReS =
               (catch
                    ftp:user(Pid,
                             "anonymous",
                             "fileTransfer_SUITE@localhost")),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS = (catch ftp:cd(Pid, Path)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch ftp:send_bin(Pid, list_to_binary(Data), FileName)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS = (catch inets:stop(ftpc, Pid)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end();
create_file_on_source_node({'NATIVE',_},
                           _Config,
                           Host,
                           FileName,
                           Path,
                           Data) ->
    io:format("<<<<<< CosFileTransfer Testing File >>>>>>~n", []),
    io:format("Host: ~p~nPath: ~p~nFile: ~p~n", [Host,Path,FileName]),
    fun() ->
           AcTuAlReS =
               (catch file:write_file(FileName, list_to_binary(Data))),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end().

create_name(Type) ->
    {MSec,Sec,USec} = now(),
    lists:concat([Type,'_',MSec,'_',Sec,'_',USec]).

create_node(Name, Port, normal) ->
    Args = basic_args(Name),
    create_node(Name, Port, 10, normal, Args, []);
create_node(Name, {Port,_Depth}, ssl) ->
    Dir = filename:join([code:lib_dir(ssl),"examples","certs","etc"]),
    Args = basic_args(Name),
    {ok,Node} = create_node(list_to_atom(Name), Port, 10, ssl, Args, []),
    rpc:call(Node,
             application,
             set_env,
             [cosFileTransfer,
              ssl_client_certfile,
              filename:join([Dir,"client","cert.pem"])]),
    rpc:call(Node,
             application,
             set_env,
             [cosFileTransfer,
              ssl_client_cacertfile,
              filename:join([Dir,"client","cacerts.pem"])]),
    rpc:call(Node,
             application,
             set_env,
             [cosFileTransfer,
              ssl_client_keyfile,
              filename:join([Dir,"client","key.pem"])]),
    rpc:call(Node,
             application,
             set_env,
             [cosFileTransfer,ssl_client_verify,1]),
    rpc:call(Node,
             application,
             set_env,
             [cosFileTransfer,ssl_client_depth,0]),
    rpc:call(Node,
             application,
             set_env,
             [cosFileTransfer,
              ssl_server_certfile,
              filename:join([Dir,"server","cert.pem"])]),
    rpc:call(Node,
             application,
             set_env,
             [cosFileTransfer,
              ssl_server_cacertfile,
              filename:join([Dir,"server","cacerts.pem"])]),
    rpc:call(Node,
             application,
             set_env,
             [cosFileTransfer,
              ssl_server_keyfile,
              filename:join([Dir,"server","key.pem"])]),
    rpc:call(Node,
             application,
             set_env,
             [cosFileTransfer,ssl_server_verify,1]),
    rpc:call(Node,
             application,
             set_env,
             [cosFileTransfer,ssl_server_depth,0]),
    {ok,Node}.

create_node(Name, Port, Retries, Type, Args, Options) ->
    [_,Host] =
        fun() ->
               AcTuAlReS =
                   (catch string:tokens(atom_to_list(node()), [$@])),
               case AcTuAlReS of
                   [_,_] ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    case starter(Host, Name, Args) of
        {ok,NewNode} ->
            fun() ->
                   AcTuAlReS = (catch net_adm:ping(NewNode)),
                   case AcTuAlReS of
                       pong ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            {ok,Cwd} = file:get_cwd(),
            Path = code:get_path(),
            fun() ->
                   AcTuAlReS =
                       (catch rpc:call(NewNode, file, set_cwd, [Cwd])),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            true = rpc:call(NewNode, code, set_path, [Path]),
            fun() ->
                   AcTuAlReS =
                       (catch
                            start_orber_remote(NewNode,
                                               Type,
                                               Options,
                                               Port)),
                   case AcTuAlReS of
                       ok ->
                           io:format("------ CORRECT RESULT ------~n~p~"
                                     "n",
                                     [AcTuAlReS]),
                           AcTuAlReS;
                       _ ->
                           io:format("###### ERROR ERROR ######~n~p~n",
                                     [AcTuAlReS]),
                           exit(AcTuAlReS)
                   end
            end(),
            spawn_link(NewNode, fileTransfer_SUITE, slave_sup, []),
            rpc:multicall([node()|nodes()], global, sync, []),
            {ok,NewNode};
        {error,Reason} when Retries == 0 ->
            {error,Reason};
        {error,Reason} ->
            io:format("Could not start slavenode ~p ~p retrying~n",
                      [{Host,Name,Args},Reason]),
            timer:sleep(500),
            create_node(Name, Port, Retries - 1, Type, Args, Options)
    end.

starter(Host, Name, Args) ->
    slave:start(Host, Name, Args).

slave_sup() ->
    process_flag(trap_exit, true),
    receive
        {'EXIT',_,_} ->
            ignore
    end.

remote_apply(N, M, F, A) ->
    case rpc:call(N, M, F, A) of
        {badrpc,Reason} ->
            exit(Reason);
        Other ->
            Other
    end.

stop_orber_remote(Node, ssl) ->
    rpc:call(Node, ssl, stop, []),
    rpc:call(Node, crypto, stop, []),
    orb_rpc_blast(Node, ssl);
stop_orber_remote(Node, Type) ->
    orb_rpc_blast(Node, Type).

orb_rpc_blast(Node, _) ->
    rpc:call(Node, cosFileTransferApp, stop, []),
    rpc:call(Node, cosProperty, stop, []),
    rpc:call(Node, cosFileTransferApp, uninstall, []),
    rpc:call(Node, cosProperty, uninstall, []),
    rpc:call(Node, orber, jump_stop, []).

start_orber_remote(Node, ssl, _Options, Port) ->
    rpc:call(Node, ssl, start, []),
    rpc:call(Node, crypto, start, []),
    rpc:call(Node, ssl, seed, ["testing"]),
    orb_rpc_setup(Node, ssl, Port);
start_orber_remote(Node, Type, _, Port) ->
    orb_rpc_setup(Node, Type, Port).

orb_rpc_setup(Node, _, Port) ->
    rpc:call(Node, orber, jump_start, [Port]),
    rpc:call(Node, cosProperty, install, []),
    rpc:call(Node, cosProperty, start, []),
    rpc:call(Node, cosFileTransferApp, install, []).

basic_args(_Name) ->
    TestLibs = filename:dirname(code:which(fileTransfer_SUITE)),
    " -orber orber_debug_level 10"
    ++
    " -pa "
    ++
    TestLibs
    ++
    " -pa "
    ++
    filename:join(TestLibs, "all_SUITE_data")
    ++
    " -pa " ++ filename:dirname(code:which(cosFileTransferApp)).

install_data(Protocol, {WhichType,Host,Name}) ->
    io:format("<<<<<< Starting ~p/~p VFS at ~p/~p>>>>>>~n",
              [Protocol,WhichType,Host,Name]),
    VFS =
        fun() ->
               AcTuAlReS =
                   (catch
                        cosFileTransferApp:create_VFS(WhichType,
                                                      [],
                                                      Host,
                                                      21,
                                                      [{protocol,
                                                        Protocol}])),
               case AcTuAlReS of
                   {_,_,_,_,_,_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    NS = corba:resolve_initial_references("NameService"),
    NC1 = lname_component:set_id(lname_component:create(), Name),
    N = lname:insert_component(lname:create(), 1, NC1),
    'CosNaming_NamingContext':rebind(NS, N, VFS).

uninstall_data(Name) ->
    VFS =
        fun() ->
               AcTuAlReS =
                   (catch
                        corba:string_to_object("corbaname:rir:/NameServ"
                                               "ice#"
                                               ++
                                               Name)),
               case AcTuAlReS of
                   {_,_,_,_,_,_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    fun() ->
           AcTuAlReS = (catch corba:dispose(VFS)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    ok.



