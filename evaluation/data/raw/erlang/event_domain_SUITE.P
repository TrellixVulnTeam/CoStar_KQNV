-file("test/lib/cosEventDomain/test/event_domain_SUITE.erl", 1).

-module(event_domain_SUITE).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/lib/cosEventDomain/test/event_domain_SUITE.erl", 26).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/orber-3.6.24/include/corba.hrl",
      1).

-record(orb_ImplDef,{node,module,typename,start = start,args = [[]],pid}).

-record(any,{typecode,value}).

-record(fixed,{digits,scale,value}).

-record('IOP_ServiceContext',{context_id,context_data}).

-record('InvalidName',{'OE_ID' = "IDL:omg.org/CORBA/ORB/InvalidName:1.0"}).

-record('UNKNOWN',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('BAD_PARAM',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('NO_MEMORY',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('IMP_LIMIT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('COMM_FAILURE',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('INV_OBJREF',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('NO_PERMISSION',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('INTERNAL',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('MARSHAL',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INITIALIZE',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('NO_IMPLEMENT',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('BAD_TYPECODE',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('BAD_OPERATION',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('NO_RESOURCES',{'OE_ID' = "",
                        minor = 1163001856,
                        completion_status}).

-record('NO_RESPONSE',{'OE_ID' = "",
                       minor = 1163001856,
                       completion_status}).

-record('PERSIST_STORE',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('BAD_INV_ORDER',{'OE_ID' = "",
                         minor = 1163001856,
                         completion_status}).

-record('TRANSIENT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('FREE_MEM',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INV_IDENT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INV_FLAG',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('INTF_REPOS',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('BAD_CONTEXT',{'OE_ID' = "",
                       minor = 1163001856,
                       completion_status}).

-record('OBJ_ADAPTER',{'OE_ID' = "",
                       minor = 1163001856,
                       completion_status}).

-record('DATA_CONVERSION',{'OE_ID' = "",
                           minor = 1163001856,
                           completion_status}).

-record('OBJECT_NOT_EXIST',{'OE_ID' = "",
                            minor = 1163001856,
                            completion_status}).

-record('TRANSACTION_REQUIRED',{'OE_ID' = "",
                                minor = 1163001856,
                                completion_status}).

-record('TRANSACTION_ROLLEDBACK',{'OE_ID' = "",
                                  minor = 1163001856,
                                  completion_status}).

-record('INVALID_TRANSACTION',{'OE_ID' = "",
                               minor = 1163001856,
                               completion_status}).

-record('INV_POLICY',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('CODESET_INCOMPATIBLE',{'OE_ID' = "",
                                minor = 1163001856,
                                completion_status}).

-record('REBIND',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('TIMEOUT',{'OE_ID' = "",minor = 1163001856,completion_status}).

-record('TRANSACTION_UNAVAILABLE',{'OE_ID' = "",
                                   minor = 1163001856,
                                   completion_status}).

-record('TRANSACTION_MODE',{'OE_ID' = "",
                            minor = 1163001856,
                            completion_status}).

-record('BAD_QOS',{'OE_ID' = "",minor = 1163001856,completion_status}).

-file("test/lib/cosEventDomain/test/event_domain_SUITE.erl", 27).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosNotification-1.1.18/include/CosNotifyChannelAdmin.hrl",
      1).

-record('CosNotifyChannelAdmin_ConnectionAlreadyActive',{'OE_ID' =
                                                             "IDL:omg.o"
                                                             "rg/CosNot"
                                                             "ifyChanne"
                                                             "lAdmin/Co"
                                                             "nnectionA"
                                                             "lreadyAct"
                                                             "ive:1.0"}).

-record('CosNotifyChannelAdmin_ConnectionAlreadyInactive',{'OE_ID' =
                                                               "IDL:omg"
                                                               ".org/Co"
                                                               "sNotify"
                                                               "Channel"
                                                               "Admin/C"
                                                               "onnecti"
                                                               "onAlrea"
                                                               "dyInact"
                                                               "ive:1.0"}).

-record('CosNotifyChannelAdmin_NotConnected',{'OE_ID' =
                                                  "IDL:omg.org/CosNotif"
                                                  "yChannelAdmin/NotCon"
                                                  "nected:1.0"}).

-record('CosNotifyChannelAdmin_AdminNotFound',{'OE_ID' =
                                                   "IDL:omg.org/CosNoti"
                                                   "fyChannelAdmin/Admi"
                                                   "nNotFound:1.0"}).

-record('CosNotifyChannelAdmin_ProxyNotFound',{'OE_ID' =
                                                   "IDL:omg.org/CosNoti"
                                                   "fyChannelAdmin/Prox"
                                                   "yNotFound:1.0"}).

-record('CosNotifyChannelAdmin_AdminLimit',{name,value}).

-record('CosNotifyChannelAdmin_AdminLimitExceeded',{'OE_ID' =
                                                        "IDL:omg.org/Co"
                                                        "sNotifyChannel"
                                                        "Admin/AdminLim"
                                                        "itExceeded:1.0",
                                                    admin_property_err}).

-record('CosNotifyChannelAdmin_ChannelNotFound',{'OE_ID' =
                                                     "IDL:omg.org/CosNo"
                                                     "tifyChannelAdmin/"
                                                     "ChannelNotFound:1"
                                                     ".0"}).

-file("test/lib/cosEventDomain/test/event_domain_SUITE.erl", 28).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosNotification-1.1.18/include/CosNotification.hrl",
      1).

-record('CosNotification_Property',{name,value}).

-record('CosNotification_EventType',{domain_name,type_name}).

-record('CosNotification_PropertyRange',{low_val,high_val}).

-record('CosNotification_NamedPropertyRange',{name,range}).

-record('CosNotification_PropertyError',{code,name,available_range}).

-record('CosNotification_UnsupportedQoS',{'OE_ID' =
                                              "IDL:omg.org/CosNotificat"
                                              "ion/UnsupportedQoS:1.0",
                                          qos_err}).

-record('CosNotification_UnsupportedAdmin',{'OE_ID' =
                                                "IDL:omg.org/CosNotific"
                                                "ation/UnsupportedAdmin"
                                                ":1.0",
                                            admin_err}).

-record('CosNotification_FixedEventHeader',{event_type,event_name}).

-record('CosNotification_EventHeader',{fixed_header,variable_header}).

-record('CosNotification_StructuredEvent',{header,
                                           filterable_data,
                                           remainder_of_body}).

-file("test/lib/cosEventDomain/test/event_domain_SUITE.erl", 29).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosEventDomain-1.1.12/include/CosEventDomainAdmin.hrl",
      1).

-record('CosEventDomainAdmin_Connection',{supplier_id,
                                          consumer_id,
                                          ctype,
                                          notification_style}).

-record('CosEventDomainAdmin_CycleCreationForbidden',{'OE_ID' =
                                                          "IDL:omg.org/"
                                                          "CosEventDoma"
                                                          "inAdmin/Cycl"
                                                          "eCreationFor"
                                                          "bidden:1.0",
                                                      cyc}).

-record('CosEventDomainAdmin_DiamondCreationForbidden',{'OE_ID' =
                                                            "IDL:omg.or"
                                                            "g/CosEvent"
                                                            "DomainAdmi"
                                                            "n/DiamondC"
                                                            "reationFor"
                                                            "bidden:1.0",
                                                        diam}).

-record('CosEventDomainAdmin_ConnectionNotFound',{'OE_ID' =
                                                      "IDL:omg.org/CosE"
                                                      "ventDomainAdmin/"
                                                      "ConnectionNotFou"
                                                      "nd:1.0"}).

-record('CosEventDomainAdmin_AlreadyExists',{'OE_ID' =
                                                 "IDL:omg.org/CosEventD"
                                                 "omainAdmin/AlreadyExi"
                                                 "sts:1.0"}).

-record('CosEventDomainAdmin_DomainNotFound',{'OE_ID' =
                                                  "IDL:omg.org/CosEvent"
                                                  "DomainAdmin/DomainNo"
                                                  "tFound:1.0"}).

-file("test/lib/cosEventDomain/test/event_domain_SUITE.erl", 31).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/cosEventDomain-1.1.12/src/cosEventDomainApp.hrl",
      1).

-file("test/lib/cosEventDomain/test/event_domain_SUITE.erl", 32).

-export([all/0,
         suite/0,
         groups/0,
         init_per_group/2,
         end_per_group/2,
         event_domain_api/1,
         event_domain_factory_api/1,
         cases/0,
         init_per_suite/1,
         end_per_suite/1,
         init_per_testcase/2,
         end_per_testcase/2,
         app_test/1]).

suite() ->
    [{ct_hooks,[ts_install_cth]}].

all() ->
    cases().

groups() ->
    [].

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, Config) ->
    Config.

cases() ->
    [event_domain_api,event_domain_factory_api,app_test].

init_per_testcase(_Case, Config) ->
    Dog = test_server:timetrap(test_server:minutes(5)),
    [{watchdog,Dog}|Config].

end_per_testcase(_Case, Config) ->
    Dog = test_server:lookup_config(watchdog, Config),
    test_server:timetrap_cancel(Dog),
    ok.

init_per_suite(Config) when is_list(Config) ->
    mnesia:delete_schema([node()]),
    mnesia:create_schema([node()]),
    ok = corba:orb_init([{flags,2},{orber_debug_level,10}]),
    orber:install([node()]),
    application:start(mnesia),
    application:start(orber),
    cosEventApp:install(),
    cosEventApp:start(),
    cosNotificationApp:install(),
    cosNotificationApp:start(),
    cosEventDomainApp:install(),
    cosEventDomainApp:start(),
    Config.

end_per_suite(Config) when is_list(Config) ->
    cosEventDomainApp:stop(),
    cosEventDomainApp:uninstall(),
    cosNotificationApp:stop(),
    cosNotificationApp:uninstall(),
    cosEventApp:stop(),
    cosEventApp:uninstall(),
    application:stop(orber),
    application:stop(mnesia),
    mnesia:delete_schema([node()]),
    Config.

app_test(doc) ->
    [];
app_test(suite) ->
    [];
app_test(_Config) ->
    ok = test_server:app_test(cosEventDomain),
    ok.

event_domain_api(doc) ->
    ["Testing the CosEventDomain Domain API",""];
event_domain_api(suite) ->
    [];
event_domain_api(_Config) ->
    ChFac =
        fun() ->
               AcTuAlReS =
                   (catch
                        cosNotificationApp:start_global_factory([{pullInterval,
                                                                  1}])),
               case AcTuAlReS of
                   {_,key,_,_,_,_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    {Ch0,_} =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosNotifyChannelAdmin_EventChannelFactory':create_channel(ChFac,
                                                                                   [],
                                                                                   [])),
               case AcTuAlReS of
                   {{_,key,_,_,_,_},_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    Fac =
        fun() ->
               AcTuAlReS = (catch cosEventDomainApp:start_factory()),
               case AcTuAlReS of
                   {_,key,_,_,_,_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    {ED,_} =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosEventDomainAdmin_EventDomainFactory':create_event_domain(Fac,
                                                                                     [],
                                                                                     [])),
               case AcTuAlReS of
                   {{_,key,_,_,_,_},_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    ID0 = 'CosEventDomainAdmin_EventDomain':add_channel(ED, Ch0),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_channel(ED,
                                                                  ID0)),
           case AcTuAlReS of
               Ch0 ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_channels(ED)),
           case AcTuAlReS of
               [0] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_channel(ED,
                                                                  100)),
           case AcTuAlReS of
               {'EXCEPTION',{'CosNotifyChannelAdmin_ChannelNotFound',_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':remove_channel(ED,
                                                                     100)),
           case AcTuAlReS of
               {'EXCEPTION',{'CosNotifyChannelAdmin_ChannelNotFound',_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':remove_channel(ED,
                                                                     0)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_channels(ED)),
           case AcTuAlReS of
               [] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':remove_channel(ED,
                                                                     0)),
           case AcTuAlReS of
               {'EXCEPTION',{'CosNotifyChannelAdmin_ChannelNotFound',_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    {Ch1,_} =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosNotifyChannelAdmin_EventChannelFactory':create_channel(ChFac,
                                                                                   [],
                                                                                   [])),
               case AcTuAlReS of
                   {{_,key,_,_,_,_},_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    {Ch2,_} =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosNotifyChannelAdmin_EventChannelFactory':create_channel(ChFac,
                                                                                   [],
                                                                                   [])),
               case AcTuAlReS of
                   {{_,key,_,_,_,_},_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    {Ch3,_} =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosNotifyChannelAdmin_EventChannelFactory':create_channel(ChFac,
                                                                                   [],
                                                                                   [])),
               case AcTuAlReS of
                   {{_,key,_,_,_,_},_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    {Ch4,_} =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosNotifyChannelAdmin_EventChannelFactory':create_channel(ChFac,
                                                                                   [],
                                                                                   [])),
               case AcTuAlReS of
                   {{_,key,_,_,_,_},_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    {Ch5,_} =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosNotifyChannelAdmin_EventChannelFactory':create_channel(ChFac,
                                                                                   [],
                                                                                   [])),
               case AcTuAlReS of
                   {{_,key,_,_,_,_},_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    {Ch6,_} =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosNotifyChannelAdmin_EventChannelFactory':create_channel(ChFac,
                                                                                   [],
                                                                                   [])),
               case AcTuAlReS of
                   {{_,key,_,_,_,_},_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    {Ch7,_} =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosNotifyChannelAdmin_EventChannelFactory':create_channel(ChFac,
                                                                                   [],
                                                                                   [])),
               case AcTuAlReS of
                   {{_,key,_,_,_,_},_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    {Ch8,_} =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosNotifyChannelAdmin_EventChannelFactory':create_channel(ChFac,
                                                                                   [],
                                                                                   [])),
               case AcTuAlReS of
                   {{_,key,_,_,_,_},_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    {Ch9,_} =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosNotifyChannelAdmin_EventChannelFactory':create_channel(ChFac,
                                                                                   [],
                                                                                   [])),
               case AcTuAlReS of
                   {{_,key,_,_,_,_},_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    ID1 = 'CosEventDomainAdmin_EventDomain':add_channel(ED, Ch1),
    ID2 = 'CosEventDomainAdmin_EventDomain':add_channel(ED, Ch2),
    ID3 = 'CosEventDomainAdmin_EventDomain':add_channel(ED, Ch3),
    ID4 = 'CosEventDomainAdmin_EventDomain':add_channel(ED, Ch4),
    ID5 = 'CosEventDomainAdmin_EventDomain':add_channel(ED, Ch5),
    ID6 = 'CosEventDomainAdmin_EventDomain':add_channel(ED, Ch6),
    ID7 = 'CosEventDomainAdmin_EventDomain':add_channel(ED, Ch7),
    ID8 = 'CosEventDomainAdmin_EventDomain':add_channel(ED, Ch8),
    ID9 = 'CosEventDomainAdmin_EventDomain':add_channel(ED, Ch9),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_channels(ED)),
           case AcTuAlReS of
               [_,_,_,_,_,_,_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_connections(ED)),
           case AcTuAlReS of
               [] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    C1 =
        #'CosEventDomainAdmin_Connection'{supplier_id = ID2,
                                          consumer_id = ID4,
                                          ctype = 'STRUCTURED_EVENT',
                                          notification_style = 'Pull'},
    C2 =
        #'CosEventDomainAdmin_Connection'{supplier_id = ID4,
                                          consumer_id = ID1,
                                          ctype = 'ANY_EVENT',
                                          notification_style = 'Push'},
    C3 =
        #'CosEventDomainAdmin_Connection'{supplier_id = ID1,
                                          consumer_id = ID3,
                                          ctype = 'ANY_EVENT',
                                          notification_style = 'Pull'},
    C4 =
        #'CosEventDomainAdmin_Connection'{supplier_id = ID3,
                                          consumer_id = ID6,
                                          ctype = 'STRUCTURED_EVENT',
                                          notification_style = 'Push'},
    C5 =
        #'CosEventDomainAdmin_Connection'{supplier_id = ID5,
                                          consumer_id = ID9,
                                          ctype = 'ANY_EVENT',
                                          notification_style = 'Pull'},
    C6 =
        #'CosEventDomainAdmin_Connection'{supplier_id = ID9,
                                          consumer_id = ID1,
                                          ctype = 'ANY_EVENT',
                                          notification_style = 'Push'},
    C7 =
        #'CosEventDomainAdmin_Connection'{supplier_id = ID4,
                                          consumer_id = ID7,
                                          ctype = 'STRUCTURED_EVENT',
                                          notification_style = 'Pull'},
    C8 =
        #'CosEventDomainAdmin_Connection'{supplier_id = ID7,
                                          consumer_id = ID8,
                                          ctype = 'ANY_EVENT',
                                          notification_style = 'Push'},
    C9 =
        #'CosEventDomainAdmin_Connection'{supplier_id = ID8,
                                          consumer_id = ID4,
                                          ctype = 'ANY_EVENT',
                                          notification_style = 'Pull'},
    C10 =
        #'CosEventDomainAdmin_Connection'{supplier_id = ID5,
                                          consumer_id = ID4,
                                          ctype = 'ANY_EVENT',
                                          notification_style = 'Pull'},
    C11 =
        #'CosEventDomainAdmin_Connection'{supplier_id = ID4,
                                          consumer_id = ID6,
                                          ctype = 'ANY_EVENT',
                                          notification_style = 'Pull'},
    C12 =
        #'CosEventDomainAdmin_Connection'{supplier_id = ID8,
                                          consumer_id = ID6,
                                          ctype = 'ANY_EVENT',
                                          notification_style = 'Pull'},
    CID1 = 'CosEventDomainAdmin_EventDomain':add_connection(ED, C1),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_connections(ED)),
           case AcTuAlReS of
               [CID1] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    _CID2 = 'CosEventDomainAdmin_EventDomain':add_connection(ED, C2),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_connections(ED)),
           case AcTuAlReS of
               [_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    _CID3 = 'CosEventDomainAdmin_EventDomain':add_connection(ED, C3),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_connections(ED)),
           case AcTuAlReS of
               [_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    _CID4 = 'CosEventDomainAdmin_EventDomain':add_connection(ED, C4),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_connections(ED)),
           case AcTuAlReS of
               [_,_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    _CID5 = 'CosEventDomainAdmin_EventDomain':add_connection(ED, C5),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_connections(ED)),
           case AcTuAlReS of
               [_,_,_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    _CID6 = 'CosEventDomainAdmin_EventDomain':add_connection(ED, C6),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_connections(ED)),
           case AcTuAlReS of
               [_,_,_,_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    CID7 = 'CosEventDomainAdmin_EventDomain':add_connection(ED, C7),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_connections(ED)),
           case AcTuAlReS of
               [_,_,_,_,_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    _CID8 = 'CosEventDomainAdmin_EventDomain':add_connection(ED, C8),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_connections(ED)),
           case AcTuAlReS of
               [_,_,_,_,_,_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':add_connection(ED,
                                                                     C8)),
           case AcTuAlReS of
               {'EXCEPTION',{'CosEventDomainAdmin_AlreadyExists',_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch 'CosEventDomainAdmin_EventDomain':get_cycles(ED)),
           case AcTuAlReS of
               [] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch 'CosEventDomainAdmin_EventDomain':get_qos(ED)),
           case AcTuAlReS of
               [_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    AllowCyclic =
        #'CosNotification_Property'{name = "CycleDetection",
                                    value =
                                        any:create(orber_tc:short(), 0)},
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':set_qos(ED,
                                                              [AllowCyclic])),
           case AcTuAlReS of
               {'EXCEPTION',{'CosNotification_UnsupportedQoS',_,_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    ForbidCyclic =
        #'CosNotification_Property'{name = "CycleDetection",
                                    value =
                                        any:create(orber_tc:short(), 1)},
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':set_qos(ED,
                                                              [ForbidCyclic])),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    AllowDiamonds =
        #'CosNotification_Property'{name = "DiamondDetection",
                                    value =
                                        any:create(orber_tc:short(), 0)},
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':set_qos(ED,
                                                              [AllowDiamonds])),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch 'CosEventDomainAdmin_EventDomain':get_qos(ED)),
           case AcTuAlReS of
               [_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    ForbidDiamonds =
        #'CosNotification_Property'{name = "DiamondDetection",
                                    value =
                                        any:create(orber_tc:short(), 1)},
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':set_qos(ED,
                                                              [ForbidDiamonds])),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch 'CosEventDomainAdmin_EventDomain':get_qos(ED)),
           case AcTuAlReS of
               [_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':validate_qos(ED,
                                                                   [ForbidDiamonds,
                                                                    ForbidCyclic])),
           case AcTuAlReS of
               {ok,[_]} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':validate_qos(ED,
                                                                   [AllowDiamonds,
                                                                    ForbidCyclic])),
           case AcTuAlReS of
               {ok,[_]} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':validate_qos(ED,
                                                                   [ForbidDiamonds,
                                                                    AllowCyclic])),
           case AcTuAlReS of
               {'EXCEPTION',{'CosNotification_UnsupportedQoS',_,_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':add_connection(ED,
                                                                     C9)),
           case AcTuAlReS of
               {'EXCEPTION',
                {'CosEventDomainAdmin_CycleCreationForbidden',_,_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_offer_channels(ED,
                                                                         ID2)),
           case AcTuAlReS of
               [] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_offer_channels(ED,
                                                                         ID4)),
           case AcTuAlReS of
               [2] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_offer_channels(ED,
                                                                         ID8)),
           case AcTuAlReS of
               [_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_offer_channels(ED,
                                                                         100)),
           case AcTuAlReS of
               {'EXCEPTION',{'CosNotifyChannelAdmin_ChannelNotFound',_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_subscription_channels(ED,
                                                                                ID8)),
           case AcTuAlReS of
               [] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_subscription_channels(ED,
                                                                                ID4)),
           case AcTuAlReS of
               [_,_,_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_subscription_channels(ED,
                                                                                ID2)),
           case AcTuAlReS of
               [_,_,_,_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_subscription_channels(ED,
                                                                                100)),
           case AcTuAlReS of
               {'EXCEPTION',{'CosNotifyChannelAdmin_ChannelNotFound',_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    Nil = corba:create_nil_objref(),
    P2 =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosEventDomainAdmin_EventDomain':connect_push_supplier_with_id(ED,
                                                                                        Nil,
                                                                                        ID2)),
               case AcTuAlReS of
                   {_,key,_,_,_,_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    P7 =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosEventDomainAdmin_EventDomain':connect_push_supplier_with_id(ED,
                                                                                        Nil,
                                                                                        ID7)),
               case AcTuAlReS of
                   {_,key,_,_,_,_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    P8 =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosEventDomainAdmin_EventDomain':connect_pull_consumer_with_id(ED,
                                                                                        Nil,
                                                                                        ID8)),
               case AcTuAlReS of
                   {_,key,_,_,_,_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    P6 =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosEventDomainAdmin_EventDomain':connect_pull_consumer_with_id(ED,
                                                                                        Nil,
                                                                                        ID6)),
               case AcTuAlReS of
                   {_,key,_,_,_,_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    E1 = #any{typecode = tk_long,value = 1},
    E2 = #any{typecode = tk_long,value = 2},
    fun() ->
           AcTuAlReS =
               (catch
                    'CosNotifyChannelAdmin_ProxyPushConsumer':push(P2,
                                                                   E1)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch 'CosNotifyChannelAdmin_ProxyPullSupplier':pull(P8)),
           case AcTuAlReS of
               E1 ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch 'CosNotifyChannelAdmin_ProxyPullSupplier':pull(P6)),
           case AcTuAlReS of
               E1 ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosNotifyChannelAdmin_ProxyPushConsumer':push(P7,
                                                                   E2)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch 'CosNotifyChannelAdmin_ProxyPullSupplier':pull(P8)),
           case AcTuAlReS of
               E2 ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    timer:sleep(10000),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosNotifyChannelAdmin_ProxyPullSupplier':try_pull(P6)),
           case AcTuAlReS of
               {_,false} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':remove_connection(ED,
                                                                        CID7)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':remove_connection(ED,
                                                                        CID7)),
           case AcTuAlReS of
               {'EXCEPTION',
                {'CosEventDomainAdmin_ConnectionNotFound',_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':remove_connection(ED,
                                                                        100)),
           case AcTuAlReS of
               {'EXCEPTION',
                {'CosEventDomainAdmin_ConnectionNotFound',_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_offer_channels(ED,
                                                                         ID7)),
           case AcTuAlReS of
               [] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_offer_channels(ED,
                                                                         ID4)),
           case AcTuAlReS of
               [2] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_subscription_channels(ED,
                                                                                ID7)),
           case AcTuAlReS of
               [8] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_subscription_channels(ED,
                                                                                ID4)),
           case AcTuAlReS of
               [_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    CID10 =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosEventDomainAdmin_EventDomain':add_connection(ED,
                                                                         C7)),
               case AcTuAlReS of
                   8 ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':add_connection(ED,
                                                                     C11)),
           case AcTuAlReS of
               {'EXCEPTION',
                {'CosEventDomainAdmin_DiamondCreationForbidden',_,_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':add_connection(ED,
                                                                     C10)),
           case AcTuAlReS of
               {'EXCEPTION',
                {'CosEventDomainAdmin_DiamondCreationForbidden',_,_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':add_connection(ED,
                                                                     C12)),
           case AcTuAlReS of
               {'EXCEPTION',
                {'CosEventDomainAdmin_DiamondCreationForbidden',_,_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':set_qos(ED,
                                                              [AllowDiamonds])),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    CID11 =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosEventDomainAdmin_EventDomain':add_connection(ED,
                                                                         C10)),
               case AcTuAlReS of
                   9 ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':get_all_connections(ED)),
           case AcTuAlReS of
               [_,_,_,_,_,_,_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch 'CosEventDomainAdmin_EventDomain':get_diamonds(ED)),
           case AcTuAlReS of
               [_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    CID12 =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosEventDomainAdmin_EventDomain':add_connection(ED,
                                                                         C11)),
               case AcTuAlReS of
                   10 ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    fun() ->
           AcTuAlReS =
               (catch 'CosEventDomainAdmin_EventDomain':get_diamonds(ED)),
           case AcTuAlReS of
               [_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    CID13 =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosEventDomainAdmin_EventDomain':add_connection(ED,
                                                                         C12)),
               case AcTuAlReS of
                   11 ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    fun() ->
           AcTuAlReS =
               (catch 'CosEventDomainAdmin_EventDomain':get_diamonds(ED)),
           case AcTuAlReS of
               [_,_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':set_qos(ED,
                                                              [ForbidDiamonds])),
           case AcTuAlReS of
               {'EXCEPTION',{'CosNotification_UnsupportedQoS',_,_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':remove_connection(ED,
                                                                        CID10)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':remove_connection(ED,
                                                                        CID11)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':remove_connection(ED,
                                                                        CID12)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':remove_connection(ED,
                                                                        CID13)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':set_qos(ED,
                                                              [ForbidDiamonds])),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch 'CosEventDomainAdmin_EventDomain':get_qos(ED)),
           case AcTuAlReS of
               [_,_] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomain':add_connection(ED,
                                                                     C10)),
           case AcTuAlReS of
               {'EXCEPTION',
                {'CosEventDomainAdmin_DiamondCreationForbidden',_,_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch 'CosEventDomainAdmin_EventDomain':destroy(ED)),
           case AcTuAlReS of
               ok ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    ok.

event_domain_factory_api(doc) ->
    ["Testing the CosEventDomain Factory API",""];
event_domain_factory_api(suite) ->
    [];
event_domain_factory_api(_Config) ->
    Cyclic =
        #'CosNotification_Property'{name = "CycleDetection",
                                    value =
                                        any:create(orber_tc:short(), 1)},
    BadProp =
        #'CosNotification_Property'{name = "Wrong",
                                    value =
                                        any:create(orber_tc:short(), 1)},
    BadQoSVal =
        #'CosNotification_Property'{name = "CycleDetection",
                                    value =
                                        any:create(orber_tc:short(), 10)},
    Fac =
        fun() ->
               AcTuAlReS = (catch cosEventDomainApp:start_factory()),
               case AcTuAlReS of
                   {_,key,_,_,_,_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomainFactory':get_all_domains(Fac)),
           case AcTuAlReS of
               [] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomainFactory':get_event_domain(Fac,
                                                                              0)),
           case AcTuAlReS of
               {'EXCEPTION',{'CosEventDomainAdmin_DomainNotFound',_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    {ED,_} =
        'CosEventDomainAdmin_EventDomainFactory':create_event_domain(Fac,
                                                                     [Cyclic],
                                                                     []),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomainFactory':get_all_domains(Fac)),
           case AcTuAlReS of
               [0] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    ED =
        'CosEventDomainAdmin_EventDomainFactory':get_event_domain(Fac,
                                                                  0),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomainFactory':get_event_domain(Fac,
                                                                              1)),
           case AcTuAlReS of
               {'EXCEPTION',{'CosEventDomainAdmin_DomainNotFound',_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    corba:dispose(ED),
    timer:sleep(3000),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomainFactory':get_all_domains(Fac)),
           case AcTuAlReS of
               [] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomainFactory':get_event_domain(Fac,
                                                                              0)),
           case AcTuAlReS of
               {'EXCEPTION',{'CosEventDomainAdmin_DomainNotFound',_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    {ED2,_} =
        fun() ->
               AcTuAlReS =
                   (catch
                        'CosEventDomainAdmin_EventDomainFactory':create_event_domain(Fac,
                                                                                     [],
                                                                                     [])),
               case AcTuAlReS of
                   {{_,key,_,_,_,_},_} ->
                       io:format("------ CORRECT RESULT ------~n~p~n",
                                 [AcTuAlReS]),
                       AcTuAlReS;
                   _ ->
                       io:format("###### ERROR ERROR ######~n~p~n",
                                 [AcTuAlReS]),
                       exit(AcTuAlReS)
               end
        end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomainFactory':get_all_domains(Fac)),
           case AcTuAlReS of
               [1] ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomainFactory':get_event_domain(Fac,
                                                                              1)),
           case AcTuAlReS of
               ED2 ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    corba:dispose(ED2),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomainFactory':create_event_domain(Fac,
                                                                                 [BadProp],
                                                                                 [])),
           case AcTuAlReS of
               {'EXCEPTION',{'CosNotification_UnsupportedQoS',_,_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomainFactory':create_event_domain(Fac,
                                                                                 [],
                                                                                 [BadProp])),
           case AcTuAlReS of
               {'EXCEPTION',{'CosNotification_UnsupportedAdmin',_,_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomainFactory':create_event_domain(Fac,
                                                                                 [BadQoSVal],
                                                                                 [])),
           case AcTuAlReS of
               {'EXCEPTION',{'CosNotification_UnsupportedQoS',_,_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    fun() ->
           AcTuAlReS =
               (catch
                    'CosEventDomainAdmin_EventDomainFactory':create_event_domain(Fac,
                                                                                 [],
                                                                                 [BadQoSVal])),
           case AcTuAlReS of
               {'EXCEPTION',{'CosNotification_UnsupportedAdmin',_,_}} ->
                   io:format("------ CORRECT RESULT ------~n~p~n",
                             [AcTuAlReS]),
                   AcTuAlReS;
               _ ->
                   io:format("###### ERROR ERROR ######~n~p~n",
                             [AcTuAlReS]),
                   exit(AcTuAlReS)
           end
    end(),
    corba:dispose(Fac),
    ok.



