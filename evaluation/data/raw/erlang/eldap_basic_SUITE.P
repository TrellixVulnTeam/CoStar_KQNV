-file("test/lib/eldap/test/eldap_basic_SUITE.erl", 1).

-module(eldap_basic_SUITE).

-compile(export_all).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/lib/eldap/test/eldap_basic_SUITE.erl", 26).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/eldap-1.0/include/eldap.hrl",
      1).

-record(eldap_search,{base = [],
                      filter = [],
                      scope = wholeSubtree,
                      deref = derefAlways,
                      attributes = [],
                      types_only = false,
                      timeout = 0}).

-record(eldap_search_result,{entries = [],referrals = []}).

-record(eldap_entry,{object_name = "",attributes = []}).

-file("test/lib/eldap/test/eldap_basic_SUITE.erl", 27).

init_per_suite(Config0) ->
    {{EldapHost,Port},Config1} =
        case catch ct:get_config(eldap_server, undefined) of
            undefined ->
                Server = {"localhost",9876},
                {Server,[{eldap_server,{"localhost",9876}}|Config0]};
            {'EXIT',_} ->
                Server = {"localhost",9876},
                {Server,[{eldap_server,{"localhost",9876}}|Config0]};
            Server ->
                {Server,[{eldap_server,Server}|Config0]}
        end,
    try
        {ok,Handle} = eldap:open([EldapHost], [{port,Port}]),
        ok =
            eldap:simple_bind(Handle,
                              "cn=Manager,dc=ericsson,dc=se",
                              "hejsan"),
        {ok,MyHost} = inet:gethostname(),
        Path = "dc=" ++ MyHost ++ ",dc=ericsson,dc=se",
        Config = [{eldap_path,Path}|Config1],
        eldap:add(Handle,
                  "dc=ericsson,dc=se",
                  [{"objectclass",["dcObject","organization"]},
                   {"dc",["ericsson"]},
                   {"o",["Testing"]}]),
        eldap:add(Handle,
                  Path,
                  [{"objectclass",["dcObject","organization"]},
                   {"dc",[MyHost]},
                   {"o",["Test machine"]}]),
        Config
    catch
        error:{badmatch,Error} ->
            io:format("Eldap init error ~p~n ~p~n",
                      [Error,erlang:get_stacktrace()]),
            {skip,
             lists:flatten(io_lib:format("Ldap init failed with host ~p",
                                         [EldapHost]))}
    end.

end_per_suite(Config) ->
    {EHost,Port} = proplists:get_value(eldap_server, Config),
    Path = proplists:get_value(eldap_path, Config),
    {ok,H} = eldap:open([EHost], [{port,Port}]),
    ok = eldap:simple_bind(H, "cn=Manager,dc=ericsson,dc=se", "hejsan"),
    case
        eldap:search(H,
                     [{base,Path},
                      {filter,eldap:present("objectclass")},
                      {scope,eldap:wholeSubtree()}])
    of
        {ok,{eldap_search_result,Entries,_}} ->
            [ 
             ok = eldap:delete(H, Entry) ||
                 {eldap_entry,Entry,_} <- Entries
            ];
        _ ->
            ignore
    end,
    ok.

init_per_testcase(_TestCase, Config) ->
    Config.

end_per_testcase(_TestCase, _Config) ->
    ok.

all() ->
    [app,api].

app(doc) ->
    "Test that the eldap app file is ok";
app(suite) ->
    [];
app(Config) when is_list(Config) ->
    ok = test_server:app_test(public_key).

api(doc) ->
    "Basic test that all api functions works as expected";
api(suite) ->
    [];
api(Config) ->
    {Host,Port} = proplists:get_value(eldap_server, Config),
    {ok,H} = eldap:open([Host], [{port,Port}]),
    BasePath = proplists:get_value(eldap_path, Config),
    All =
        fun(Where) ->
               eldap:search(H,
                            #eldap_search{base = Where,
                                          filter =
                                              eldap:present("objectclas"
                                                            "s"),
                                          scope = eldap:wholeSubtree()})
        end,
    Search =
        fun(Filter) ->
               eldap:search(H,
                            #eldap_search{base = BasePath,
                                          filter = Filter,
                                          scope = eldap:singleLevel()})
        end,
    {ok,#eldap_search_result{entries = [_]}} = All(BasePath),
    {error,noSuchObject} = All("cn=Bar," ++ BasePath),
    {error,_} =
        eldap:add(H,
                  "cn=Jonas Jonsson," ++ BasePath,
                  [{"objectclass",["person"]},
                   {"cn",["Jonas Jonsson"]},
                   {"sn",["Jonsson"]}]),
    eldap:simple_bind(H, "cn=Manager,dc=ericsson,dc=se", "hejsan"),
    ok =
        eldap:add(H,
                  "cn=Jonas Jonsson," ++ BasePath,
                  [{"objectclass",["person"]},
                   {"cn",["Jonas Jonsson"]},
                   {"sn",["Jonsson"]}]),
    ok =
        eldap:add(H,
                  "cn=Foo Bar," ++ BasePath,
                  [{"objectclass",["person"]},
                   {"cn",["Foo Bar"]},
                   {"sn",["Bar"]},
                   {"telephoneNumber",["555-1232","555-5432"]}]),
    ok =
        eldap:add(H,
                  "ou=Team," ++ BasePath,
                  [{"objectclass",["organizationalUnit"]},
                   {"ou",["Team"]}]),
    JJSR =
        {ok,#eldap_search_result{entries = [#eldap_entry{}]}} =
            Search(eldap:equalityMatch("sn", "Jonsson")),
    JJSR = Search(eldap:substrings("sn", [{any,"ss"}])),
    FBSR =
        {ok,
         #eldap_search_result{entries = [#eldap_entry{object_name = FB}]}} =
            Search(eldap:substrings("sn", [{any,"a"}])),
    FBSR = Search(eldap:substrings("sn", [{initial,"B"}])),
    FBSR = Search(eldap:substrings("sn", [{final,"r"}])),
    F_AND =
        eldap:'and'([eldap:present("objectclass"),eldap:present("ou")]),
    {ok,#eldap_search_result{entries = [#eldap_entry{}]}} =
        Search(F_AND),
    F_NOT =
        eldap:'and'([eldap:present("objectclass"),
                     eldap:'not'(eldap:present("ou"))]),
    {ok,#eldap_search_result{entries = [#eldap_entry{},#eldap_entry{}]}} =
        Search(F_NOT),
    Mod =
        [eldap:mod_replace("telephoneNumber", ["555-12345"]),
         eldap:mod_add("description", ["Nice guy"])],
    ok = eldap:modify(H, FB, Mod),
    ok = eldap:modify(H, FB, [eldap:mod_delete("telephoneNumber", [])]),
    {error,entryAlreadyExists} =
        eldap:add(H,
                  "cn=Jonas Jonsson," ++ BasePath,
                  [{"objectclass",["person"]},
                   {"cn",["Jonas Jonsson"]},
                   {"sn",["Jonsson"]}]),
    ok = eldap:delete(H, "cn=Jonas Jonsson," ++ BasePath),
    {error,noSuchObject} =
        eldap:delete(H, "cn=Jonas Jonsson," ++ BasePath),
    ok = eldap:modify_dn(H, FB, "cn=Niclas Andre", true, ""),
    eldap:close(H),
    ok.

add(H, Attr, Value, Path0, Attrs, Class) ->
    Path =
        case Path0 of
            [] ->
                Attr ++ "=" ++ Value;
            _ ->
                Attr ++ "=" ++ Value ++ "," ++ Path0
        end,
    case
        eldap:add(H,
                  Path,
                  [{"objectclass",Class},{Attr,[Value]}] ++ Attrs)
    of
        ok ->
            {ok,Path};
        {error,E = entryAlreadyExists} ->
            {E,Path};
        R = {error,Reason} ->
            io:format("~p:~p: ~s,~s =>~n ~p~n",
                      [eldap_basic_SUITE,172,Attr,Value,R]),
            exit({ldap,add,Reason})
    end.

test() ->
    run().

run() ->
    Cases = all(),
    run(Cases).

run(Case) when is_atom(Case) ->
    run([Case]);
run(Cases) when is_list(Cases) ->
    Run =
        fun(Test, Config0) ->
               Config = init_per_testcase(Test, Config0),
               try
                   io:format("~nTest ~p ... ", [Test]),
                   eldap_basic_SUITE:Test(Config),
                   end_per_testcase(Test, Config),
                   io:format("ok~n", [])
               catch
                   _:Reason ->
                       io:format("~n   FAIL (~p): ~p~n ~p~n",
                                 [Test,Reason,erlang:get_stacktrace()])
               end
        end,
    process_flag(trap_exit, true),
    Pid =
        spawn_link(fun() ->
                          case init_per_suite([]) of
                              {skip,Reason} ->
                                  io:format("Skip ~s~n", [Reason]);
                              Config ->
                                  try
                                      [ 
                                       Run(Test, Config) ||
                                           Test <- Cases
                                      ]
                                  catch
                                      _:Err ->
                                          io:format("Error ~p in ~p~n",
                                                    [Err,
                                                     erlang:get_stacktrace()])
                                  end,
                                  end_per_suite(Config)
                          end
                   end),
    receive
        {'EXIT',Pid,normal} ->
            ok;
        Msg ->
            io:format("Received ~p (~p)~n", [Msg,Pid])
    after
        100 -> ok
    end,
    process_flag(trap_exit, false),
    ok.



