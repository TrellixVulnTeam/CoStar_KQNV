-file("test/lib/diameter/src/compiler/diameter_exprecs.erl", 1).

-module(diameter_exprecs).

-export([parse_transform/2]).

-file("test/lib/diameter/src/compiler/diameter_forms.hrl", 1).

-file("test/lib/diameter/src/compiler/diameter_exprecs.erl", 108).

parse_transform(Forms, _Options) ->
    Rs =
        [ 
         R ||
             {attribute,_,record,R} <- Forms
        ],
    Es =
        lists:append([ 
                      E ||
                          {attribute,_,export_records,E} <- Forms
                     ]),
    {H,T} = lists:splitwith(fun is_head/1, Forms),
    H ++ [a_export(Es)|f_accessors(Es, Rs)] ++ T.

is_head(T) ->
    not lists:member(element(1, T), [function,eof]).

a_export(Exports) ->
    {attribute,
     123,
     export,
     [{fname(info),1},
      {fname(info),2},
      {fname(new),1},
      {fname(new),2},
      {fname(get),1},
      {fname(get),2},
      {fname(set),2}|
      lists:flatmap(fun export/1, Exports)]}.

export(Rname) ->
    New = fname(new, Rname),
    [{New,0},
     {New,1},
     {fname(get, Rname),1},
     {fname(get, Rname),2},
     {fname(set, Rname),2},
     {fname(info, Rname),1}].

f_accessors(Es, Rs) ->
    ['#info-/1'(),
     '#info-/2'(Es),
     '#new-/1'(Es),
     '#new-/2'(Es),
     '#get-/1'(Es),
     '#get-/2'(Es),
     '#set-/2'(Es)|
     lists:flatmap(fun(N) ->
                          accessors(N, fields(N, Rs))
                   end,
                   Es)].

accessors(Rname, Fields) ->
    ['#new-X/0'(Rname),
     '#new-X/1'(Rname),
     '#get-X/1'(Rname, Fields),
     '#get-X/2'(Rname, Fields),
     '#set-X/2'(Rname, Fields),
     '#info-X/1'(Rname, Fields)].

fields(Rname, Recs) ->
    {Rname,Fields} = lists:keyfind(Rname, 1, Recs),
    lists:map(fun({record_field,_,{atom,_,N}}) ->
                     N;
                 ({record_field,_,{atom,_,N},_}) ->
                     N
              end,
              Fields).

fname_prefix(Op) ->
    "#" ++ atom_to_list(Op) ++ "-".

fname(Op) ->
    list_to_atom(fname_prefix(Op)).

fname(Op, Rname) ->
    Prefix = fname_prefix(Op),
    list_to_atom(Prefix ++ atom_to_list(Rname)).

'#info-/1'() ->
    Fname = fname(info),
    {function,
     182,
     Fname,
     1,
     [{clause,
       183,
       [{var,183,'RecName'}],
       [],
       [{call,
         185,
         {atom,185,Fname},
         [{var,185,'RecName'},{atom,185,fields}]}]}]}.

'#info-/2'(Exports) ->
    {function,
     188,
     fname(info),
     2,
     lists:map(fun 'info-'/1, Exports)
     ++
     [{clause,
       189,
       [ 
        {var,189,'_'} ||
            _ <- lists:seq(1, 2)
       ],
       [],
       [{call,
         189,
         {remote,189,{atom,189,erlang},{atom,189,error}},
         [{atom,189,badarg}]}]}]}.

'info-'(R) ->
    {clause,
     192,
     [{atom,192,R},{var,192,'Info'}],
     [],
     [{call,194,{atom,194,fname(info, R)},[{var,194,'Info'}]}]}.

'#new-/1'(Exports) ->
    {function,
     197,
     fname(new),
     1,
     lists:flatmap(fun 'new-'/1, Exports)
     ++
     [{clause,
       198,
       [ 
        {var,198,'_'} ||
            _ <- lists:seq(1, 1)
       ],
       [],
       [{call,
         198,
         {remote,198,{atom,198,erlang},{atom,198,error}},
         [{atom,198,badarg}]}]}]}.

'new-'(R) ->
    [{clause,201,[{atom,201,R}],[],[{record,203,R,[]}]},
     {clause,
      204,
      [{cons,204,{atom,204,R},{var,204,'Vals'}}],
      [],
      [{call,206,{atom,206,fname(new, R)},[{var,206,'Vals'}]}]}].

'#new-/2'(Exports) ->
    {function,
     209,
     fname(new),
     2,
     lists:map(fun 'new--'/1, Exports)
     ++
     [{clause,
       210,
       [ 
        {var,210,'_'} ||
            _ <- lists:seq(1, 2)
       ],
       [],
       [{call,
         210,
         {remote,210,{atom,210,erlang},{atom,210,error}},
         [{atom,210,badarg}]}]}]}.

'new--'(R) ->
    {clause,
     213,
     [{atom,213,R},{var,213,'Vals'}],
     [],
     [{call,215,{atom,215,fname(new, R)},[{var,215,'Vals'}]}]}.

'#get-/1'(Exports) ->
    {function,
     218,
     fname(get),
     1,
     lists:map(fun 'get--'/1, Exports)
     ++
     [{clause,
       219,
       [ 
        {var,219,'_'} ||
            _ <- lists:seq(1, 1)
       ],
       [],
       [{call,
         219,
         {remote,219,{atom,219,erlang},{atom,219,error}},
         [{atom,219,badarg}]}]}]}.

'get--'(R) ->
    {clause,
     222,
     [{match,222,{record,222,R,[]},{var,222,'Rec'}}],
     [],
     [{cons,
       224,
       {atom,224,R},
       {call,224,{atom,224,fname(get, R)},[{var,224,'Rec'}]}}]}.

'#get-/2'(Exports) ->
    {function,
     227,
     fname(get),
     2,
     lists:map(fun 'get-'/1, Exports)
     ++
     [{clause,
       228,
       [ 
        {var,228,'_'} ||
            _ <- lists:seq(1, 2)
       ],
       [],
       [{call,
         228,
         {remote,228,{atom,228,erlang},{atom,228,error}},
         [{atom,228,badarg}]}]}]}.

'get-'(R) ->
    {clause,
     231,
     [{var,231,'Attrs'},{match,232,{record,232,R,[]},{var,232,'Rec'}}],
     [],
     [{call,
       234,
       {atom,234,fname(get, R)},
       [{var,234,'Attrs'},{var,234,'Rec'}]}]}.

'#set-/2'(Exports) ->
    {function,
     237,
     fname(set),
     2,
     lists:map(fun 'set-'/1, Exports)
     ++
     [{clause,
       238,
       [ 
        {var,238,'_'} ||
            _ <- lists:seq(1, 2)
       ],
       [],
       [{call,
         238,
         {remote,238,{atom,238,erlang},{atom,238,error}},
         [{atom,238,badarg}]}]}]}.

'set-'(R) ->
    {clause,
     241,
     [{var,241,'Vals'},{match,241,{record,241,R,[]},{var,241,'Rec'}}],
     [],
     [{call,
       243,
       {atom,243,fname(set, R)},
       [{var,243,'Vals'},{var,243,'Rec'}]}]}.

'#new-X/0'(Rname) ->
    {function,
     246,
     fname(new, Rname),
     0,
     [{clause,247,[],[],[{record,249,Rname,[]}]}]}.

'#new-X/1'(Rname) ->
    {function,
     252,
     fname(new, Rname),
     1,
     [{clause,
       253,
       [{var,253,'Vals'}],
       [],
       [{call,
         255,
         {atom,255,fname(set, Rname)},
         [{var,255,'Vals'},{record,255,Rname,[]}]}]}]}.

'#set-X/2'(Rname, Fields) ->
    {function,
     258,
     fname(set, Rname),
     2,
     [{clause,
       259,
       [{var,259,'Vals'},{var,259,'Rec'}],
       [[{call,260,{atom,260,is_list},[{var,260,'Vals'}]}]],
       [{call,
         261,
         {remote,261,{atom,261,lists},{atom,261,foldl}},
         [{'fun',261,{function,fname(set, Rname),2}},
          {var,262,'Rec'},
          {var,263,'Vals'}]}]}|
      lists:map(fun(A) ->
                       'set-X'(Rname, A)
                end,
                Fields)]}.

'set-X'(Rname, Attr) ->
    {clause,
     267,
     [{tuple,267,[{atom,267,Attr},{var,267,'V'}]},{var,267,'Rec'}],
     [],
     [{record,
       269,
       {var,269,'Rec'},
       Rname,
       [{record_field,270,{atom,270,Attr},{var,270,'V'}}]}]}.

'#get-X/1'(Rname, Fields) ->
    FName = fname(get, Rname),
    Values =
        {call,
         274,
         {atom,274,tl},
         [{call,274,{atom,274,tuple_to_list},[{var,274,'Rec'}]}]},
    {function,
     275,
     FName,
     1,
     [{clause,
       276,
       [{var,276,'Rec'}],
       [],
       [{call,
         278,
         {remote,278,{atom,278,lists},{atom,278,zip}},
         [erl_parse:abstract(Fields, 278),Values]}]}]}.

'#get-X/2'(Rname, Fields) ->
    FName = fname(get, Rname),
    {function,
     282,
     FName,
     2,
     [{clause,
       283,
       [{var,283,'Attrs'},{var,283,'Rec'}],
       [[{call,284,{atom,284,is_list},[{var,284,'Attrs'}]}]],
       [{lc,
         285,
         {call,285,{atom,285,FName},[{var,285,'A'},{var,285,'Rec'}]},
         [{generate,286,{var,286,'A'},{var,286,'Attrs'}}]}]}|
      lists:map(fun(A) ->
                       'get-X'(Rname, A)
                end,
                Fields)]}.

'get-X'(Rname, Attr) ->
    {clause,
     290,
     [{atom,290,Attr},{var,290,'Rec'}],
     [],
     [{record_field,292,{var,292,'Rec'},Rname,{atom,292,Attr}}]}.

'#info-X/1'(Rname, Fields) ->
    {function,
     295,
     fname(info, Rname),
     1,
     [{clause,
       296,
       [{atom,296,fields}],
       [],
       [{call,
         298,
         {atom,298,record_info},
         [{atom,298,fields},{atom,298,Rname}]}]},
      {clause,
       299,
       [{atom,299,size}],
       [],
       [{call,
         301,
         {atom,301,record_info},
         [{atom,301,size},{atom,301,Rname}]}]}|
      lists:map(fun(A) ->
                       'info-X'(Rname, A)
                end,
                Fields)]}.

'info-X'(Rname, Attr) ->
    {clause,
     305,
     [{tuple,305,[{atom,305,index},{atom,305,Attr}]}],
     [],
     [{record_index,307,Rname,{atom,307,Attr}}]}.



