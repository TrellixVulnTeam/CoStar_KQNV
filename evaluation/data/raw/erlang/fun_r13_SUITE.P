-file("test/erts/emulator/test/fun_r13_SUITE.erl", 1).

-module(fun_r13_SUITE).

-compile(r13).

-export([all/0,
         suite/0,
         groups/0,
         init_per_suite/1,
         end_per_suite/1,
         init_per_group/2,
         end_per_group/2,
         init_per_testcase/2,
         end_per_testcase/2,
         dist_old_release/1]).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/erts/emulator/test/fun_r13_SUITE.erl", 29).

suite() ->
    [{ct_hooks,[ts_install_cth]}].

all() ->
    [dist_old_release].

groups() ->
    [].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, Config) ->
    Config.

init_per_testcase(_Case, Config) ->
    Dog = test_server:timetrap(test_server:minutes(1)),
    [{watchdog,Dog}|Config].

end_per_testcase(_Case, Config) ->
    Dog = test_server:lookup_config(watchdog, Config),
    test_server:timetrap_cancel(Dog),
    ok.

dist_old_release(Config) when is_list(Config) ->
    case test_server:is_release_available("r12b") of
        true ->
            do_dist_old(Config);
        false ->
            {skip,"No R12B found"}
    end.

do_dist_old(Config) when is_list(Config) ->
    Pa = filename:dirname(code:which(fun_r13_SUITE)),
    Name = fun_dist_r12,
    {ok,Node} =
        test_server:start_node(Name,
                               peer,
                               [{args,"-pa " ++ Pa},
                                {erl,[{release,"r12b"}]}]),
    Pid =
        spawn_link(Node,
                   fun() ->
                          receive
                              Fun when is_function(Fun) ->
                                  R12BFun =
                                      fun(H) ->
                                             cons(H, [b,c])
                                      end,
                                  Fun(Fun, R12BFun)
                          end
                   end),
    Self = self(),
    Fun =
        fun(F, R12BFun) ->
               {pid,Self} = erlang:fun_info(F, pid),
               {module,fun_r13_SUITE} = erlang:fun_info(F, module),
               Self ! {ok,F,R12BFun}
        end,
    Pid ! Fun,
    receive
        {ok,Fun,R12BFun} ->
            [a,b,c] = R12BFun(a);
        Other ->
            test_server:fail({bad_message,Other})
    end,
    ok.

cons(H, T) ->
    [H|T].



