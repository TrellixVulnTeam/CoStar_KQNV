-file("test/lib/gs/src/gstk_radiobutton.erl", 1).

-module(gstk_radiobutton).

-export([create/3,
         config/3,
         read/3,
         delete/2,
         event/5,
         option/5,
         read_option/5]).

-file("test/lib/gs/src/gstk.hrl", 1).

-record(gstkid,{id = undefined,widget,widget_data,owner,parent,objtype}).

-record(so,{main,object,hscroll,vscroll,misc}).

-file("test/lib/gs/src/gstk_radiobutton.erl", 94).

create(DB, GstkId, Opts) ->
    TkW = gstk_generic:mk_tkw_child(DB, GstkId),
    {G,GID,V,NOpts} = fix_group_and_value(Opts, DB, GstkId#gstkid.owner),
    NGstkId = GstkId#gstkid{widget = TkW,widget_data = {G,GID,V}},
    PlacePreCmd = [";place ",TkW],
    case
        gstk_generic:make_command(NOpts,
                                  NGstkId,
                                  TkW,
                                  "",
                                  PlacePreCmd,
                                  DB)
    of
        {error,Reason} ->
            {error,Reason};
        Cmd when is_list(Cmd) ->
            gstk:exec(["radiobutton ",TkW," -bo 2 -indi true ",Cmd]),
            NGstkId
    end.

config(DB, Gstkid, Opts) ->
    TkW = Gstkid#gstkid.widget,
    {NOpts,NGstkid} =
        fix_group_and_value(Opts, DB, Gstkid#gstkid.owner, Gstkid),
    SimplePreCmd = [TkW," conf"],
    PlacePreCmd = [";place ",TkW],
    gstk_generic:mk_cmd_and_exec(NOpts,
                                 NGstkid,
                                 TkW,
                                 SimplePreCmd,
                                 PlacePreCmd,
                                 DB).

read(DB, Gstkid, Opt) ->
    gstk_generic:read_option(DB, Gstkid, Opt).

delete(DB, Gstkid) ->
    gstk_db:delete_widget(DB, Gstkid),
    {_,Gid,_} = Gstkid#gstkid.widget_data,
    gstk_db:delete_bgrp(DB, Gid),
    Gstkid#gstkid.widget.

event(DB, Gstkid, Etype, Edata, Args) ->
    Arg2 =
        case Etype of
            click ->
                [Text,_Grp|Rest] = Args,
                {G,_Gid,V} = Gstkid#gstkid.widget_data,
                [Text,G,V|Rest];
            _Other ->
                Args
        end,
    gstk_generic:event(DB, Gstkid, Etype, Edata, Arg2).

option(Option, Gstkid, TkW, DB, _) ->
    case Option of
        {disabledfg,Color} ->
            {s,[" -disabledforegr ",gstk:to_color(Color)]};
        {group,Group} ->
            {s,[" -var ",gstk:to_ascii(Group)]};
        {selectbg,Color} ->
            {s,[" -selectc ",gstk:to_color(Color)]};
        {underline,Int} ->
            {s,[" -un ",gstk:to_ascii(Int)]};
        {value,V} ->
            {s,[" -val ",gstk:to_ascii(V)]};
        {wraplength,Int} ->
            {s,[" -wr ",gstk:to_ascii(Int)]};
        flash ->
            {c,[TkW," f;"]};
        invoke ->
            {c,[TkW," i;"]};
        {select,true} ->
            {c,[TkW," se;"]};
        {select,false} ->
            {c,[TkW," des;"]};
        {click,On} ->
            cbind(DB, Gstkid, click, On);
        _ ->
            invalid_option
    end.

read_option(Option, Gstkid, TkW, DB, _) ->
    case Option of
        disabledfg ->
            tcl2erl:ret_color([TkW," cg -disabledforegr"]);
        group ->
            {G,_,_} = Gstkid#gstkid.widget_data,
            G;
        groupid ->
            {_,Gid,_} = Gstkid#gstkid.widget_data,
            Gid;
        selectbg ->
            tcl2erl:ret_color([TkW," cg -selectc"]);
        underline ->
            tcl2erl:ret_int([TkW," cg -un"]);
        value ->
            {_,_,V} = Gstkid#gstkid.widget_data,
            V;
        wraplength ->
            tcl2erl:ret_int([TkW," cg -wr"]);
        select ->
            Cmd =
                ["list [set x [",
                 TkW,
                 " cg -var];global $x;set $x] [",
                 TkW,
                 " cg -val]"],
            case tcl2erl:ret_tuple(Cmd) of
                {X,X} ->
                    true;
                _Other ->
                    false
            end;
        click ->
            gstk_db:is_inserted(DB, Gstkid, click);
        _ ->
            {bad_result,{Gstkid#gstkid.objtype,invalid_option,Option}}
    end.

fix_group_and_value(Opts, DB, Owner) ->
    {G,GID,V,NOpts} = fgav(Opts, erlNIL, erlNIL, erlNIL, []),
    RV =
        case V of
            erlNIL ->
                list_to_atom(lists:concat([v,gstk_db:counter(DB, value)]));
            Other0 ->
                Other0
        end,
    NG =
        case G of
            erlNIL ->
                rb;
            Other1 ->
                Other1
        end,
    RGID =
        case GID of
            erlNIL ->
                {rbgrp,NG,Owner};
            Other2 ->
                Other2
        end,
    RG = gstk_db:insert_bgrp(DB, RGID),
    {NG,RGID,RV,[{group,RG},{value,RV}|NOpts]}.

fix_group_and_value(Opts, DB, Owner, Gstkid) ->
    {RG,RGID,RV} = Gstkid#gstkid.widget_data,
    {G,GID,V,NOpts} = fgav(Opts, RG, RGID, RV, []),
    case {G,GID,V} of
        {RG,RGID,RV} ->
            {NOpts,Gstkid};
        {NG,RGID,RV} ->
            NGID = {rbgrp,NG,Owner},
            gstk_db:delete_bgrp(DB, RGID),
            NRG = gstk_db:insert_bgrp(DB, NGID),
            NGstkid = Gstkid#gstkid{widget_data = {NG,NGID,RV}},
            gstk_db:insert_widget(DB, NGstkid),
            {[{group,NRG}|NOpts],NGstkid};
        {RG,RGID,NRV} ->
            NGstkid = Gstkid#gstkid{widget_data = {RG,RGID,NRV}},
            gstk_db:insert_widget(DB, NGstkid),
            {[{value,NRV}|NOpts],NGstkid};
        {_,NGID,RV} when NGID =/= RGID ->
            gstk_db:delete_bgrp(DB, RGID),
            NRG = gstk_db:insert_bgrp(DB, NGID),
            NGstkid = Gstkid#gstkid{widget_data = {RG,NGID,RV}},
            gstk_db:insert_widget(DB, NGstkid),
            {[{group,NRG}|NOpts],NGstkid};
        {_,NGID,NRV} when NGID =/= RGID ->
            gstk_db:delete_bgrp(DB, RGID),
            NRG = gstk_db:insert_bgrp(DB, NGID),
            NGstkid = Gstkid#gstkid{widget_data = {RG,NGID,NRV}},
            gstk_db:insert_widget(DB, NGstkid),
            {[{group,NRG},{value,NRV}|NOpts],NGstkid};
        {NG,RGID,NRV} ->
            NGID = {rbgrp,NG,Owner},
            gstk_db:delete_bgrp(DB, RGID),
            NRG = gstk_db:insert_bgrp(DB, NGID),
            NGstkid = Gstkid#gstkid{widget_data = {NG,NGID,NRV}},
            gstk_db:insert_widget(DB, NGstkid),
            {[{group,NRG},{value,NRV}|NOpts],NGstkid}
    end.

fgav([{group,G}|Opts], _, GID, V, Nopts) ->
    fgav(Opts, G, GID, V, Nopts);
fgav([{groupid,GID}|Opts], G, _, V, Nopts) ->
    fgav(Opts, G, GID, V, Nopts);
fgav([{value,V}|Opts], G, GID, _, Nopts) ->
    fgav(Opts, G, GID, V, Nopts);
fgav([Opt|Opts], G, GID, V, Nopts) ->
    fgav(Opts, G, GID, V, [Opt|Nopts]);
fgav([], Group, GID, Value, Opts) ->
    {Group,GID,Value,Opts}.

cbind(DB, Gstkid, Etype, On) ->
    TkW = Gstkid#gstkid.widget,
    Cmd =
        case On of
            {true,Edata} ->
                Eref = gstk_db:insert_event(DB, Gstkid, Etype, Edata),
                [" -command {erlsend ",
                 Eref,
                 " \\\"[",
                 TkW,
                 " cg -text]\\\" [",
                 TkW,
                 " cg -var]}"];
            true ->
                Eref = gstk_db:insert_event(DB, Gstkid, Etype, ""),
                [" -command {erlsend ",
                 Eref,
                 " \\\"[",
                 TkW,
                 " cg -text]\\\" [",
                 TkW,
                 " cg -var]}"];
            _Other ->
                gstk_db:delete_event(DB, Gstkid, Etype),
                " -command {}"
        end,
    {s,Cmd}.



