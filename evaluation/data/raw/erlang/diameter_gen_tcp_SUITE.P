-file("test/lib/diameter/test/diameter_gen_tcp_SUITE.erl", 1).

-module(diameter_gen_tcp_SUITE).

-export([suite/0,all/0]).

-export([send_long/1]).

suite() ->
    [{timetrap,{minutes,2}}].

all() ->
    [send_long].

send_long(_) ->
    {Sock,SendF} = connection(),
    B = list_to_binary(lists:duplicate(1 bsl 20, $X)),
    ok = SendF(B),
    B = recv(Sock, size(B), []).

recv(_, 0, Acc) ->
    list_to_binary(lists:reverse(Acc));
recv(Sock, N, Acc) ->
    receive
        {tcp,Sock,Bin} ->
            recv(Sock, N - size(Bin), [Bin|Acc]);
        T ->
            {T,Acc}
    end.

connection() ->
    {ok,LSock} =
        gen_tcp:listen(0, [binary,{active,true},{ip,{127,0,0,1}}]),
    {ok,PortNr} = inet:port(LSock),
    LPid = self(),
    {Pid,MRef} =
        spawn_monitor(fun() ->
                             connect(PortNr, LPid)
                      end),
    {ok,Sock} = gen_tcp:accept(LSock),
    receive
        {Pid,F} ->
            {Sock,F};
        {'DOWN',MRef,process,_,_} = T ->
            T
    end.

connect(PortNr, LPid) ->
    {ok,Sock} =
        gen_tcp:connect({127,0,0,1},
                        PortNr,
                        [binary,{active,true},{ip,{127,0,0,1}}]),
    LPid
    !
    {self(),
     fun(B) ->
            send(Sock, B)
     end},
    down(LPid).

down(Pid) when is_pid(Pid) ->
    down(monitor(process, Pid));
down(MRef) ->
    receive
        {'DOWN',MRef,process,_,Reason} ->
            Reason
    end.

send(Sock, Bin) ->
    {_,MRef} =
        spawn_monitor(fun() ->
                             exit(gen_tcp:send(Sock, Bin))
                      end),
    down(MRef).



