-file("test/lib/et/src/et_selector.erl", 1).

-module(et_selector).

-export([make_pattern/1,change_pattern/1,parse_event/2]).

-file("test/lib/et/src/../include/et.hrl", 1).

-record(event,{detail_level,trace_ts,event_ts,from,to,label,contents}).

-file("test/lib/et/src/et_selector.erl", 32).

make_pattern(undefined) ->
    {undefined,undefined};
make_pattern({Mod,Pattern}) when is_atom(Mod) ->
    case Pattern of
        min ->
            {Mod,[]};
        max ->
            Head = ['$1','_','_','_','_'],
            Body = [],
            Cond = [],
            {Mod,[{Head,Cond,Body}]};
        DetailLevel when is_integer(DetailLevel) ->
            Head = ['$1','_','_','_','_'],
            Body = [],
            Cond = [{'<','$1',DetailLevel}],
            {Mod,[{Head,Cond,Body}]};
        undefined ->
            {Mod,undefined};
        _ ->
            exit({bad_pattern,Pattern})
    end.

change_pattern({Mod,Pattern}) when is_atom(Mod) ->
    MFA = {Mod,trace_me,5},
    case Pattern of
        undefined ->
            ignore;
        [] ->
            error_to_exit(old_ctp(MFA)),
            error_to_exit(dbg:ctp(MFA)),
            error_to_exit(dbg:p(all, clear));
        List when is_list(List) ->
            error_to_exit(old_ctp(MFA)),
            error_to_exit(old_tp(MFA, Pattern)),
            error_to_exit(dbg:ctp(MFA)),
            error_to_exit(dbg:tp(MFA, Pattern)),
            error_to_exit(dbg:p(all, [call,timestamp]));
        Other ->
            change_pattern(make_pattern({Mod,Other}))
    end,
    ok.

old_ctp({Mod,_Fun,Args}) ->
    case Mod of
        et ->
            {ok,ignore};
        _ ->
            dbg:ctp({Mod,report_event,Args})
    end.

old_tp({Mod,_Fun,Args}, Pattern) ->
    case Mod of
        et ->
            {ok,ignore};
        _ ->
            dbg:tp({Mod,report_event,Args}, Pattern)
    end.

error_to_exit({error,Reason}) ->
    exit(Reason);
error_to_exit({ok,Res}) ->
    Res.

parse_event(_Mod, E) when is_record(E, event) ->
    true;
parse_event(Mod, Trace) ->
    ParsedTS = now(),
    case Trace of
        {trace,Pid,Label,Info} ->
            parse_event(Mod,
                        Trace,
                        ParsedTS,
                        ParsedTS,
                        Pid,
                        Label,
                        [Info]);
        {trace,Pid,Label,Info,Extra} ->
            parse_event(Mod,
                        Trace,
                        ParsedTS,
                        ParsedTS,
                        Pid,
                        Label,
                        [Info,Extra]);
        {trace_ts,Pid,Label,Info,ReportedTS} ->
            parse_event(Mod,
                        Trace,
                        ParsedTS,
                        ReportedTS,
                        Pid,
                        Label,
                        [Info]);
        {trace_ts,Pid,Label,Info,Extra,ReportedTS} ->
            parse_event(Mod,
                        Trace,
                        ParsedTS,
                        ReportedTS,
                        Pid,
                        Label,
                        [Info,Extra]);
        {seq_trace,Label,Info} ->
            parse_seq_event(Trace, ParsedTS, ParsedTS, Label, Info);
        {seq_trace,Label,Info,ReportedTS} ->
            parse_seq_event(Trace, ParsedTS, ReportedTS, Label, Info);
        {drop,NumberOfDroppedItems} ->
            DetailLevel = 20,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ParsedTS,
                    event_ts = ParsedTS,
                    from = undefined,
                    to = undefined,
                    label = drop,
                    contents =
                        [{label,drop},
                         {detail_level,DetailLevel},
                         {from,undefined},
                         {to,undefined},
                         {drop,NumberOfDroppedItems}]}};
        _ ->
            error_logger:format("~p(~p): Ignoring unknown trace type ->"
                                " ~p~n~n",
                                [et_selector,211,Trace]),
            false
    end.

parse_seq_event(Trace, ParsedTS, ReportedTS, Label, Info) ->
    case Info of
        {send,Serial,From,To,Msg} ->
            DetailLevel = 15,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = To,
                    label = {seq_send,Label},
                    contents =
                        [{label,{seq_send,Label}},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,To},
                         {serial,Serial},
                         {msg,Msg}]}};
        {'receive',Serial,From,To,Msg} ->
            DetailLevel = 10,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = To,
                    label = {seq_receive,Label},
                    contents =
                        [{label,{seq_receive,Label}},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,To},
                         {serial,Serial},
                         {msg,Msg}]}};
        {print,Serial,From,_,UserInfo} ->
            DetailLevel = 5,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = From,
                    label = {seq_print,Label},
                    contents =
                        [{label,{seq_print,Label}},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,From},
                         {serial,Serial},
                         {user_info,UserInfo}]}};
        _ ->
            error_logger:format("~p(~p): Ignoring unknown trace type ->"
                                " ~p~n~n",
                                [et_selector,261,Trace]),
            false
    end.

parse_event(Mod, Trace, ParsedTS, ReportedTS, From, Label, Contents) ->
    case Label of
        'receive' ->
            DetailLevel = 35,
            [Msg] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = From,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,From},
                         {msg,Msg}]}};
        send ->
            DetailLevel = 40,
            [Msg,To] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = To,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,To},
                         {msg,Msg}]}};
        send_to_non_existing_process ->
            DetailLevel = 40,
            [Msg,To] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = To,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,To},
                         {msg,Msg}]}};
        call ->
            case Contents of
                [{M,
                  trace_me,
                  [UserDetailLevel,
                   UserFrom,
                   UserTo,
                   UserLabel,
                   UserContents]}]
                    when M == Mod, Mod /= undefined ->
                    {true,
                     #event{detail_level = UserDetailLevel,
                            trace_ts = ReportedTS,
                            event_ts = ParsedTS,
                            from = UserFrom,
                            to = UserTo,
                            label = UserLabel,
                            contents = UserContents}};
                [{M,
                  report_event,
                  [UserDetailLevel,
                   UserFrom,
                   UserTo,
                   UserLabel,
                   UserContents]}]
                    when M == Mod, Mod /= undefined ->
                    {true,
                     #event{detail_level = UserDetailLevel,
                            trace_ts = ReportedTS,
                            event_ts = ParsedTS,
                            from = UserFrom,
                            to = UserTo,
                            label = UserLabel,
                            contents = UserContents}};
                [MFA] ->
                    DetailLevel = 45,
                    {true,
                     #event{detail_level = DetailLevel,
                            trace_ts = ReportedTS,
                            event_ts = ParsedTS,
                            from = From,
                            to = From,
                            label = Label,
                            contents =
                                [{label,Label},
                                 {detail_level,DetailLevel},
                                 {from,From},
                                 {to,From},
                                 {mfa,MFA}]}};
                [MFA,PamResult] ->
                    DetailLevel = 45,
                    {true,
                     #event{detail_level = DetailLevel,
                            trace_ts = ReportedTS,
                            event_ts = ParsedTS,
                            from = From,
                            to = From,
                            label = Label,
                            contents =
                                [{label,Label},
                                 {detail_level,DetailLevel},
                                 {from,From},
                                 {to,From},
                                 {mfa,MFA},
                                 {pam_result,PamResult}]}}
            end;
        return_to ->
            DetailLevel = 50,
            [MFA] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = From,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,From},
                         {mfa,MFA}]}};
        return_from ->
            DetailLevel = 52,
            [MFA,ReturnValue] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = From,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,From},
                         {mfa,MFA},
                         {return,ReturnValue}]}};
        exception_from ->
            DetailLevel = 54,
            [MFA,Exception] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = From,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,From},
                         {mfa,MFA},
                         {exception,Exception}]}};
        spawn ->
            DetailLevel = 25,
            [NewPid,MFA] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = NewPid,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,NewPid},
                         {mfa,MFA}]}};
        exit ->
            DetailLevel = 30,
            [Reason] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = From,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,From},
                         {reason,Reason}]}};
        link ->
            DetailLevel = 55,
            [LinkTo] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = LinkTo,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,LinkTo}]}};
        unlink ->
            DetailLevel = 60,
            [UnlinkFrom] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = UnlinkFrom,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,UnlinkFrom}]}};
        getting_linked ->
            DetailLevel = 65,
            [LinkTo] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = LinkTo,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,LinkTo}]}};
        getting_unlinked ->
            DetailLevel = 67,
            [UnlinkFrom] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = UnlinkFrom,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,UnlinkFrom}]}};
        register ->
            DetailLevel = 70,
            [Name] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = From,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,From},
                         {name,Name}]}};
        unregister ->
            DetailLevel = 75,
            [Name] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = From,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,From},
                         {name,Name}]}};
        in ->
            DetailLevel = 90,
            [MFA] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = From,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,From},
                         {mfa,MFA}]}};
        out ->
            DetailLevel = 95,
            [MFA] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = From,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,From},
                         {mfa,MFA}]}};
        gc_start ->
            DetailLevel = 80,
            [GcKeyValueList] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = From,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,From},
                         {gc_items,GcKeyValueList}]}};
        gc_end ->
            DetailLevel = 85,
            [GcKeyValueList] = Contents,
            {true,
             #event{detail_level = DetailLevel,
                    trace_ts = ReportedTS,
                    event_ts = ParsedTS,
                    from = From,
                    to = From,
                    label = Label,
                    contents =
                        [{label,Label},
                         {detail_level,DetailLevel},
                         {from,From},
                         {to,From},
                         {gc_items,GcKeyValueList}]}};
        _ ->
            error_logger:format("~p(~p): Ignoring unknown trace type ->"
                                " ~p~n~n",
                                [et_selector,565,Trace]),
            false
    end.



