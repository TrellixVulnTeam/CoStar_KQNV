-file("test/lib/gs/src/gstk_menu.erl", 1).

-module(gstk_menu).

-compile([{nowarn_deprecated_function,{gs,error,2}}]).

-export([create/3,
         config/3,
         read/3,
         delete/2,
         event/5,
         option/5,
         read_option/5]).

-export([delete_menuitem/3,
         insert_menuitem/4,
         lookup_menuitem_pos/3,
         mk_create_opts_for_child/4]).

-file("test/lib/gs/src/gstk.hrl", 1).

-record(gstkid,{id = undefined,widget,widget_data,owner,parent,objtype}).

-record(so,{main,object,hscroll,vscroll,misc}).

-file("test/lib/gs/src/gstk_menu.erl", 83).

create(DB, GstkId, Opts) ->
    #gstkid{parent = Parent,owner = Owner,objtype = Objtype} = GstkId,
    Pgstkid = gstk_db:lookup_gstkid(DB, Parent, Owner),
    Oref = gstk_db:counter(DB, Objtype),
    PF = gstk_widgets:suffix(Objtype),
    case Pgstkid#gstkid.objtype of
        menuitem ->
            PMenu = Pgstkid#gstkid.parent,
            PMgstkid = gstk_db:lookup_gstkid(DB, PMenu, Owner),
            PMW = PMgstkid#gstkid.widget,
            Index =
                gstk_menu:lookup_menuitem_pos(DB,
                                              PMgstkid,
                                              Pgstkid#gstkid.id),
            TkW = lists:concat([PMW,PF,Oref]),
            Gstkid = GstkId#gstkid{widget = TkW,widget_data = []},
            MPreCmd = ["menu ",TkW," -tearoff 0 -relief raised -bo 2"],
            MPostCmd =
                [$;,PMW," entryco ",gstk:to_ascii(Index)," -menu ",TkW],
            case
                gstk_generic:make_command(Opts, Gstkid, TkW, "", "", DB)
            of
                {error,Reason} ->
                    {error,Reason};
                Cmd when is_list(Cmd) ->
                    gstk:exec([MPreCmd,Cmd,MPostCmd]),
                    Gstkid
            end;
        OtherParent ->
            true = lists:member(OtherParent, [menubutton,window,frame]),
            PW = Pgstkid#gstkid.widget,
            TkW = lists:concat([PW,PF,Oref]),
            Gstkid = GstkId#gstkid{widget = TkW,widget_data = []},
            MPreCmd = ["menu ",TkW," -tearoff 0 -relief raised -bo 2 "],
            MPostCmd =
                if
                    OtherParent == menubutton ->
                        [$;,PW," conf -menu ",TkW];
                    true ->
                        []
                end,
            case
                gstk_generic:make_command(Opts, Gstkid, TkW, "", "", DB)
            of
                {error,Reason} ->
                    {error,Reason};
                Cmd when is_list(Cmd) ->
                    gstk:exec([MPreCmd,Cmd,MPostCmd]),
                    Gstkid
            end
    end.

mk_create_opts_for_child(DB, Cgstkid, Pgstkid, Opts) ->
    gstk_generic:mk_create_opts_for_child(DB, Cgstkid, Pgstkid, Opts).

config(DB, Gstkid, Opts) ->
    TkW = Gstkid#gstkid.widget,
    PreCmd = [TkW," conf"],
    gstk_generic:mk_cmd_and_exec(Opts, Gstkid, TkW, PreCmd, "", DB).

read(DB, Gstkid, Opt) ->
    gstk_generic:read_option(DB, Gstkid, Opt).

delete(DB, Gstkid) ->
    gstk_db:delete_widget(DB, Gstkid),
    Gstkid#gstkid.widget.

event(DB, Gstkid, Etype, Edata, Args) ->
    gstk_generic:event(DB, Gstkid, Etype, Edata, Args).

option(Option, Gstkid, TkW, DB, _) ->
    case Option of
        {activebw,Int} ->
            {s,[" -activebo ",gstk:to_ascii(Int)]};
        {disabledfg,Color} ->
            {s,[" -disabledf ",gstk:to_color(Color)]};
        {selectcolor,Color} ->
            {s,[" -selectc ",gstk:to_color(Color)]};
        {post_at,{X,Y}} ->
            post_at(X, Y, Gstkid, TkW, DB);
        _ ->
            invalid_option
    end.

read_option(Option, Gstkid, TkW, _DB, _AItem) ->
    case Option of
        activebw ->
            tcl2erl:ret_int([TkW," cg -activebo"]);
        disabledfg ->
            tcl2erl:ret_color([TkW," cg -disabledfo"]);
        selectcolor ->
            tcl2erl:ret_color([TkW," cg -selectc"]);
        _ ->
            {error,{invalid_option,Option,Gstkid#gstkid.objtype}}
    end.

post_at(X, Y, Gstkid, TkW, DB) ->
    Pgstkid = gstk_db:lookup_gstkid(DB, Gstkid#gstkid.parent),
    PtkW = Pgstkid#gstkid.widget,
    RootX = tcl2erl:ret_int(["winfo rootx ",PtkW]),
    RootY = tcl2erl:ret_int(["winfo rooty ",PtkW]),
    {c,
     [" tk_popup ",
      TkW,
      " ",
      gstk:to_ascii(RootX + X),
      " ",
      gstk:to_ascii(RootY + Y)]}.

insert_menuitem(DB, MenuId, ItemId, Pos) ->
    Mgstkid = gstk_db:lookup_gstkid(DB, MenuId),
    Items = Mgstkid#gstkid.widget_data,
    NewItems = insert_at(ItemId, Pos + 1, Items),
    gstk_db:update_widget(DB, Mgstkid#gstkid{widget_data = NewItems}).

delete_menuitem(DB, MenuId, ItemId) ->
    Mgstkid = gstk_db:lookup_gstkid(DB, MenuId),
    Items = Mgstkid#gstkid.widget_data,
    NewItems = lists:delete(ItemId, Items),
    gstk_db:insert_widget(DB, Mgstkid#gstkid{widget_data = NewItems}).

lookup_menuitem_pos(_DB, Mgstkid, ItemId) ->
    Items = Mgstkid#gstkid.widget_data,
    find_pos(ItemId, Items) - 1.

find_pos(ItemId, Items) ->
    find_pos(ItemId, Items, 1).

find_pos(_ItemId, [], _N) ->
    gs:error("Couldn't find item in menu~n", []);
find_pos(ItemId, [ItemId|_Items], N) ->
    N;
find_pos(ItemId, [_|Items], N) ->
    find_pos(ItemId, Items, N + 1).

insert_at(Elem, 1, L) ->
    [Elem|L];
insert_at(Elem, N, [H|T]) ->
    [H|insert_at(Elem, N - 1, T)].



