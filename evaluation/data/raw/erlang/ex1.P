-file("test/lib/snmp/examples/ex1/ex1.erl", 1).

-module(ex1).

-export([start/0,my_name/1,my_name/2,friends_table/3]).

-export([init/0]).

start() ->
    spawn(ex1, init, []).

my_name(get) ->
    ex1_server ! {self(),get_my_name},
    Name = wait_answer(),
    {value,Name}.

my_name(set, NewName) ->
    ex1_server ! {self(),{set_my_name,NewName}},
    noError.

friends_table(get, RowIndex, Cols) ->
    case get_row(RowIndex) of
        {ok,Row} ->
            get_cols(Cols, Row);
        _ ->
            {noValue,noSuchInstance}
    end;
friends_table(get_next, RowIndex, Cols) ->
    case get_next_row(RowIndex) of
        {ok,Row} ->
            get_next_cols(Cols, Row);
        _ ->
            case get_next_row([]) of
                {ok,Row} ->
                    NewCols = add_one_to_cols(Cols),
                    get_next_cols(NewCols, Row);
                _ ->
                    end_of_table(Cols)
            end
    end;
friends_table(is_set_ok, RowIndex, Cols) ->
    RowExists =
        case get_row(RowIndex) of
            {ok,_Row} ->
                true;
            _ ->
                false
        end,
    case is_row_status_col_changed(Cols) of
        {true,6} when RowExists == true ->
            {noError,0};
        {true,4} when RowExists == false, length(Cols) == 3 ->
            {noError,0};
        {true,_} ->
            {inconsistentValue,4};
        false when RowExists == true ->
            {noError,0};
        _ ->
            [{Col,_NewVal}|_Cols] = Cols,
            {inconsistentName,Col}
    end;
friends_table(set, RowIndex, Cols) ->
    case is_row_status_col_changed(Cols) of
        {true,6} ->
            ex1_server ! {self(),{delete_row,RowIndex}};
        {true,4} ->
            NewRow = make_row(RowIndex, Cols),
            ex1_server ! {self(),{add_row,NewRow}};
        false ->
            {ok,Row} = get_row(RowIndex),
            NewRow = merge_rows(Row, Cols),
            ex1_server ! {self(),{delete_row,RowIndex}},
            ex1_server ! {self(),{add_row,NewRow}}
    end,
    {noError,0}.

get_cols([Col|Cols], Row) ->
    [{value,element(Col, Row)}|get_cols(Cols, Row)];
get_cols([], _Row) ->
    [].

get_next_cols([Col|Cols], Row) when Col < 2 ->
    [{[2,element(1, Row)],element(2, Row)}|get_next_cols(Cols, Row)];
get_next_cols([Col|Cols], Row) when Col > 4 ->
    [endOfTable|get_next_cols(Cols, Row)];
get_next_cols([Col|Cols], Row) ->
    [{[Col,element(1, Row)],element(Col, Row)}|get_next_cols(Cols, Row)];
get_next_cols([], _Row) ->
    [].

end_of_table([_Col|Cols]) ->
    [endOfTable|end_of_table(Cols)];
end_of_table([]) ->
    [].

add_one_to_cols([Col|Cols]) ->
    [Col + 1|add_one_to_cols(Cols)];
add_one_to_cols([]) ->
    [].

is_row_status_col_changed(Cols) ->
    case lists:keysearch(4, 1, Cols) of
        {value,{4,StatusVal}} ->
            {true,StatusVal};
        _ ->
            false
    end.

get_row(RowIndex) ->
    ex1_server ! {self(),{get_row,RowIndex}},
    wait_answer().

get_next_row(RowIndex) ->
    ex1_server ! {self(),{get_next_row,RowIndex}},
    wait_answer().

wait_answer() ->
    receive
        {ex1_server,Answer} ->
            Answer
    end.

init() ->
    register(ex1_server, self()),
    loop("", []).

loop(MyName, Table) ->
    receive
        {From,get_my_name} ->
            From ! {ex1_server,MyName},
            loop(MyName, Table);
        {_From,{set_my_name,NewName}} ->
            loop(NewName, Table);
        {From,{get_row,RowIndex}} ->
            Res = table_get_row(Table, RowIndex),
            From ! {ex1_server,Res},
            loop(MyName, Table);
        {From,{get_next_row,RowIndex}} ->
            Res = table_get_next_row(Table, RowIndex),
            From ! {ex1_server,Res},
            loop(MyName, Table);
        {_From,{delete_row,RowIndex}} ->
            NewTable = table_delete_row(Table, RowIndex),
            loop(MyName, NewTable);
        {_From,{add_row,NewRow}} ->
            NewTable = table_add_row(Table, NewRow),
            loop(MyName, NewTable)
    end.

table_get_row([{Index,Name,Address,Status}|_], [Index]) ->
    {ok,{Index,Name,Address,Status}};
table_get_row([_H|T], RowIndex) ->
    table_get_row(T, RowIndex);
table_get_row([], _RowIndex) ->
    no_such_row.

table_get_next_row([Row|_T], []) ->
    {ok,Row};
table_get_next_row([Row|_T], [Index|_]) when element(1, Row) > Index ->
    {ok,Row};
table_get_next_row([_Row|T], RowIndex) ->
    table_get_next_row(T, RowIndex);
table_get_next_row([], _RowIndex) ->
    endOfTable.

table_delete_row([{Index,_,_,_}|T], [Index]) ->
    T;
table_delete_row([H|T], RowIndex) ->
    [H|table_delete_row(T, RowIndex)];
table_delete_row([], _RowIndex) ->
    [].

table_add_row([Row|T], NewRow) when element(1, Row) > element(1, NewRow) ->
    [NewRow,Row|T];
table_add_row([H|T], NewRow) ->
    [H|table_add_row(T, NewRow)];
table_add_row([], NewRow) ->
    [NewRow].

make_row([Index], [{2,Name},{3,Address}|_]) ->
    {Index,Name,Address,1}.

merge_rows(Row, [{Col,NewVal}|T]) ->
    merge_rows(setelement(Col, Row, NewVal), T);
merge_rows(Row, []) ->
    Row.



