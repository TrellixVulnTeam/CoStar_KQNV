-file("test/lib/common_test/test/ct_group_leader_SUITE_data/group_leader_SUITE.erl",
      1).

-module(group_leader_SUITE).

-compile(export_all).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/common_test-1.6.3/include/ct.hrl",
      1).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/common_test-1.6.3/include/ct.hrl",
      21).

-file([], 21).

-file("test/lib/common_test/test/ct_group_leader_SUITE_data/group_leader_SUITE.erl",
      24).

suite() ->
    [{timetrap,{seconds,10}}].

init_per_suite(Config) ->
    start_my_io_server(),
    Config.

end_per_suite(_Config) ->
    my_io_server ! die,
    ok.

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, _Config) ->
    ok.

init_per_testcase(_TestCase, Config) ->
    Config.

end_per_testcase(_TestCase, _Config) ->
    ok.

groups() ->
    [{p,[parallel],[p1,p2]},
     {p_restart,[parallel],[p_restart_my_io_server]},
     {seq,[],[s1,s2,s3]},
     {seq2,[],[s4,s5]},
     {seq_in_par,[parallel],[p10,p11,{group,seq},p12,{group,seq2},p13]},
     {capture_io,[parallel],[cap1,cap2]},
     {unexpected_io,[parallel],[unexp1,unexp2]}].

all() ->
    [tc1,
     {group,p},
     {group,p_restart},
     p3,
     {group,seq_in_par},
     cap1,
     cap2,
     {group,capture_io},
     {group,unexpected_io}].

tc1(_C) ->
    ok.

p1(_) ->
    print("hej\n").

p2(_) ->
    print("hopp\n").

p_restart_my_io_server(_) ->
    Ref = monitor(process, my_io_server),
    my_io_server ! die,
    receive
        {'DOWN',Ref,_,_,_} ->
            start_my_io_server()
    end.

p3(_) ->
    print("hoppsan\n").

print(String) ->
    my_io_server ! {print,self(),String},
    receive
        {printed,String} ->
            ok
    end.

start_my_io_server() ->
    Parent = self(),
    Pid =
        spawn(fun() ->
                     my_io_server(Parent)
              end),
    receive
        {Pid,started} ->
            io:format("~p\n", [process_info(Pid)]),
            ok
    end.

my_io_server(Parent) ->
    register(my_io_server, self()),
    Parent ! {self(),started},
    my_io_server_loop().

my_io_server_loop() ->
    receive
        {print,From,String} ->
            io:put_chars(String),
            From ! {printed,String},
            my_io_server_loop();
        die ->
            ok
    end.

p10(_) ->
    receive after 1 -> ok end.

p11(_) ->
    ok.

p12(_) ->
    ok.

p13(_) ->
    ok.

s1(_) ->
    ok.

s2(_) ->
    ok.

s3(_) ->
    ok.

s4(_) ->
    ok.

s5(_) ->
    ok.

cap1(_) ->
    ct:capture_start(),
    IO = gen_io(cap1, 10, []),
    ct:capture_stop(),
    IO = ct:capture_get(),
    ok.

cap2(_) ->
    ct:capture_start(),
    {Pid,Ref} =
        spawn_monitor(fun() ->
                             exit(gen_io(cap2, 42, []))
                      end),
    receive
        {'DOWN',Ref,process,Pid,IO} ->
            ct:capture_stop(),
            IO = ct:capture_get(),
            ok
    end.

gen_io(_, 0, Acc) ->
    lists:reverse(Acc);
gen_io(Label, N, Acc) ->
    S = lists:flatten(io_lib:format("~s: ~p\n", [Label,N])),
    io:put_chars(S),
    gen_io(Label, N - 1, [S|Acc]).

unexp1(Config) ->
    timer:sleep(1000),
    gen_unexp_io(),
    timer:sleep(1000),
    check_unexp_io(Config),
    ok.

unexp2(_) ->
    timer:sleep(2000),
    ok.

gen_unexp_io() ->
    spawn(fun() ->
                 group_leader(whereis(user), self()),
                 ct:log("-x- Unexpected io ct:log -x-", []),
                 ct:pal("-x- Unexpected io ct:pal -x-", []),
                 ok
          end).

check_unexp_io(Config) ->
    SuiteLog = test_server:lookup_config(tc_logfile, Config),
    Dir = filename:dirname(SuiteLog),
    UnexpLog = filename:join(Dir, "unexpected_io.log.html"),
    {ok,SuiteBin} = file:read_file(SuiteLog),
    nomatch =
        re:run(SuiteBin, "-x- Unexpected io ", [global,{capture,none}]),
    {ok,UnexpBin} = file:read_file(UnexpLog),
    {match,[_,_]} = re:run(UnexpBin, "-x- Unexpected io ", [global]),
    ok.



