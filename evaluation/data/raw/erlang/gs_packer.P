-file("test/lib/gs/src/gs_packer.erl", 1).

-module(gs_packer).

-export([pack/2]).

pack(Size, SpecSizes) when Size < 0 ->
    pack(0, SpecSizes);
pack(Size, SpecSizes) ->
    {Weights,_Stretched,Fixed,Min,Max} = get_size_info(SpecSizes),
    Left = Size - Fixed,
    Unit =
        if
            Weights == 0 ->
                0;
            true ->
                Left / Weights
        end,
    if
        Left < Min ->
            NewSpecs = cnvt_to_min(SpecSizes),
            pack(Size, NewSpecs);
        is_integer(Max), Max =/= 0, Left > Max ->
            NewSpecs = cnvt_to_max(SpecSizes),
            pack(Size, NewSpecs);
        true ->
            case remove_failure(SpecSizes, Unit) of
                {no,NewSpecs} ->
                    distribute_space(NewSpecs, Unit);
                {yes,NewSpecs} ->
                    pack(Size, NewSpecs)
            end
    end.

remove_failure(Specs, Unit) ->
    case remove_failure(Specs, Unit, 0) of
        {done,NewSpecs} ->
            {yes,NewSpecs};
        {_,_NewSpecs} ->
            {no,Specs}
    end.

remove_failure([], _Unit, MaxFailure) ->
    {MaxFailure,[]};
remove_failure([{stretch,W,Mi}|Specs], Unit, MaxFailure) ->
    {MinMax,NewMaxFailure} = max_failure(MaxFailure, Mi - W * Unit, 0),
    case {MinMax,remove_failure(Specs, Unit, NewMaxFailure)} of
        {min,{NewMaxFailure,Rest}} ->
            {done,[{fixed,Mi}|Rest]};
        {_,{OtherMaxFailure,Rest}} ->
            {OtherMaxFailure,[{stretch,W,Mi}|Rest]}
    end;
remove_failure([{stretch,W,Mi,Ma}|Specs], Unit, MaxFailure) ->
    {MinMax,NewMaxFailure} =
        max_failure(MaxFailure, Mi - W * Unit, W * Unit - Ma),
    case {MinMax,remove_failure(Specs, Unit, NewMaxFailure)} of
        {min,{NewMaxFailure,Rest}} ->
            {done,[{fixed,Mi}|Rest]};
        {max,{NewMaxFailure,Rest}} ->
            {done,[{fixed,Ma}|Rest]};
        {_,{OtherMaxFailure,Rest}} ->
            {OtherMaxFailure,[{stretch,W,Mi,Ma}|Rest]}
    end;
remove_failure([Spec|Specs], Unit, MaxFailure) ->
    {NewMaxFailure,NewSpecs} = remove_failure(Specs, Unit, MaxFailure),
    {NewMaxFailure,[Spec|NewSpecs]}.

max_failure(LastDiff, DMi, DMa) when DMi > LastDiff, DMi > DMa ->
    {min,DMi};
max_failure(LastDiff, _DMi, DMa) when DMa > LastDiff ->
    {max,DMa};
max_failure(MaxFailure, _DMi, _DMa) ->
    {other,MaxFailure}.

distribute_space(Specs, Unit) ->
    distribute_space(Specs, Unit, 0.0).

distribute_space([], _Unit, _Err) ->
    [];
distribute_space([Spec|Specs], Unit, Err) ->
    distribute_space(Spec, Specs, Unit, Err).

distribute_space({fixed,P}, Specs, Unit, Err) ->
    [P|distribute_space(Specs, Unit, Err)];
distribute_space({stretch,Weight}, Specs, Unit, Err) ->
    Size = Weight * Unit + Err,
    Pixels = round(Size),
    NewErr = Size - Pixels,
    [Pixels|distribute_space(Specs, Unit, NewErr)];
distribute_space({stretch,W,_Mi}, Specs, Unit, Err) ->
    distribute_space({stretch,W}, Specs, Unit, Err);
distribute_space({stretch,W,_Mi,_Ma}, Specs, Unit, Err) ->
    distribute_space({stretch,W}, Specs, Unit, Err).

cnvt_to_min([]) ->
    [];
cnvt_to_min([Spec|Specs]) ->
    cnvt_to_min(Spec, Specs).

cnvt_to_max([]) ->
    [];
cnvt_to_max([Spec|Specs]) ->
    cnvt_to_max(Spec, Specs).

cnvt_to_min({fixed,P}, Specs) ->
    [{stretch,P}|cnvt_to_min(Specs)];
cnvt_to_min({stretch,_W}, Specs) ->
    [{fixed,0}|cnvt_to_min(Specs)];
cnvt_to_min({stretch,_W,Mi}, Specs) ->
    [{stretch,Mi}|cnvt_to_min(Specs)];
cnvt_to_min({stretch,_W,Mi,_Ma}, Specs) ->
    [{stretch,Mi}|cnvt_to_min(Specs)].

cnvt_to_max({fixed,P}, Specs) ->
    [{stretch,P}|cnvt_to_max(Specs)];
cnvt_to_max({stretch,_W,_Mi,Ma}, Specs) ->
    [{stretch,Ma}|cnvt_to_max(Specs)].

get_size_info(Specs) ->
    get_size_info(Specs, 0, 0, 0, 0, 0).

get_size_info([], TotW, NumW, TotFixed, TotMin, TotMax) ->
    {TotW,NumW,TotFixed,TotMin,TotMax};
get_size_info([Spec|Specs], TotW, NumW, TotFixed, TotMin, TotMax) ->
    get_size_info(Spec, TotW, NumW, TotFixed, TotMin, TotMax, Specs).

get_size_info({fixed,P}, TotW, NumW, TotFixed, TotMin, TotMax, Specs) ->
    get_size_info(Specs, TotW, NumW, TotFixed + P, TotMin, TotMax);
get_size_info({stretch,W}, TotW, NumW, TotFixed, TotMin, _TotMax, Specs) ->
    get_size_info(Specs, TotW + W, NumW + 1, TotFixed, TotMin, infinity);
get_size_info({stretch,W,Mi},
              TotW,
              NumW,
              TotFixed,
              TotMin,
              _TotMax,
              Specs) ->
    get_size_info(Specs,
                  TotW + W,
                  NumW + 1,
                  TotFixed,
                  TotMin + Mi,
                  infinity);
get_size_info({stretch,W,Mi,_Ma},
              TotW,
              NumW,
              TotFixed,
              TotMin,
              infinity,
              Specs) ->
    get_size_info(Specs,
                  TotW + W,
                  NumW + 1,
                  TotFixed,
                  TotMin + Mi,
                  infinity);
get_size_info({stretch,W,Mi,Ma},
              TotW,
              NumW,
              TotFixed,
              TotMin,
              TotMax,
              Specs) ->
    get_size_info(Specs,
                  TotW + W,
                  NumW + 1,
                  TotFixed,
                  TotMin + Mi,
                  TotMax + Ma).



