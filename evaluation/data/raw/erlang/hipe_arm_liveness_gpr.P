-file("test/lib/hipe/arm/hipe_arm_liveness_gpr.erl", 1).

-module(hipe_arm_liveness_gpr).

-export([analyse/1]).

-export([liveout/2]).

-file("test/lib/hipe/arm/hipe_arm.hrl", 1).

-record(arm_mfa,{m :: undefined | atom(),
                 f :: undefined | atom(),
                 a :: undefined | arity()}).

-record(arm_prim,{prim}).

-record(arm_sdesc,{exnlab,fsize,arity :: undefined | arity(),live}).

-record(arm_temp,{reg,type,allocatable}).

-record(am2,{src,sign,offset}).

-record(am3,{src,sign,offset}).

-record(alu,{aluop,s,dst,src,am1}).

-record(b_fun,{'fun',linkage}).

-record(b_label,{'cond',label}).

-record(bl,{'fun',sdesc,linkage}).

-record(blx,{src,sdesc}).

-record(cmp,{cmpop,src,am1}).

-record(comment,{term}).

-record(label,{label}).

-record(load,{ldop,dst,am2}).

-record(ldrsb,{dst,am3}).

-record(move,{movop,s,dst,am1}).

-record(pseudo_bc,{'cond',true_label,false_label,pred}).

-record(pseudo_blr,{}).

-record(pseudo_bx,{src}).

-record(pseudo_call,{funv,sdesc,contlab,linkage}).

-record(pseudo_call_prepare,{nrstkargs}).

-record(pseudo_li,{dst,imm,label}).

-record(pseudo_move,{dst,src}).

-record(pseudo_switch,{jtab,index,labels}).

-record(pseudo_tailcall,{funv,arity,stkargs,linkage}).

-record(pseudo_tailcall_prepare,{}).

-record(smull,{dstlo,dsthi,src1,src2}).

-record(store,{stop,src,am2}).

-file("test/lib/hipe/arm/../misc/hipe_consttab.hrl", 1).

-type ct_alignment() :: 4 | 8.

-type hipe_constlbl() :: non_neg_integer().

-type hipe_consttab() :: {dict(), [hipe_constlbl()], hipe_constlbl()}.

-file("test/lib/hipe/arm/hipe_arm.hrl", 119).

-file([], 119).

-record(defun,{mfa :: undefined | mfa(),
               formals,
               code,
               data :: undefined | hipe_consttab(),
               isclosure :: undefined | boolean(),
               isleaf :: undefined | boolean(),
               var_range,
               label_range}).

-file("test/lib/hipe/arm/hipe_arm_liveness_gpr.erl", 26).

-file("test/lib/hipe/arm/../flow/liveness.inc", 1).

-export([analyze/1,livein/2]).

-file("test/lib/hipe/arm/../flow/../flow/cfg.hrl", 1).

-type cfg_lbl() :: non_neg_integer().

-record(cfg_info,{'fun' :: undefined | mfa(),
                  start_label :: undefined | cfg_lbl(),
                  is_closure :: undefined | boolean(),
                  closure_arity :: undefined | arity(),
                  is_leaf :: undefined | boolean(),
                  params,
                  info = []}).

-type cfg_data() :: {dict(), [cfg_lbl()], non_neg_integer()}.

-record(cfg,{table = gb_trees:empty() :: gb_tree(),
             info :: undefined | #cfg_info{},
             data :: undefined | cfg_data()}).

-type cfg() :: #cfg{}.

-file("test/lib/hipe/arm/../flow/liveness.inc", 51).

-file([], 51).

-spec analyze(cfg()) -> gb_tree().

analyze(CFG) ->
    PO = cfg_postorder(CFG),
    InitLiveness = liveness_init(init(PO, CFG)),
    Res = merry_go_around(PO, InitLiveness, 0),
    Res.

merry_go_around(Labels, Liveness, Count) ->
    case doit_once(Labels, Liveness, 0) of
        {NewLiveness,0} ->
            NewLiveness;
        {NewLiveness,_Changed} ->
            merry_go_around(Labels, NewLiveness, Count + 1)
    end.

doit_once([], Liveness, Changed) ->
    {Liveness,Changed};
doit_once([L|Ls], Liveness, Changed) ->
    LiveOut = liveout(Liveness, L),
    Kill = ordsets:subtract(LiveOut, kill(L, Liveness)),
    LiveIn = ordsets:union(Kill, gen(L, Liveness)),
    {NewLiveness,ChangedP} = update_livein(L, LiveIn, Liveness),
    doit_once(Ls, NewLiveness, Changed + ChangedP).

update_livein(Label, NewLiveIn, Liveness) ->
    {GK,LiveIn,Successors} = liveness_lookup(Label, Liveness),
    NewLiveness =
        liveness_update(Label, {GK,NewLiveIn,Successors}, Liveness),
    if
        LiveIn =:= NewLiveIn ->
            {NewLiveness,0};
        true ->
            {NewLiveness,1}
    end.

liveout(Liveness, L) ->
    Succ = successors(L, Liveness),
    case Succ of
        [] ->
            liveout_no_succ();
        _ ->
            liveout1(Succ, Liveness)
    end.

liveout1(Labels, Liveness) ->
    liveout1(Labels, Liveness, ordsets:new()).

liveout1([], _Liveness, Live) ->
    Live;
liveout1([L|Ls], Liveness, Live) ->
    liveout1(Ls, Liveness, ordsets:union(livein(Liveness, L), Live)).

successors(L, Liveness) ->
    {_GK,_LiveIn,Successors} = liveness_lookup(L, Liveness),
    Successors.

-spec livein(gb_tree(), _) -> [_].

livein(Liveness, L) ->
    {_GK,LiveIn,_Successors} = liveness_lookup(L, Liveness),
    LiveIn.

kill(L, Liveness) ->
    {{_Gen,Kill},_LiveIn,_Successors} = liveness_lookup(L, Liveness),
    Kill.

gen(L, Liveness) ->
    {{Gen,_Kill},_LiveIn,_Successors} = liveness_lookup(L, Liveness),
    Gen.

init([], _) ->
    [];
init([L|Ls], CFG) ->
    BB = cfg_bb(CFG, L),
    Code = hipe_bb:code(BB),
    Succ = cfg_succ(CFG, L),
    Transfer = make_bb_transfer(Code, Succ),
    [{L,{Transfer,ordsets:new(),Succ}}|init(Ls, CFG)].

make_bb_transfer([], _Succ) ->
    {ordsets:new(),ordsets:new()};
make_bb_transfer([I|Is], Succ) ->
    {Gen,Kill} = make_bb_transfer(Is, Succ),
    InstrGen = ordsets:from_list(uses(I)),
    InstrKill = ordsets:from_list(defines(I)),
    Gen1 = ordsets:subtract(Gen, InstrKill),
    Gen2 = ordsets:union(Gen1, InstrGen),
    Kill1 = ordsets:union(Kill, InstrKill),
    Kill2 = ordsets:subtract(Kill1, InstrGen),
    {Gen2,Kill2}.

liveness_init(List) ->
    liveness_init(List, gb_trees:empty()).

liveness_init([{Lbl,Data}|Left], Acc) ->
    liveness_init(Left, gb_trees:insert(Lbl, Data, Acc));
liveness_init([], Acc) ->
    Acc.

liveness_lookup(Label, Liveness) ->
    gb_trees:get(Label, Liveness).

liveness_update(Label, Val, Liveness) ->
    gb_trees:update(Label, Val, Liveness).

-file("test/lib/hipe/arm/hipe_arm_liveness_gpr.erl", 27).

analyse(CFG) ->
    analyze(CFG).

cfg_bb(CFG, L) ->
    hipe_arm_cfg:bb(CFG, L).

cfg_postorder(CFG) ->
    hipe_arm_cfg:postorder(CFG).

cfg_succ(CFG, L) ->
    hipe_arm_cfg:succ(CFG, L).

uses(Insn) ->
    hipe_arm_defuse:insn_use_gpr(Insn).

defines(Insn) ->
    hipe_arm_defuse:insn_def_gpr(Insn).

liveout_no_succ() ->
    ordsets:from_list(lists:map(fun({Reg,Type}) ->
                                       hipe_arm:mk_temp(Reg, Type)
                                end,
                                hipe_arm_registers:live_at_return())).



