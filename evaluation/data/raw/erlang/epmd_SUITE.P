-file("test/erts/epmd/test/epmd_SUITE.erl", 1).

-module(epmd_SUITE).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/test_server-3.5.3/include/test_server.hrl",
      1).

-file("test/erts/epmd/test/epmd_SUITE.erl", 21).

-file("/usr/local/Cellar/erlang/R15B03-1/lib/erlang/lib/kernel-2.15.3/include/file.hrl",
      1).

-record(file_info,{size :: undefined | non_neg_integer(),
                   type :: undefined
                         | device
                         | directory
                         | other
                         | regular
                         | symlink,
                   access :: undefined
                           | read
                           | write
                           | read_write
                           | none,
                   atime :: undefined | file:date_time() | integer(),
                   mtime :: undefined | file:date_time() | integer(),
                   ctime :: undefined | file:date_time() | integer(),
                   mode :: undefined | integer(),
                   links :: undefined | non_neg_integer(),
                   major_device :: undefined | integer(),
                   minor_device :: undefined | integer(),
                   inode :: undefined | integer(),
                   uid :: undefined | integer(),
                   gid :: undefined | integer()}).

-record(file_descriptor,{module :: undefined | module(),
                         data :: undefined | term()}).

-file("test/erts/epmd/test/epmd_SUITE.erl", 22).

-record(node_info,{port,node_type,prot,lvsn,hvsn,node_name,extra}).

-export([all/0,
         suite/0,
         groups/0,
         init_per_suite/1,
         end_per_suite/1,
         init_per_group/2,
         end_per_group/2,
         init_per_testcase/2,
         end_per_testcase/2]).

-export([register_name/1,
         register_names_1/1,
         register_names_2/1,
         register_duplicate_name/1,
         unicode_name/1,
         long_unicode_name/1,
         get_port_nr/1,
         slow_get_port_nr/1,
         unregister_others_name_1/1,
         unregister_others_name_2/1,
         register_overflow/1,
         name_with_null_inside/1,
         name_null_terminated/1,
         stupid_names_req/1,
         no_data/1,
         one_byte/1,
         two_bytes/1,
         partial_packet/1,
         zero_length/1,
         too_large/1,
         alive_req_too_small_1/1,
         alive_req_too_small_2/1,
         alive_req_too_large/1,
         returns_valid_empty_extra/1,
         returns_valid_populated_extra_with_nulls/1,
         buffer_overrun_1/1,
         buffer_overrun_2/1,
         no_nonlocal_register/1,
         no_nonlocal_kill/1,
         no_live_killing/1]).

suite() ->
    [{ct_hooks,[ts_install_cth]}].

all() ->
    [register_name,
     register_names_1,
     register_names_2,
     register_duplicate_name,
     unicode_name,
     long_unicode_name,
     get_port_nr,
     slow_get_port_nr,
     unregister_others_name_1,
     unregister_others_name_2,
     register_overflow,
     name_with_null_inside,
     name_null_terminated,
     stupid_names_req,
     no_data,
     one_byte,
     two_bytes,
     partial_packet,
     zero_length,
     too_large,
     alive_req_too_small_1,
     alive_req_too_small_2,
     alive_req_too_large,
     returns_valid_empty_extra,
     returns_valid_populated_extra_with_nulls,
     {group,buffer_overrun},
     no_nonlocal_register,
     no_nonlocal_kill,
     no_live_killing].

groups() ->
    [{buffer_overrun,[],[buffer_overrun_1,buffer_overrun_2]}].

init_per_suite(Config) ->
    Config.

end_per_suite(_Config) ->
    ok.

init_per_group(_GroupName, Config) ->
    Config.

end_per_group(_GroupName, Config) ->
    Config.

init_per_testcase(_Func, Config) ->
    Dog = test_server:timetrap(test_server:minutes(3)),
    cleanup(),
    [{watchdog,Dog}|Config].

end_per_testcase(_Func, Config) ->
    cleanup(),
    Dog = test_server:lookup_config(watchdog, Config),
    catch test_server:timetrap_cancel(Dog),
    ok.

register_name(doc) ->
    ["Register a name"];
register_name(suite) ->
    [];
register_name(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} = register_node("foobar"),
    ok = close(Sock),
    ok.

register_names_1(doc) ->
    ["Register and unregister two nodes"];
register_names_1(suite) ->
    [];
register_names_1(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock1} = register_node("foobar"),
    {ok,Sock2} = register_node("foozap"),
    ok = close(Sock1),
    ok = close(Sock2),
    ok.

register_names_2(doc) ->
    ["Register and unregister two nodes"];
register_names_2(suite) ->
    [];
register_names_2(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock1} = register_node("foobar"),
    {ok,Sock2} = register_node("foozap"),
    ok = close(Sock2),
    ok = close(Sock1),
    ok.

register_duplicate_name(doc) ->
    ["Two nodes with the same name"];
register_duplicate_name(suite) ->
    [];
register_duplicate_name(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} = register_node("foobar"),
    error = register_node("foobar"),
    ok = close(Sock),
    ok.

unicode_name(doc) ->
    ["Check that we can register and lookup a unicode name"];
unicode_name(suite) ->
    [];
unicode_name(Config) when is_list(Config) ->
    ok = epmdrun(),
    NodeName = [128520],
    {ok,Sock} = register_node_v2(4711, 72, 0, 5, 5, NodeName, []),
    {ok,NodeInfo} = port_please_v2(NodeName),
    NodeName = NodeInfo#node_info.node_name,
    ok = close(Sock),
    ok.

long_unicode_name(doc) ->
    ["Check that we can register and lookup a long unicode name"];
long_unicode_name(suite) ->
    [];
long_unicode_name(Config) when is_list(Config) ->
    ok = epmdrun(),
    BaseChar = 128512,
    NodeName = lists:seq(BaseChar, BaseChar + 200),
    {ok,Sock} = register_node_v2(4711, 72, 0, 5, 5, NodeName, []),
    {ok,NodeInfo} = port_please_v2(NodeName),
    NodeName = NodeInfo#node_info.node_name,
    ok = close(Sock),
    ok.

register_node(Name) ->
    register_node_v2(1000, $M, 0, 5, 5, Name, "").

register_node(Name, Port) ->
    register_node_v2(Port, $M, 0, 5, 5, Name, "").

register_node_v2(Port, NodeType, Prot, HVsn, LVsn, Name, Extra) ->
    Utf8Name = unicode:characters_to_binary(Name),
    Req =
        [$x,
         put16(Port),
         NodeType,
         Prot,
         put16(HVsn),
         put16(LVsn),
         put16(size(Utf8Name)),
         binary_to_list(Utf8Name),
         size16(Extra),
         Extra],
    case send_req(Req) of
        {ok,Sock} ->
            case recv(Sock, 4) of
                {ok,[$y,_Res = 0,_C0,_C1]} ->
                    {ok,Sock};
                Other ->
                    test_server:format("recv on sock ~w: ~p~n",
                                       [Sock,Other]),
                    error
            end;
        error ->
            error
    end.

port_please_v2(Name) ->
    case
        send_req([$z,binary_to_list(unicode:characters_to_binary(Name))])
    of
        {ok,Sock} ->
            case recv_until_sock_closes(Sock) of
                {ok,Resp} ->
                    parse_port2_resp(Resp);
                Other ->
                    test_server:format("recv on sock ~w: ~p~n",
                                       [Sock,Other]),
                    error
            end;
        error ->
            error
    end.

parse_port2_resp(Resp) ->
    case list_to_binary(Resp) of
        <<$w,
          Res,
          Port:16,
          NodeType,
          Prot,
          HVsn:16,
          LVsn:16,
          NLen:16,
          NodeName:NLen/binary,
          ELen:16,
          Extra:ELen/binary>>
            when Res =:= 0 ->
            {ok,
             #node_info{port = Port,
                        node_type = NodeType,
                        prot = Prot,
                        hvsn = HVsn,
                        lvsn = LVsn,
                        node_name = unicode:characters_to_list(NodeName),
                        extra = binary_to_list(Extra)}};
        _Other ->
            test_server:format("invalid port2 resp: ~p~n", [Resp]),
            error
    end.

name_with_null_inside(doc) ->
    ["Register a name with a null char in it"];
name_with_null_inside(suite) ->
    [];
name_with_null_inside(Config) when is_list(Config) ->
    ok = epmdrun(),
    error = register_node("foo\000bar"),
    ok.

name_null_terminated(doc) ->
    ["Register a name with terminating null byte"];
name_null_terminated(suite) ->
    [];
name_null_terminated(Config) when is_list(Config) ->
    ok = epmdrun(),
    error = register_node("foobar\000"),
    ok.

stupid_names_req(doc) ->
    ["Read names from epmd in a stupid way"];
stupid_names_req(suite) ->
    [];
stupid_names_req(Config) when is_list(Config) ->
    Dog = test_server:lookup_config(watchdog, Config),
    test_server:timetrap_cancel(Dog),
    LongDog = test_server:timetrap(test_server:minutes(3)),
    ok = epmdrun(),
    [FirstConn|Conn] = register_many(1, 1000, "foo"),
    unregister_many([FirstConn]),
    sleep(test_server:seconds(1)),
    ok = check_names(Conn),
    ok = unregister_many(Conn),
    test_server:timetrap_cancel(LongDog),
    ok.

check_names(Conn) ->
    {ok,Sock} = connect_active(),
    {ok,Reply} = do_get_names(Sock),
    SortConn = lists:sort(Conn),
    SortReply = lists:sort(Reply),
    ok = check_names_cmp(SortConn, SortReply),
    ok.

check_names_cmp([], []) ->
    ok;
check_names_cmp([{Name,Port,_Sock}|Conn], [{Name,Port}|Reply]) ->
    check_names_cmp(Conn, Reply).

do_get_names(Socket) ->
    inet_tcp:send(Socket, [[(1 bsr 8) band 255,1 band 255],$n]),
    receive
        {tcp,Socket,[P0,P1,P2,P3|T]} ->
            EpmdPort = P0 bsl 24 bor (P1 bsl 16) bor (P2 bsl 8) bor P3,
            if
                EpmdPort == 2243 ->
                    names_loop(Socket, T, []);
                true ->
                    close(Socket),
                    {error,address}
            end;
        {tcp_closed,Socket} ->
            {ok,[]}
    end.

names_loop(Socket, Acc, Ps) ->
    receive
        {tcp,Socket,Bytes} ->
            {NAcc,NPs} = scan_names(Acc ++ Bytes, Ps),
            names_loop(Socket, NAcc, NPs);
        {tcp_closed,Socket} ->
            {_,NPs} = scan_names(Acc, Ps),
            {ok,NPs}
    end.

scan_names(Buf, Ps) ->
    case scan_line(Buf, []) of
        {Line,NBuf} ->
            case parse_line(Line) of
                {ok,Entry} ->
                    scan_names(NBuf, [Entry|Ps]);
                error ->
                    scan_names(NBuf, Ps)
            end;
        [] ->
            {Buf,Ps}
    end.

scan_line([$\n|Buf], Line) ->
    {lists:reverse(Line),Buf};
scan_line([C|Buf], Line) ->
    scan_line(Buf, [C|Line]);
scan_line([], _) ->
    [].

parse_line([$n,$a,$m,$e,$\s|Buf0]) ->
    case parse_name(Buf0, []) of
        {Name,Buf1} ->
            case Buf1 of
                [$a,$t,$\s,$p,$o,$r,$t,$\s|Buf2] ->
                    case catch list_to_integer(Buf2) of
                        {'EXIT',_} ->
                            error;
                        Port ->
                            {ok,{Name,Port}}
                    end;
                _ ->
                    error
            end;
        error ->
            error
    end;
parse_line(_) ->
    error.

parse_name([$\s|Buf], Name) ->
    {lists:reverse(Name),Buf};
parse_name([C|Buf], Name) ->
    parse_name(Buf, [C|Name]);
parse_name([], _Name) ->
    error.

get_port_nr(doc) ->
    ["Register a name on a port and ask about port nr"];
get_port_nr(suite) ->
    [];
get_port_nr(Config) when is_list(Config) ->
    port_request([$z,"foo"]).

slow_get_port_nr(doc) ->
    ["Register with slow write and ask about port nr"];
slow_get_port_nr(suite) ->
    [];
slow_get_port_nr(Config) when is_list(Config) ->
    port_request([$z,d,$f,d,$o,d,$o]).

port_request(M) ->
    ok = epmdrun(),
    Port = 1042,
    {ok,RSock} = register_node("foo", Port),
    {ok,Sock} = connect(),
    ok = send(Sock, [size16(M),M]),
    case recv_until_sock_closes(Sock) of
        {ok,Resp} ->
            close(RSock),
            {ok,Rec} = parse_port2_resp(Resp),
            Port = Rec#node_info.port,
            ok;
        Other ->
            close(RSock),
            test_server:format("recv on sock ~w: ~p~n", [Sock,Other]),
            throw({error,Other})
    end,
    ok.

unregister_others_name_1(doc) ->
    ["Unregister name of other node"];
unregister_others_name_1(suite) ->
    [];
unregister_others_name_1(Config) when is_list(Config) ->
    ok = epmdrun("-relaxed_command_check"),
    {ok,RSock} = register_node("foo"),
    {ok,Sock} = connect(),
    M = [$s,"foo"],
    ok = send(Sock, [size16(M),M]),
    R = "STOPPED",
    {ok,R} = recv(Sock, length(R)),
    ok = close(RSock),
    ok.

unregister_others_name_2(doc) ->
    ["Unregister name of other node"];
unregister_others_name_2(suite) ->
    [];
unregister_others_name_2(Config) when is_list(Config) ->
    ok = epmdrun("-relaxed_command_check"),
    {ok,Sock} = connect(),
    M = [$s,"xxx42"],
    ok = send(Sock, [size16(M),M]),
    R = "NOEXIST",
    {ok,R} = recv(Sock, length(R)),
    ok.

register_overflow(doc) ->
    ["Register too many, clean and redo 10 times"];
register_overflow(suite) ->
    [];
register_overflow(Config) when is_list(Config) ->
    Dog = test_server:lookup_config(watchdog, Config),
    test_server:timetrap_cancel(Dog),
    LongDog = test_server:timetrap(test_server:minutes(10)),
    ok = epmdrun(),
    Conn = register_many(1, 1000, "foo"),
    Count = length(Conn),
    ok = unregister_many(Conn),
    sleep(test_server:seconds(1)),
    test_server:format("Limit was ~w names, now reg/unreg all 10 times~"
                       "n",
                       [Count]),
    ok = register_repeat(Count),
    sleep(test_server:seconds(1)),
    ok = rregister_repeat(Count),
    sleep(test_server:seconds(1)),
    ok = register_repeat(Count),
    sleep(test_server:seconds(1)),
    ok = rregister_repeat(Count),
    sleep(test_server:seconds(1)),
    ok = register_repeat(Count),
    sleep(test_server:seconds(1)),
    ok = rregister_repeat(Count),
    sleep(test_server:seconds(1)),
    ok = register_repeat(Count),
    sleep(test_server:seconds(1)),
    ok = rregister_repeat(Count),
    sleep(test_server:seconds(1)),
    ok = register_repeat(Count),
    sleep(test_server:seconds(1)),
    ok = rregister_repeat(Count),
    test_server:timetrap_cancel(LongDog),
    ok.

register_repeat(Count) ->
    Conn = register_many(1, 1000, "foo"),
    ok = unregister_many(Conn),
    if
        length(Conn) == Count ->
            ok;
        true ->
            error
    end.

rregister_repeat(Count) ->
    Conn = register_many(1, 1000, "foo"),
    ok = unregister_many(lists:reverse(Conn)),
    if
        length(Conn) == Count ->
            ok;
        true ->
            error
    end.

register_many(I, N, _Prefix) when I > N ->
    test_server:format("Done with all ~n", []),
    [];
register_many(I, N, Prefix) ->
    Name = gen_name(Prefix, I),
    Port = 1000 + I,
    case register_node(Name, Port) of
        {ok,Sock} ->
            [{Name,Port,Sock}|register_many(I + 1, N, Prefix)];
        Any ->
            test_server:format("Can't register: ~w of 1..~w ~w~n",
                               [Name,N,Any]),
            []
    end.

unregister_many([]) ->
    ok;
unregister_many([{Name,_Port,Sock}|Socks]) ->
    case close(Sock) of
        ok ->
            unregister_many(Socks);
        Any ->
            test_server:format("Can't unregister: ~w reason ~w~n",
                               [Name,Any]),
            error
    end.

gen_name(Str, Int) ->
    Str ++ integer_to_list(Int).

no_data(doc) ->
    ["Open but send no data"];
no_data(suite) ->
    [];
no_data(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} = connect(),
    sleep(test_server:seconds(5)),
    closed = recv(Sock, 1),
    ok.

one_byte(doc) ->
    ["Send one byte only"];
one_byte(suite) ->
    [];
one_byte(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} = connect(),
    ok = send(Sock, [0]),
    sleep(test_server:seconds(5)),
    closed = recv(Sock, 1),
    ok.

two_bytes(doc) ->
    ["Send packet size only"];
two_bytes(suite) ->
    [];
two_bytes(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} = connect(),
    ok = send(Sock, [put16(3)]),
    sleep(test_server:seconds(5)),
    closed = recv(Sock, 1),
    ok.

partial_packet(doc) ->
    ["Got only part of a packet"];
partial_packet(suite) ->
    [];
partial_packet(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} = connect(),
    ok = send(Sock, [put16(100),"only a few bytes"]),
    sleep(test_server:seconds(5)),
    closed = recv(Sock, 1),
    ok.

zero_length(doc) ->
    ["Invalid zero packet size"];
zero_length(suite) ->
    [];
zero_length(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} = connect(),
    ok = send(Sock, [0,0,0,0,0,0,0,0,0,0]),
    sleep(test_server:seconds(1)),
    closed = recv(Sock, 1),
    ok.

too_large(doc) ->
    ["Invalid large packet"];
too_large(suite) ->
    [];
too_large(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} = connect(),
    Size = 63000,
    M = lists:duplicate(Size, $z),
    ok = send(Sock, [put16(Size),M]),
    sleep(test_server:seconds(1)),
    case recv(Sock, 1) of
        closed ->
            ok;
        {error,econnaborted} ->
            ok;
        Other ->
            exit({unexpected,Other})
    end.

alive_req_too_small_1(doc) ->
    ["Try to register but not enough data"];
alive_req_too_small_1(suite) ->
    [];
alive_req_too_small_1(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} = connect(),
    M = [$x,put16(1000),$M,0,put16(5),put16(5),put16(0)],
    ok = send(Sock, [size16(M),M]),
    sleep(test_server:seconds(1)),
    closed = recv(Sock, 1),
    ok.

alive_req_too_small_2(doc) ->
    ["Try to register but not enough data"];
alive_req_too_small_2(suite) ->
    [];
alive_req_too_small_2(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} = connect(),
    M = [$x,put16(1000),$M,0,put16(5),put16(5)],
    ok = send(Sock, [size16(M),M]),
    sleep(test_server:seconds(1)),
    closed = recv(Sock, 1),
    ok.

alive_req_too_large(doc) ->
    ["Try to register but node name too large"];
alive_req_too_large(suite) ->
    [];
alive_req_too_large(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} = connect(),
    L = ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
         "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
         "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
         "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
         "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
         "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
         "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
         "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
         "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
         "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
         "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
         "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"],
    S = length(lists:flatten(L)),
    M = [$x,put16(1000),$M,0,put16(5),put16(5),put16(S),L,put16(0)],
    ok = send(Sock, [size16(M),M]),
    sleep(test_server:seconds(1)),
    {ok,[$y,1]} = recv(Sock, 2),
    ok.

returns_valid_empty_extra(doc) ->
    ["Check that an empty extra is prefixed by a two byte length"];
returns_valid_empty_extra(suite) ->
    [];
returns_valid_empty_extra(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} = register_node_v2(4711, 72, 0, 5, 5, "foo", []),
    {ok,#node_info{extra = []}} = port_please_v2("foo"),
    ok = close(Sock),
    ok.

returns_valid_populated_extra_with_nulls(doc) ->
    ["Check a populated extra with embedded null characters"];
returns_valid_populated_extra_with_nulls(suite) ->
    [];
returns_valid_populated_extra_with_nulls(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,Sock} =
        register_node_v2(4711, 72, 0, 5, 5, "foo", "ABC\000\000"),
    {ok,#node_info{extra = "ABC\000\000"}} = port_please_v2("foo"),
    ok = close(Sock),
    ok.

buffer_overrun_1(suite) ->
    [];
buffer_overrun_1(doc) ->
    ["Test security vulnerability in fake extra lengths in alive2_req"];
buffer_overrun_1(Config) when is_list(Config) ->
    ok = epmdrun(),
    true =
        alltrue([ 
                 hostile(N) ||
                     N <- lists:seq(1, 10000)
                ]),
    ok.

buffer_overrun_2(suite) ->
    [];
buffer_overrun_2(doc) ->
    ["Test security vulnerability in fake extra lengths in alive2_req"];
buffer_overrun_2(Config) when is_list(Config) ->
    ok = epmdrun(),
    [false|Rest] =
        [ 
         hostile2(N) ||
             N <- lists:seq(255 * 4, 10000)
        ],
    true = alltrue(Rest),
    ok.

hostile(N) ->
    try
        Bin = <<$x:8,4747:16,$M:8,0:8,5:16,5:16,5:16,"gurka",N:16>>,
        S = size(Bin),
        {ok,E} = connect_sturdy(),
        gen_tcp:send(E, [<<S:16>>,Bin]),
        closed = recv(E, 1),
        gen_tcp:close(E),
        true
    catch
        _:_ ->
            false
    end.

hostile2(N) ->
    try
        B2 = list_to_binary(lists:duplicate(N, 255)),
        Bin =
            <<$x:8,
              4747:16,
              $M:8,
              0:8,
              5:16,
              5:16,
              5:16,
              "gurka",
              N:16,
              B2/binary>>,
        S = size(Bin),
        {ok,E} = connect_sturdy(),
        gen_tcp:send(E, [<<S:16>>,Bin]),
        Z = recv(E, 2),
        gen_tcp:close(E),
        (Z =:= closed) or (Z =:= {ok,[$y,1]})
    catch
        _A:_B ->
            false
    end.

alltrue([]) ->
    true;
alltrue([true|T]) ->
    alltrue(T);
alltrue([_|_]) ->
    false.

no_nonlocal_register(suite) ->
    [];
no_nonlocal_register(doc) ->
    ["Ensure that we cannot register throug a nonlocal connection"];
no_nonlocal_register(Config) when is_list(Config) ->
    case {os:find_executable("ssh"),ct:get_config(ssh_proxy_host)} of
        {SSH,Name} when is_list(Name), is_list(SSH) ->
            do_no_nonlocal_register(Config, Name);
        {false,_} ->
            {skip,"No ssh command found to create proxy"};
        _ ->
            {skip,"No ssh_proxy_host configured in ts.config"}
    end.

do_no_nonlocal_register(Config, SSHHost) when is_list(Config) ->
    ok = epmdrun(),
    ProxyPort = proxy_port(),
    ok = ssh_proxy(SSHHost, ProxyPort),
    Res =
        try
            Name = "gurka_",
            Bname = list_to_binary(Name),
            NameS = byte_size(Bname),
            Bin =
                <<$x:8,
                  4747:16,
                  $M:8,
                  0:8,
                  5:16,
                  5:16,
                  NameS:16,
                  Bname/binary,
                  0:16>>,
            S = size(Bin),
            {ok,E} = connect("localhost", ProxyPort, passive),
            gen_tcp:send(E, [<<S:16>>,Bin]),
            closed = recv(E, 1),
            gen_tcp:close(E),
            true
        catch
            _:_ ->
                false
        end,
    true = Res,
    ok.

no_nonlocal_kill(suite) ->
    [];
no_nonlocal_kill(doc) ->
    ["Ensure that we cannot kill through nonlocal connection"];
no_nonlocal_kill(Config) when is_list(Config) ->
    case {os:find_executable("ssh"),ct:get_config(ssh_proxy_host)} of
        {SSH,Name} when is_list(Name), is_list(SSH) ->
            do_no_nonlocal_kill(Config, Name);
        {false,_} ->
            {skip,"No ssh command found to create proxy"};
        _ ->
            {skip,"No ssh_proxy_host configured in ts.config"}
    end.

do_no_nonlocal_kill(Config, SSHHost) when is_list(Config) ->
    ok = epmdrun(),
    ProxyPort = proxy_port(),
    ok = ssh_proxy(SSHHost, ProxyPort),
    Res =
        try
            {ok,E} = connect("localhost", ProxyPort, passive),
            M = [$k],
            send(E, [size16(M),M]),
            closed = recv(E, 2),
            gen_tcp:close(E),
            sleep(test_server:seconds(1)),
            {ok,E2} = connect("localhost", ProxyPort, passive),
            gen_tcp:close(E2),
            true
        catch
            _:_ ->
                false
        end,
    true = Res,
    ok.

no_live_killing(doc) ->
    ["Dont allow killing with live nodes or any unregistering w/o -rela"
     "xed_command_check"];
no_live_killing(suite) ->
    [];
no_live_killing(Config) when is_list(Config) ->
    ok = epmdrun(),
    {ok,RSock} = register_node("foo"),
    {ok,Sock} = connect(),
    M = [$k],
    ok = send(Sock, [size16(M),M]),
    {ok,"NO"} = recv(Sock, 2),
    close(Sock),
    {ok,Sock2} = connect(),
    M2 = [$s,"foo"],
    ok = send(Sock2, [size16(M2),M2]),
    closed = recv(Sock2, 1),
    close(Sock2),
    close(RSock),
    sleep(test_server:seconds(1)),
    {ok,Sock3} = connect(),
    M3 = [$k],
    ok = send(Sock3, [size16(M3),M3]),
    {ok,"OK"} = recv(Sock3, 2),
    close(Sock3),
    ok.

cleanup() ->
    sleep(test_server:seconds(1)),
    case connect() of
        {ok,Sock} ->
            M = [$k],
            send(Sock, [size16(M),M]),
            recv(Sock, length("OK")),
            close(Sock),
            sleep(test_server:seconds(1));
        _ ->
            true
    end.

proxy_port() ->
    2243 + 1.

ssh_proxy(SSHHost, ProxyPort) ->
    Host = lists:nth(2, string:tokens(atom_to_list(node()), "@")),
    osrun("ssh -L "
          ++
          integer_to_list(ProxyPort)
          ++
          ":"
          ++
          Host
          ++
          ":" ++ integer_to_list(2243) ++ " " ++ SSHHost ++ " read").

epmdrun() ->
    epmdrun([]).

epmdrun(Args) ->
    case os:find_executable(epmd) of
        false ->
            {error,{could_not_find_epmd_in_path}};
        Path ->
            epmdrun(Path, Args)
    end.

epmdrun(Epmd, Args0) ->
    Args =
        case Args0 of
            [] ->
                [];
            O ->
                " " ++ O
        end,
    osrun("\""
          ++
          Epmd
          ++
          "\""
          ++
          Args ++ " -packet_timeout 1 -port " ++ integer_to_list(2243)).

osrun(Cmd) ->
    _ = open_port({spawn,Cmd}, []),
    ok.

connect() ->
    connect("localhost", 2243, passive).

connect(Addr) ->
    connect(Addr, 2243, passive).

connect_active() ->
    connect("localhost", 2243, active).

connect_sturdy() ->
    connect("localhost", 2243, passive, 15000, 3).

connect(Addr, Port, Mode) ->
    connect(Addr, Port, Mode, 500, 4).

connect(Addr, Port, Mode, Sleep, Retry) ->
    case connect_repeat(Addr, Retry, Port, Mode, Sleep) of
        {ok,Sock} ->
            {ok,Sock};
        {error,timeout} ->
            timeout;
        {error,Reason} ->
            test_server:format("connect: error: ~w~n", [Reason]),
            error;
        Any ->
            test_server:format("connect: unknown message: ~w~n", [Any]),
            exit(1)
    end.

connect_repeat(Addr, 1, Port, Mode, _Sleep) ->
    connect_mode(Addr, Port, Mode);
connect_repeat(Addr, Retry, Port, Mode, Sleep) ->
    case connect_mode(Addr, Port, Mode) of
        {ok,Sock} ->
            {ok,Sock};
        {error,Reason} ->
            test_server:format("connect: error: ~w~n", [Reason]),
            timer:sleep(Sleep),
            connect_repeat(Addr, Retry - 1, Port, Mode, Sleep);
        Any ->
            test_server:format("connect: unknown message: ~w~n", [Any]),
            exit(1)
    end.

connect_mode(Addr, Port, active) ->
    gen_tcp:connect(Addr, Port, [{packet,0}], 100);
connect_mode(Addr, Port, passive) ->
    gen_tcp:connect(Addr, Port, [{packet,0},{active,false}], 100).

close(Sock) ->
    case gen_tcp:close(Sock) of
        {error,_} ->
            error;
        ok ->
            ok;
        Any ->
            test_server:format("unknown message: ~w~n", [Any]),
            exit(1)
    end.

recv(Sock, Len) ->
    recv(Sock, Len, 2000).

recv(Sock, Len, Timeout) ->
    case gen_tcp:recv(Sock, Len, Timeout) of
        {ok,[]} ->
            recv(Sock, 1, 1);
        {ok,Data} ->
            {ok,Data};
        {error,timeout} ->
            timeout;
        {error,closed} ->
            closed;
        {error,_} = Error ->
            Error;
        Any ->
            test_server:format("unknown message: ~w~n", [Any]),
            exit(1)
    end.

send(Sock, SendSpec) ->
    case send(SendSpec, [], Sock) of
        {ok,[]} ->
            ok;
        {ok,RevBytes} ->
            send_direct(Sock, lists:reverse(RevBytes));
        Any ->
            Any
    end.

send([], RevBytes, _Sock) ->
    {ok,RevBytes};
send([Byte|Spec], RevBytes, Sock) when is_integer(Byte) ->
    send(Spec, [Byte|RevBytes], Sock);
send([List|Spec], RevBytes, Sock) when is_list(List) ->
    case send(List, RevBytes, Sock) of
        {ok,Left} ->
            send(Spec, Left, Sock);
        Other ->
            Other
    end;
send([d|Spec], RevBytes, Sock) ->
    send([{d,1000}|Spec], RevBytes, Sock);
send([{d,S}|Spec], RevBytes, Sock) ->
    case send_direct(Sock, lists:reverse(RevBytes)) of
        ok ->
            timer:sleep(S),
            send(Spec, [], Sock);
        Any ->
            Any
    end.

send_direct(Sock, Bytes) ->
    case gen_tcp:send(Sock, Bytes) of
        ok ->
            ok;
        {error,closed} ->
            closed;
        {error,_Reason} ->
            error;
        Any ->
            test_server:format("unknown message: ~w~n", [Any]),
            Any
    end.

send_req(Req) ->
    case connect() of
        {ok,Sock} ->
            case send(Sock, [size16(Req),Req]) of
                ok ->
                    {ok,Sock};
                Other ->
                    test_server:format("Failed to send ~w on sock ~w: ~"
                                       "w~n",
                                       [Req,Sock,Other]),
                    error
            end;
        Other ->
            test_server:format("Connect failed when sending ~w: ~p~n",
                               [Req,Other]),
            error
    end.

recv_until_sock_closes(Sock) ->
    recv_until_sock_closes_2(Sock, []).

recv_until_sock_closes_2(Sock, AccData) ->
    case recv(Sock, 0) of
        {ok,Data} ->
            recv_until_sock_closes_2(Sock, AccData ++ Data);
        closed ->
            {ok,AccData};
        Other ->
            Other
    end.

sleep(MilliSeconds) ->
    timer:sleep(MilliSeconds).

put16(N) ->
    [N bsr 8,N band 255].

size16(List) ->
    N = flat_count(List, 0),
    [N bsr 8,N band 255].

flat_count([H|T], N) when is_integer(H) ->
    flat_count(T, N + 1);
flat_count([H|T], N) when is_list(H) ->
    flat_count(T, flat_count(H, N));
flat_count([_|T], N) ->
    flat_count(T, N);
flat_count([], N) ->
    N.



